<HTML>
<HEAD>
<TITLE>@infile</TITLE>
</HEAD>
<BODY>
<H1>@infile</H1>
<PRE>
<HR>
<EM>This page was updated on Tue Jan 14 </EM>
<P>


<A NAME="test\dceload.pli"></A>
 /*==================================================================*/
 /*                                                                  */
 /*          DCELOAD : LOAD DETAIL COST ESTIMATE PROJECTS FILE       */
 /*                    (BATCH)                                       */
 /*                                                                  */
 /*          ORIGINAL AUTHOR : CJB   10/07/87                        */
 /*          1.0 CONVERSION  :                                       */
 /*          2.0 (IBM)       :                                       */
 /*          2.0 (VAX)       : KLS   01/17/89                        */
 /*                                                                  */
 /*------------------- PROGRAM MODIFICATION HISTORY -----------------*/
 /*                                                                  */
 /*          UPDATED BY : HNP AND PCG                                */
 /*                                                                  */
 /*          THIS PROCESS IS A COMBINATION OF THE THREE LOAD         */
 /*          PROCESSES - DCEPRJS, DCEFDFL, AND DCEAITM.  THE         */
 /*          PROCESSES WERE COMBINED TO REDUCE I/O AND CPU           */
 /*          TIME RUNNING.  THE WORK ITEMS FOR RELEASE 2.1           */
 /*          HAVE ALSO BEEN INCORPORATED INTO THIS MODULE.           */
 /*                                                                  */
 /*          ESTIMATING AT THREE LEVELS.               4.37          */
 /*                                                                  */
 /*          DETAIL ESTIMATE CATEGORY FUNDING BY FUND                */
 /*          REPORT.                                   4.38          */
 /*          (THIS PORTION IS NOT HANDLED BY THIS PROCESS)           */
 /*                                                                  */
 /*          PES/LAS/CAS PROJECTS IN PRIME PROJECT DETAIL            */
 /*          ESTIMATE. (ESTIMATING WITH CAS DATA)      4.39          */
 /*                                                                  */
 /*          ADDITIONAL CATEGORY PERCENTAGE FOR DETAIL COST          */
 /*          ESTIMATE. (IN ADDITION TO E&ampC)            4.40          */
 /*                                                                  */
 /*          ADDITIONAL ITEM IDENTIFIER ON ESTIMATES AND             */
 /*          SCHEDULES.                                4.41          */
 /*                                                                  */
 /*          LETTING-LEVEL SUBMISSION OF FINAL DETAIL                */
 /*          ESTIMATE.                                 4.49          */
 /*                                                                  */
 /*    TPS 10/25/90: Added preprocessor statements for debugging     */
 /*                  added shell$module_segments to all procedures.  */
 /*                                                                  */
 /*    PCG 05/01/91  CODE WAS ADDED TO INCLUDE NON-BID ITEMS         */
 /*                  ON THE FINAL DETAILED ESTIMATE AND USE          */
 /*                  THE ENGINEER'S ESTIMATE PRICE.                  */
 /*                                                                  */
 /*    PCG 05/28/91  CODE WAS CHANGED TO FIX HYBRID CALCULATION      */
 /*                  ERROR ON THE FINAL DETAILED ESTIMATE.  THE      */
 /*                  BUILDING OF THE HYBRID LIST NOT WAS READING     */
 /*                  PROPERLY ON THE IBM DUE TO DIFFERENCES WITH     */
 /*                  PRIMITIVES ON IBM AND VAX.                      */
 /*                                                                  */
 /*    PCGW 06/14/91 CODE WAS CHANGED TO FIX ROUNDING PROBLEMS       */
 /*                  REPORTED BY NEBRASKA.  ROUNDING DIFFERENCE NOW  */
 /*                  ADDED TO THE EXTAMT RATHER THAN PRICE.          */
 /*                  (910605-3201).                                  */
 /*                                                                  */
 /*    PCGW 10/25/91 CODE WAS CHANGED TO FIX ROUNDING PROBLEMS IN    */
 /*                  CALCULATE_LUMP_SUMS.  ROUNDING AND HYBRID AND   */
 /*                  LUMP SUM CALCULATIONS WILL NOW BE HANDLED THE   */
 /*                  SAME IN THIS AND CASINT.  THE PROCEDURE WAS RE- */
 /*                  WRITTEN TO TREAT HYBRIDS AS REGULAR LUMPS IN    */
 /*                  THE FINAL DETAILED ESTIMATE.  ALSO, THE         */
 /*                  'LIBRARY=PESTABL' PARAMETER WAS TAKEN OFF OF    */
 /*                  THE ITOPEN STATEMENTS FOR THE IBM.              */
 /*                  (NO BSR).                                       */
 /*                                                                  */
 /*    PCGW 11/04/91 - FIX FUND LIMIT ON 0 CATG NOT WORKING          */
 /*                   SET LOWCOST FLAG TO YES IF LAS DATA.           */
 /*                                                                  */
 /*    CJB  11/8/91  BSR 911007-3202                                 */
 /*                  CHANGED KEY VALUE FOR PROPPROJ READ IN THE      */
 /*                  BUILD_PES_LAS_GPDEPROJ ROUTINE.                 */
 /*                                                                  */
 /*    TPS  01/06/92 BSR # 920106-2701                               */
 /*                  For hybrid / lump sums item unit price is       */
 /*                  rounded to two decimal places.                  */
 /*                                                                  */
 /*    PCGW 07/06/92 BSR # 920706-3202                               */
 /*                  For WY problem.  added two statememts to the IF */
 /*                  statement (w/ logical OR) to print error        */
 /*                  message about ESTFUNDs not associated to        */
 /*                  project category.  The procedure is:            */
 /*                  PROCESS_GPDE_ESTFUND_RECORD.                    */
 /*                                                                  */
 /*    PCGW 10/07/92 BSR # 920910-3201                               */
 /*                  ADDENDUM (A)DD ITEMS WERE NOT BEING CHECKED     */
 /*                  AGAINST BIDTABS RECORDS TO FIND THE BID PRICE   */
 /*                  IF THE LASGFDE PROCESS WAS BEING RUN.  THIS     */
 /*                  WAS FIXED IN THE ACTION_A PROCEDURE OF THE      */
 /*                  PROCESS_ADDITEMS PROCEDURE.                     */
 /*                                                                  */
 /*    PCGW 01/28/93 BSR # 921201-3201 AND 921015-3201               */
 /*                  PROJECTS WERE NOT BEING DELETED PROPERLY FROM   */
 /*                  THE ESTIMATE.  A NEW PROCEDURE WAS ADDED TO     */
 /*                  CHECK_GPDEEST IF NO PROJECTS ARE ASSOCIATED W/  */
 /*                  AN ESTIMATE.  IF THERE ARE NO PROJECTS, THEN    */
 /*                  ESTIMATE IS DELETED FROM THE GPDEEST FILE.      */
 /*                  ALSO, CA REPORTED THAT WHEN 3 OR MORE PROPOSALS */
 /*                  ARE SELECTED FOR THE ESTIMATE, THE REPORTS DO   */
 /*                  COME OUT CORRECTLY.  THIS WAS DUPLICATED BUT NO */
 /*                  CHANGE DIRECTLY AFFECTING THIS WAS MADE AND IT  */
 /*                  NO LONGER HAPPENS. OTHER FIX PROBABLY SOLVED IT.*/ 
 /*                                                                  */
 /*                                                                  */
 /*    SC 10/04/93   BSR #930015                                     */
 /*                  THE EXCEPTION REPORT ON THE IBM STATED THAT     */
 /*                  NO PRIME PROJECT EXISTED FOR A SELECTED PROJECT */
 /*                  EVEN WHEN THE PRIME PROJECT EXISTED. THIS WAS   */
 /*                  DUE TO THE PRE-EXISTING PROBLEM WITH THE        */
 /*                  ALTERNATE KEY READS ON THE IBM. ADDED EXTRA     */
 /*                  LOGIC IN THE ROUTINE GET_PROJECTS_IN PRIME CHECK*/
 /*                  THE OPERATING SYSTEM AND IF THE OS IS IBM,      */
 /*                  INSTEAD OF A KEYED READ USING ALTERNATE KEY,    */
 /*                  SEQUENTIAL READ IS PERFORMED AND ON THE VAX,    */
 /*                  THE ITREAD WITH ALTERNATE KEY IS RETAINED.      */
 /*                  IN ADDITION TO THE ABOVE PROBLEM, THERE WAS     */
 /*                  AN ADDITIONAL PROBLEM, IN THE SAME ROUTINE.     */
 /*                  THE ITREAD FOR RETRIEVING ALL PROJECTS UNDER    */
 /*                  THE PRIME PROJECT IN PROCESS WAS INCORRECTLY    */
 /*                  SPECIFIED USING THE CURRENT_PPCN AS THE ALT     */
 /*                  KEY. THAT HAS ALSO BEEN MODIFIED TO DO A PRIMARY*/
 /*                  KEY READ.                                       */
 /*                                                                  */
 /*  SC -93/10/06    ADDED CODE TO THE ACTION_C ROUTINE, AN EMBEDDED */
 /*                  ROUTINE OF PROCESS_ADDITEMS TO UPDATE THE ITEM  */
 /*                  UNITS WHENEVER AN ADDENDUM ITEM IS ADDED WITH   */
 /*                  WITH THE 'C' OPTION.                            */ 
 /*                                                                  */
 /*  SC - 93/10/12   CHANGED SOME OF THE ERROR MESSAGES TO BE MORE   */
 /*                  MEANINGFUL.                                     */ 
 /*                                                                  */
 /*  SC - 93/10/18   BSR #: 930161                                   */
 /*                  ADDED A CHECK TO THE APPLY_ADDITEMS PROCEDURE   */
 /*                  IN ORDER TO APPLY THE ADDITEM ONLY IF THE       */
 /*                  CONTID OF THE ADDITEM RECORD IS THE SAME AS     */
 /*                  THE CURRENT CONTID BEING PROCESSED.             */
 /*                  PRIOR TO THIS MODIFICATION, IF THE ADDITEM      */
 /*                  RECORD PCN AND CN MATCHED THE CURRENT PCN AND   */
 /*                  CN THE ADDITEM WAS APPLIED WHICH PRODUCED       */
 /*                  INCORRECT RESULTS WHILE GENERATING DETAIL COST  */
 /*                  ESTIMATE.                                       */
 /*                                                                  */
 /* PCGW - 94/01/21  BSR #930015                                     */
 /*                  THE FIX MADE ON 10/04/93 DID NOT FULLY SOLVE THE*/
 /*                  NO PRIME PROJECT ERROR MESSAGE PROBLEM.  ADDED  */
 /*                  IF STATEMENT AFTER THE ALT-KEY READ OF PRIMXWLK */
 /*                  TO CHECK THE VALUES READ RATHER THAN JUST THE   */
 /*                  RETURN CODE.                                    */
 /*                                                                  */
 /* PCGW - 94/03/15  BSR #940059 &amp 930288                            */
 /*        94/03/22  CHANGED THE CODE IN PROCEDURE APPLY_ADDITEMS TO */
 /*                  CHECK IF ADDITEM.CONTID IS = GPDEPROJ.PCONTID   */
 /*                  INSTEAD OF CURRENT_CONTID.  ADDITEMS DID NOT    */
 /*                  SHOW ON REPORT IF SELECT PROJECT/PROJECT.  THIS */
 /*                  CHANGE CORRECTED THE PROBLEM.  THIS ALSO FIXED  */
 /*                  THE SAME PROBLEM WITH PRIME PROJECTS ON 930288. */
 /*                                                                  */
 /* PCGW - 94/03/21  BSR #940062                                     */
 /*                  CHANGED THE ERROR MESSAGE FOR CATEGORIES WITH   */
 /*                  NO FUNDING TO INCLUDE A STATEMENT ENSURING THE  */
 /*                  THE USERS THAT THIS IS NOT AN ERROR IF ZERO     */
 /*                  CATEGORY FUNDING IS USED.                       */
 /*                                                                  */
 /* PCGW - 94/03/21  BSR #930210                                     */
 /*                  CHANGED THE CODE IN DEL_GPDECATGS PROCEDURES TO */
 /*                  CORRECT READING AND DELETING; USE CORRECT KEYS. */
 /*                  THIS WAS TO SOLVE INFINITE LOOP ERROR IN VA BUT */
 /*                  IN TESTING, IT DID NOT WORK.  CHANGES ALSO MADE */
 /*                  TO SOLVE INFINITE LOOP IN OK.                   */
 /*                                                                  */
 /* PCGW - 94/08/26  BSR #940183  VA                                 */
 /*                  CHANGED A READ STATEMENT IN BUILD_GPDEFILES TO  */
 /*                  CORRECT THE PROBLEM IN THE FINAL DETAIL         */
 /*                  ESTIMATE WHEN SUBMITTING VIA LETTING/CALL.      */
 /*                  THIS PROBLEM DID NOT EXIST ON VAX OR TSO BUT    */
 /*                  ONLY ON CICS.  MAY HAVE TO DO WITH THE WAY DB2  */
 /*                  DOES KEYED READS.  THE KEYLEVEL OPTION WAS      */
 /*                  CHANGED FROM '', TO '0'.  ALSO CHANGED SEVERAL  */
 /*                  OTHER READ STATEMENTS TO SPECIFY THE KEY LEVEL. */
 /*                                                                  */
 /* CJB  - 95/01/16  BSR #950005                                     */
 /*                  MODIFIED REFERENCE TO 'REJECTED' TABLE TO       */
 /*                  'REJECTE'.  THIS IS TO ACCOMMODATE BUILDING OF  */
 /*                  SAS FORMATS AND SHARING OF CODETBLS FILES W DSS.*/
 /*                                                                  */
 /* LKF  - 95/09/21  Enhancement item P-30.                          */
 /*                  Added code to incorporate control group security*/
 /*                  at the Prime Project and Proposal levels.       */
 /*                                                                  */
 /* CMR  - 95/11/21  BSR #950003                                     */
 /*                  Supp. desc. changes.                            */
 /*                                                                  */
 /* LKF  - 95/11/27  BSR 950113                                      */
 /*                  Changed assignment of gpdeest_record.pproadnm   */
 /*                  from project_record.pdescr to project_record.   */
 /*                  proadnm in the procedure build_project_gpdeest. */
 /*                                                                  */
 /*==================================================================*/
 DCELOAD: PROC OPTIONS (MAIN);


    /*****************************************/ 
    /*                                       */ 
    /* THESE TWO STATEMENTS WILL DETERMINE   */ 
    /* IF THE MODULE IS COMPILED FOR TESTING */ 
    /* OR PRODUCTION.  IN PRODUCTION MODE    */ 
    /* THE PREPROCESSOR VARIABLE IS SET TO   */ 
    /* 'OFF', WHILE DURING TESTING IT IS 'ON'*/ 
    /*                                       */ 
    /*****************************************/ 
   %INCLUDE BENVSTP;                            
   %INIT_TYPE = 'DEVELOPMENT';

   %INCLUDE BTCSTUP;

   %DCL DEBUGGER CHARACTER;
   %DEBUGGER = 'OFF'; 

   %INCLUDE PGPDEBO;

   %DECLARE USEPRIMPROJ CHARACTER; 
   %USEPRIMPROJ = 'Y';

   SHELL$MODULE_NAME    = 'DCELOAD';
   SHELL$MODULE_SEGMENT = 'SETUP';  

   ITRC = ITSET ('LOCK','FATAL');
   ITRC = ITSET ('TNF' ,'FATAL');

   %IF DEBUGGER = 'ON' 
       %THEN %DO;      
          ITRC = ITSET ('TRACE','ON');
       %END; 

   %INCLUDE PROJECT; 
   %INCLUDE PROJSEL; 
   %INCLUDE PROPPROJ;
   %INCLUDE PRIMXWLK;
   %INCLUDE PROJCATG;
   %INCLUDE PRIMPROJ;
   %INCLUDE PROPOSAL;
   %INCLUDE PROJFUND;
   %INCLUDE PROJITEM;
   %INCLUDE ESTCATG; 
   %INCLUDE ESTITEM; 
   %INCLUDE ESTFUND; 
   %INCLUDE ITEMLIST;
   %INCLUDE BIDTABS; 
   %INCLUDE LETPROP; 
   %INCLUDE CODETBLS;
   %INCLUDE ADDITEM; 
   %INCLUDE CONTPROJ;
   %INCLUDE PROPITEM;

   %INCLUDE GPDEPROJ;
   %INCLUDE GPDECATG;
   %INCLUDE GPDEFUND;
   %INCLUDE GPDEITEM;
   %INCLUDE GPDEEST;

   /*   DECLARES FOR THE EXCEPTION REPORTING   */

   DCL FIRST_PAGE                          BIT (1) INIT ('1'B),  
       ERROR                               BIT (1) INIT ('0'B),  
       DATE                                BUILTIN;

   /* END DECLARES FOR THE EXCEPTION REPORTING */  


   DCL CURRENT_PCN                         CHAR (13),
       SUBSET_LCONTID                      CHAR (15),
       SUBSET_PCN                          CHAR (13),
       SUBSET_PPCN                         CHAR (15),
       SUBSET_CONTID                       CHAR (15),
       PARM_FILE                           FILE,     
       EXCEPTION                           FILE PRINT,
       PARM_FOUND                          BIT (1) INIT ('0'B), 
       TEMP_PARMBUF                        CHAR (15),
       BUFFER                              CHAR (80) VARYING, 
       LOG_BUFFER                          CHAR (512) VARYING,
       KEYWORD                             CHAR (8),          
       PARM                                CHAR (10),         
       SUBSET_FOUND                        BIT (1) INIT ('1'B),
       STATUS_VALID                        BIT (1) INIT ('1'B),
       ENTRY                               CHAR( 3),           
       VIEW                                CHAR(15) VARYING,   
       SUMLVL                              CHAR(15),
       CONTSTAT                            CHAR (1),
       COVER                               CHAR (1),
       COST                                CHAR (1),
       ESTIMATE                            CHAR (1),
       FUNDING                             CHAR (1),
       UNIT                                CHAR (1),
       CATEGORY                            CHAR (1),
       AWARDED                             CHAR (1),
       CASSRCE                             CHAR (1),
       LASSRCE                             CHAR (1),
       CASFILES                            BIT (1), 
       DETAIL_ALL                          BIT (1), 
       EST_KEY                             CHAR (15) VARYING,  
       EOF                                 BIT (1) INIT ('0'B),
       ERROR_TYPE                          CHAR (132),

      (PRICE,EXTAMT,
       REV_PRICE)                          FIXED DEC (15,5), 
      (GPDECATG_FOUND,  GPDEITEM_FOUND,
       GPDEFUND_FOUND,  GPDEPROJ_FOUND,
       ITEMLIST_FOUND)                     BIT (1),
       ADDITEM_FOUND                       BIT (1) INIT ('1'B),
      (ESTCATG_FOUND,   ESTFUND_FOUND, 
       ESTITEM_FOUND,   CODETBLS_FOUND,
       BIDTABS_FOUND,   LETPROP_FOUND, 
       PROPPROJ_FOUND,  PRIMPROJ_FOUND,
       CONTPROJ_FOUND,  PROPOSAL_FOUND)    BIT (1) INIT ('1'B),
      (PROJECT_FOUND,
       PROJCATG_FOUND,  PROJITEM_FOUND,
       PROJFUND_FOUND,PROPITEM_FOUND)      BIT (1) INIT ('1'B),
       GPDEPROJ_BUILT                      BIT (1) INIT ('0'B),
       OVERFLOW                            BIT (1) INIT ('0'B),
       FIRST_SUBSET                        BIT (1) INIT ('1'B),
       CURRENT_CN                          CHAR (4),
       CURRENT_UNIT                        CHAR (3),
       CURRENT_CONTID                      CHAR (15),
       VALUE                               CHAR (8), 

       DIFFERENCE                          FIXED DEC (9,5),
       SUBSET                              CHAR(8) INIT ('SUBSET  '), 
       DTLFLG_VALUE                        CHAR (1);

   DCL 1 REAL_LETPROP_PTR             POINTER;

   DCL (PCN_LIST_END,PCN_LIST_TOP,PLIST)   POINTER;

   DCL 1 PCN_LIST_NODE BASED,
         2 PCN                        CHAR (13),
         2 DTLFLG                     CHAR (1),
         2 NEXT_PTR                        POINTER;

   PCN_LIST_TOP = NULL;
   PCN_LIST_END = NULL;
   PLIST        = NULL;



   /* THIS PROCESSED PCN LIST IS USED TO DETERMINE
      IF A PCN HAS BEEN PROCESSED ALREADY BUT HAS 
      BEEN DELETED DUE TO ERRORS FOUND DURING THE 
      LOADING OF THE CATEGORY AND/OR ITEM INFORMATION.
      THIS LIST WILL BE FREED AFTER ALL SUBSET FILES
      HAVE BEEN READ.                                  */

   DCL (PROCESSED_PCN_LIST_END,
        PROCESSED_PCN_LIST_TOP,
        PROCESSED_PLIST)   POINTER;

   DCL 1 PROCESSED_PCN_LIST_NODE BASED,
         2 PCN                        CHAR (13),
         2 DTLFLG                     CHAR (1), 
         2 NEXT_PTR                   POINTER;

   PROCESSED_PCN_LIST_TOP = NULL;
   PROCESSED_PCN_LIST_END = NULL;
   PROCESSED_PLIST        = NULL;


   DCL  ZERO_CATEGORY CHAR (4) INIT ('0000');

   ON FIXEDOVERFLOW OVERFLOW = '1'B;

   ON ENDFILE(PARM_FILE) EOF = '1'B;



 /*----------------------------------------------------------------*/
 /*                          MAIN LOOP STRUCTURE                   */
 /*----------------------------------------------------------------*/

   CALL OPEN;  

   CALL DO_EXCEPTION_HEADER;

   CALL GET_PARMS;

   IF CASSRCE = 'Y' THEN
      DO;
         CALL OPEN_CASFILES;
         CASFILES = '1'B;
      END;

   PLIST = PCN_LIST_TOP;

   IF PARM_FOUND THEN 
      DO;
         CALL OPEN_SUBSET;
         CALL GET_SUBSET; 
         DO WHILE (SUBSET_FOUND);
            IF VIEW = 'LETTINGS' THEN
               DO;
                  CALL CHECK_AWD_STATUS;
                  IF STATUS_VALID THEN
                     CALL BUILD_GPDEFILES;
               END;
            ELSE
               CALL BUILD_GPDEFILES;

            CALL GET_SUBSET;
         END;     /* DO WHILE */
      END;    /* IF PARM FOUND DO */
   ELSE 
      CALL FATAL_ERROR('PROGRAM','PARM FILE DOES NOT EXIST');

  /* ADD CODE TO CHECK IF GPDEEST HAS PROJECTS. IF NOT THEN DELETE */
  /* THE ESTIMATE. PCGW - 01/28/93 BSR'S 921201-3201 &amp 921015-3201 */
 CALL CHECK_GPDEEST;

 CALL FREE_PROCESSED_PCN_LIST;

 CALL CALCULATE_LUMP_SUMS;

 REVERT FIXEDOVERFLOW;

 IF ^ERROR
   THEN PUT SKIP(2) FILE (EXCEPTION) EDIT
            ('****** NO ERRORS ENCOUNTERED ' ||
             'IN LOAD TEMP FILES ******')
             (COL(38),A);

 CALL CLOSE;


 /*------------------------------------------------------------------*/
 /*                       DO_EXCEPTION_HEADER                        */
 /*                                                                  */
 /*                HEADER ROUTINE FOR EXCEPTION REPORT               */
 /*------------------------------------------------------------------*/
   DO_EXCEPTION_HEADER : PROC;

      CALL EXCEPTION_HEADER;

 /*-------- NESTED PROCEDURES WITHIN DO_EXCEPTION_HEADER ------------*/

   /*----------------------------------------------------------------*/
   /*                        EXCEPTION_HEADER                        */
   /*                                                                */
   /*              HEADER ROUTINE FOR EXCEPTION REPORT               */
   /*----------------------------------------------------------------*/
   EXCEPTION_HEADER:  PROC; 

     DCL SAVE_SEGMENT         CHAR (31); 

     SAVE_SEGMENT = SHELL$MODULE_SEGMENT; 
     SHELL$MODULE_SEGMENT = 'EXCEPTION_HEADER';

       %IF DEBUGGER = 'ON' 
           %THEN %DO;      
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END; 

     IF FIRST_PAGE
        THEN FIRST_PAGE = '0'B;
        ELSE PUT FILE (EXCEPTION) PAGE;

     PUT FILE (EXCEPTION) SKIP(3) EDIT 
         ('EXCEPTION REPORT - FILE LOADING',
          'DATE : ',
          SUBSTR(DATE,3,2) ||
          SUBSTR(DATE,5,2) ||
          SUBSTR(DATE,1,2))  
         (COL(51),A,COL(117),A,COL(124),P'99/99/99'); 


     PUT FILE (EXCEPTION) SKIP EDIT 
         (COPY('-',132)) (A(132));


   /*  PUT FILE (EXCEPTION) SKIP EDIT
         ('   ')                     
         (COL(10),A);                
     */                              
     PUT FILE (EXCEPTION) SKIP EDIT  
         (COPY('-',132)) (A(132));   

     SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

   END EXCEPTION_HEADER; 
                                                                                
 /*-------END NESTED PROCEDURES WITHIN DO_EXCEPTION_HEADER-----------*/

 END DO_EXCEPTION_HEADER;

 /*----------------------------------------------------------------*/
 /*                       CHECK AWD STATUS                         */
 /*----------------------------------------------------------------*/

 CHECK_AWD_STATUS : PROC;

     DCL SAVE_SEGMENT         CHAR (31);

     SAVE_SEGMENT = SHELL$MODULE_SEGMENT; 
     SHELL$MODULE_SEGMENT = 'CHECK_AWD_STATUS';

       %IF DEBUGGER = 'ON'
           %THEN %DO; 
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;


     STATUS_VALID = '0'B;

     VALUE = LETPROP_RECORD.LETSTAT || 
             COPY(' ', 8 - LENGTH(LETPROP_RECORD.LETSTAT));


     IF (CONTSTAT = 'A       ' | CONTSTAT = 'B       ') THEN
        DO;
           CODETBLS_KEY = 'AWARDED ' || VALUE;
           CODETBLS_FOUND = '1'B;
           ITRC = ITREAD ('CODETBLS',CODETBLS_KEY,'0','');
           IF ITRC = 8
              THEN CODETBLS_FOUND = '0'B; 
        END;


     IF (CONTSTAT = 'R       ' | CONTSTAT = 'B       ' &amp
         ^CODETBLS_FOUND) THEN
        DO;
           CODETBLS_KEY = 'REJECTE ' || VALUE;
           CODETBLS_FOUND = '1'B;
           ITRC = ITREAD ('CODETBLS',CODETBLS_KEY,'0','');
           IF ITRC = 8
              THEN CODETBLS_FOUND = '0'B;
        END;

     IF CODETBLS_FOUND THEN
        STATUS_VALID = '1'B;

     SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END CHECK_AWD_STATUS;


 /*----------------------------------------------------------------*/
 /*                       OPEN SUBSET                              */
 /*----------------------------------------------------------------*/

 OPEN_SUBSET : PROC;  

     DCL SAVE_SEGMENT         CHAR (31);

     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'OPEN_SUBSET';

       %IF DEBUGGER = 'ON'
           %THEN %DO;     
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT)); 
           %END; 

    IF VIEW = 'PROJECTS' THEN
       DO; 
          DETAIL_ALL = '0'B;
          PROJSEL_RECORD_PTR = ADDR(PROJSEL_RECORD);
          CALL LOAD_SUBSET ('PROJSEL',PROJSEL_RECORD_PTR);
          ITRC = ITOPEN ('SUBSET',PROJSEL_RECORD_PTR,'READ','','',
                 'LIBRARY=TEMPTABL');  

          IF ITRC = 8 THEN 
             CALL FATAL_ERROR('PROGRAM','SUBSET TABLE DOES NOT EXIST');
       END;   


    IF VIEW = 'PRIMES' THEN
       DO;                                                                      
          DETAIL_ALL = '1'B;
          PRIMPROJ_RECORD_PTR = ADDR(PRIMPROJ_RECORD);
          CALL LOAD_SUBSET ('PRIMPROJ',PRIMPROJ_RECORD_PTR);
          ITRC = ITOPEN ('SUBSET',PRIMPROJ_RECORD_PTR,'READ','','', 
                 'LIBRARY=TEMPTABL');

          IF ITRC = 8 THEN
             CALL FATAL_ERROR('PROGRAM','SUBSET TABLE DOES NOT EXIST');
       END; 
    ELSE DO;
            PRIMPROJ_RECORD_PTR = ADDR(PRIMPROJ_RECORD);
            ITRC = ITOPEN ('PRIMPROJ', PRIMPROJ_RECORD_PTR, 'READ', '',
                           '','');
         END;


    IF VIEW = 'PROPOSALS' THEN
       DO;
          DETAIL_ALL = '1'B;
          PROPOSAL_RECORD_PTR = ADDR(PROPOSAL_RECORD); 
          CALL LOAD_SUBSET ('PROPOSAL',PROPOSAL_RECORD_PTR); 
          ITRC = ITOPEN ('SUBSET',PROPOSAL_RECORD_PTR,'READ','','',
                 'LIBRARY=TEMPTABL');  

          IF ITRC = 8 THEN 
             CALL FATAL_ERROR ('PROGRAM',
                               'SUBSET TABLE DOES NOT EXIST');
       END;
     ELSE DO; 
              PROPOSAL_RECORD_PTR = ADDR (PROPOSAL_RECORD);
              ITRC = ITOPEN ('PROPOSAL', PROPOSAL_RECORD_PTR,'READ','',
                             '', '');
          END; 


    IF VIEW = 'LETTINGS' THEN  
       DO; 
          DETAIL_ALL = '0'B;
          LETPROP_RECORD_PTR = ADDR(LETPROP_RECORD);
          CALL LOAD_SUBSET ('LETPROP',LETPROP_RECORD_PTR);
          ITRC = ITOPEN ('SUBSET',LETPROP_RECORD_PTR,'READ','','', 
                 'LIBRARY=TEMPTABL');  

          IF ITRC = 8 THEN 
             CALL FATAL_ERROR ('PROGRAM',   
                               'SUBSET TABLE DOES NOT EXIST');
       END;
    /*  ELSE DO;   */ 
              REAL_LETPROP_PTR = ADDR (LETPROP_RECORD); 
              ITRC = ITOPEN ('LETPROP', REAL_LETPROP_PTR, 'READ', '',
                             '', '');
    /*      END;   */ 

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END OPEN_SUBSET;  

 /*----------------------------------------------------------------*/ 
 /*                       OPEN FILES                               */ 
 /*----------------------------------------------------------------*/ 

 OPEN: PROC;

     DCL SAVE_SEGMENT         CHAR (31);

     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'OPEN '; 

       %IF DEBUGGER = 'ON' 
           %THEN %DO;     
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));   
           %END;  

   OPEN FILE (EXCEPTION)    
     /*   RECORD SEQUENTIAL OUTPUT   */      
        PAGESIZE (INSTOPT_PAGESIZE_OUTPUT1);    /* PGPDEBO */ 

   PROPITEM_RECORD_PTR = ADDR(PROPITEM_RECORD);  
   ITRC = ITOPEN ('PROPITEM ', PROPITEM_RECORD_PTR, 'READ', '','',   
                            '');  

   ADDITEM_RECORD_PTR = ADDR(ADDITEM_RECORD);  
   ITRC = ITOPEN ('ADDITEM ', ADDITEM_RECORD_PTR, 'READ', '', '', 
                            ''); 

   BIDTABS_RECORD_PTR = ADDR(BIDTABS_RECORD); 
   ITRC = ITOPEN ('BIDTABS ', BIDTABS_RECORD_PTR, 'READ', '', '',               
                            ''); 
                                                                                
   ESTCATG_RECORD_PTR = ADDR(ESTCATG_RECORD);
   ITRC = ITOPEN ('ESTCATG ', ESTCATG_RECORD_PTR, 'READ', '', '',
                            ''); 
                                                                                
   ESTFUND_RECORD_PTR = ADDR(ESTFUND_RECORD);
   ITRC = ITOPEN ('ESTFUND ', ESTFUND_RECORD_PTR, 'READ', '', '',
                            '');                                 
                                                                                
   ESTITEM_RECORD_PTR = ADDR(ESTITEM_RECORD);
   ITRC = ITOPEN ('ESTITEM ', ESTITEM_RECORD_PTR, 'READ', '', '',
                            '');                                 

   GPDECATG_RECORD_PTR = ADDR(GPDECATG_RECORD);
   ITRC = ITOPEN ('GPDECATG', GPDECATG_RECORD_PTR, 'WRITE',      
                  '', '', 'LIBRARY=TEMPTABL CREATE');

   GPDEITEM_RECORD_PTR = ADDR(GPDEITEM_RECORD);
   ITRC = ITOPEN ('GPDEITEM', GPDEITEM_RECORD_PTR, 'WRITE',      
                  '', '', 'LIBRARY=TEMPTABL CREATE'); 

   GPDEPROJ_RECORD_PTR = ADDR(GPDEPROJ_RECORD);
   ITRC = ITOPEN ('GPDEPROJ', GPDEPROJ_RECORD_PTR, 'WRITE', 
                  '', '', 'LIBRARY=TEMPTABL CREATE');

   GPDEFUND_RECORD_PTR = ADDR(GPDEFUND_RECORD);
   ITRC = ITOPEN ('GPDEFUND', GPDEFUND_RECORD_PTR, 'WRITE', '', '',
                  'LIBRARY=TEMPTABL CREATE');

   GPDEEST_RECORD_PTR = ADDR(GPDEEST_RECORD);  
   ITRC = ITOPEN ('GPDEEST', GPDEEST_RECORD_PTR, 'WRITE', '', '',
                  'LIBRARY=TEMPTABL CREATE'); 

   ITEMLIST_RECORD_PTR = ADDR(ITEMLIST_RECORD);
   ITRC = ITOPEN ('ITEMLIST', ITEMLIST_RECORD_PTR, 'READ',       
                  '', '', '');   

   PROPPROJ_RECORD_PTR = ADDR (PROPPROJ_RECORD);
   ITRC = ITOPEN ('PROPPROJ', PROPPROJ_RECORD_PTR, 'READ', '',   
                 '', '');

   PRIMXWLK_RECORD_PTR = ADDR (PRIMXWLK_RECORD); 
   ITRC = ITOPEN ('PRIMXWLK', PRIMXWLK_RECORD_PTR, 'READ', '',   
                 '', '');

   PROJECT_RECORD_PTR = ADDR(PROJECT_RECORD);    
   ITRC = ITOPEN ('PROJECT',PROJECT_RECORD_PTR, 'READ', '',      
                 '', '');

   CODETBLS_RECORD_PTR = ADDR(CODETBLS_RECORD);  
   ITRC = ITOPEN ('CODETBLS',CODETBLS_RECORD_PTR, 'READ', '',    
                 '', '');

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END OPEN;


 /*----------------------------------------------------------------*/ 
 /*                       OPEN CAS FILES                           */ 
 /*----------------------------------------------------------------*/ 

 OPEN_CASFILES: PROC;  


     DCL SAVE_SEGMENT         CHAR (31);  

     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'OPEN_CASFILES '; 

       %IF DEBUGGER = 'ON'
           %THEN %DO;  
              PUT SKIP LIST ('INSIDE PROCEDURE ', 
                              TRIM(SHELL$MODULE_SEGMENT)); 
           %END;  
   CONTPROJ_RECORD_PTR = ADDR(CONTPROJ_RECORD);
   ITRC = ITOPEN ('CONTPROJ',CONTPROJ_RECORD_PTR, 'READ', '',                   
                 '', 'LIBRARY=CASTABL');

   PROJCATG_RECORD_PTR = ADDR(PROJCATG_RECORD);
   ITRC = ITOPEN ('PROJCATG ', PROJCATG_RECORD_PTR, 'READ','','',
                            'LIBRARY=CASTABL');

   PROJITEM_RECORD_PTR = ADDR(PROJITEM_RECORD);
   ITRC = ITOPEN ('PROJITEM', PROJITEM_RECORD_PTR, 'READ',
                  '', '', 'LIBRARY=CASTABL');  

   PROJFUND_RECORD_PTR = ADDR(PROJFUND_RECORD);
   ITRC = ITOPEN ('PROJFUND', PROJFUND_RECORD_PTR, 'READ',
                  '', '', 'LIBRARY=CASTABL');  

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END OPEN_CASFILES;


 /*----------------------------------------------------------------*/
 /*                       CLOSE FILES                              */
 /*----------------------------------------------------------------*/

 CLOSE: PROC;  

     DCL SAVE_SEGMENT         CHAR (31); 

     SAVE_SEGMENT = SHELL$MODULE_SEGMENT; 
     SHELL$MODULE_SEGMENT = 'CLOSE ';     

       %IF DEBUGGER = 'ON' 
           %THEN %DO;      
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;

   ITRC = ITCLOSE('PROPITEM','');
   ITRC = ITCLOSE('ADDITEM','');
   ITRC = ITCLOSE('BIDTABS','');
   ITRC = ITCLOSE('ESTCATG','');
   ITRC = ITCLOSE('ESTFUND','');
   ITRC = ITCLOSE('ESTITEM','');
   ITRC = ITCLOSE('GPDECATG','');
   ITRC = ITCLOSE('GPDEITEM',''); 
   ITRC = ITCLOSE('GPDEPROJ',''); 
   ITRC = ITCLOSE('GPDEFUND',''); 
   ITRC = ITCLOSE('GPDEEST','');  
   ITRC = ITCLOSE('ITEMLIST',''); 
   ITRC = ITCLOSE('PROPPROJ',''); 
   ITRC = ITCLOSE('PRIMXWLK',''); 
   ITRC = ITCLOSE('PROJECT','');  
   ITRC = ITCLOSE('CODETBLS',''); 

   CLOSE FILE (EXCEPTION);

   IF CASFILES THEN 
      DO; 
        ITRC = ITCLOSE('CONTPROJ',''); 
        ITRC = ITCLOSE('PROJCATG',''); 
        ITRC = ITCLOSE('PROJITEM',''); 
        ITRC = ITCLOSE('PROJFUND ','');
      END; 

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT; 

 END CLOSE;


 /*----------------------------------------------------------------*/ 
 /*               GET PARAMETERS AND ASSIGN TO VARIABLES,          */ 
 /*             DETERMINE WHICH REPORT OPTIONS ARE IN PLAY         */ 
 /*----------------------------------------------------------------*/ 

 GET_PARMS: PROC;                                                               
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);                                        
                                                                                
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'GET_PARM ';                                        
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
   OPEN FILE (PARM_FILE)                                                        
        RECORD SEQUENTIAL INPUT;                                                
                                                                                
   READ FILE (PARM_FILE)                                                        
        INTO (BUFFER);                                                          
                                                                                
   DO WHILE (^EOF);                                                             
      PARM_FOUND = '1'B;                                                        
      TEMP_PARMBUF = BUFFER;                                                    
      IF WORD(TEMP_PARMBUF,1,' ') = '%LET'                                      
         THEN TEMP_PARMBUF = SUBSTR(TEMP_PARMBUF,6);                            
      KEYWORD=WORD(TEMP_PARMBUF,1,'=');                                         
      PARM=TRIM(WORD(TEMP_PARMBUF,2,'='));                                      
      SELECT;                                                                   
         WHEN (KEYWORD='ENTRY')    ENTRY=PARM;                                  
         WHEN (KEYWORD='VIEW')     VIEW=PARM;                                   
         WHEN (KEYWORD='SUMLVL')   SUMLVL=PARM;                                 
         WHEN (KEYWORD='CONTSTAT') CONTSTAT=PARM;                               
         WHEN (KEYWORD='COVER')    COVER=PARM;                                  
         WHEN (KEYWORD='COST')     COST=PARM;                                   
         WHEN (KEYWORD='ESTIMATE') ESTIMATE=PARM;                               
         WHEN (KEYWORD='FUNDING')  FUNDING=PARM;                                
         WHEN (KEYWORD='UNIT')     UNIT=PARM;                                   
         WHEN (KEYWORD='CATEGORY') CATEGORY=PARM;                               
         WHEN (KEYWORD='LASSRCE')  LASSRCE=PARM;                                
         WHEN (KEYWORD='CASSRCE')  CASSRCE=PARM;                                
         OTHERWISE;                                                             
      END;                                                                      
                                                                                
      READ FILE (PARM_FILE)                                                     
           INTO (BUFFER);                                                       
                                                                                
   END;                                                                         
                                                                                
   CLOSE FILE (PARM_FILE);                                                      
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
 END GET_PARMS;                                                                 
                                                                                
                                                                                
 /*----------------------------------------------------------------*/ 
 /*            CALLS TO GET PARTICULAR SUBSET RECORD               */ 
 /*----------------------------------------------------------------*/ 

 GET_SUBSET: PROC;                        
                                          
     DCL SAVE_SEGMENT         CHAR (31);  
                                          
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT; 
     SHELL$MODULE_SEGMENT = 'GET_SUBSET ';
                                          
       %IF DEBUGGER = 'ON'                
           %THEN %DO;                     
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;                                          
                                                          
    IF VIEW = 'PROJECTS' THEN                             
       CALL GET_SUBSET_PROJECT;                           
    ELSE                                                  
       IF VIEW = 'PRIMES' THEN                            
          CALL GET_SUBSET_PRIME;                          
       ELSE                                               
          IF VIEW = 'PROPOSALS' THEN                      
             CALL GET_SUBSET_PROPOSAL;                    
          ELSE                                            
             IF VIEW = 'LETTINGS' THEN                    
                CALL GET_SUBSET_LETTING;                  
                                                          
                                                          
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                   
                                                          
           /*-------NESTED PROCEDURES WITHIN GET_SUBSET-------*/
                
   /*----------------------------------------------------------------*/ 
   /*                      GET_SUBSET_PROJECT                        */ 
   /*----------------------------------------------------------------*/ 
        
 GET_SUBSET_PROJECT: PROC;              
                                        
     DCL SAVE_SEGMENT         CHAR (31);
                                        
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'GET_SUBSET_PROJECT ';
                                         
       %IF DEBUGGER = 'ON'               
           %THEN %DO;                    
              PUT SKIP LIST ('INSIDE PROCEDURE ', 
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;   

      SUBSET_FOUND = '1'B;
      ITRC = ITREAD ('SUBSET','','','');  
      IF ITRC = 8 THEN                    
         SUBSET_FOUND = '0'B;             
                                          
      IF SUBSET_FOUND THEN                
         DO;                              
            SUBSET_PCN  = PROJSEL_RECORD.PCN;
            CURRENT_PCN = PROJSEL_RECORD.PCN;
         END;                                
                                             
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;      
                                             
 END GET_SUBSET_PROJECT;                     
                                             
                                             
   /*----------------------------------------------------------------*/
   /*                      GET_SUBSET_PRIME                          */
   /*----------------------------------------------------------------*/
         
 GET_SUBSET_PRIME: PROC;     

     DCL SAVE_SEGMENT         CHAR (31);       

     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;    
     SHELL$MODULE_SEGMENT = 'GET_SUBSET_PRIME ';    

       %IF DEBUGGER = 'ON'          
           %THEN %DO;             
              PUT SKIP LIST ('INSIDE PROCEDURE ',    
                              TRIM(SHELL$MODULE_SEGMENT));   
           %END;     

      SUBSET_FOUND = '1'B;    
      ITRC = ITREAD ('SUBSET','','','');   
      IF ITRC = 8 THEN        
         SUBSET_FOUND = '0'B;      

      IF SUBSET_FOUND THEN       
         DO;                    
            SUBSET_PPCN  = PRIMPROJ_RECORD.PPCN; 
         END;

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;  

 END GET_SUBSET_PRIME;            


   /*----------------------------------------------------------------*/ 
   /*                      GET_SUBSET_PROPOSAL                       */ 
   /*----------------------------------------------------------------*/ 

 GET_SUBSET_PROPOSAL: PROC;

     DCL SAVE_SEGMENT         CHAR (31);

     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'GET_SUBSET_PROPOSAL '; 

       %IF DEBUGGER = 'ON'    
           %THEN %DO;     
              PUT SKIP LIST ('INSIDE PROCEDURE ', 
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;      

      SUBSET_FOUND = '1'B; 
      ITRC = ITREAD ('SUBSET','','',''); 
      IF ITRC = 8 THEN 
         SUBSET_FOUND = '0'B;
    
      IF SUBSET_FOUND THEN
         DO;  
            SUBSET_CONTID = ' ';
            SUBSET_CONTID = PROPOSAL_RECORD.CONTID; 
         END;      
     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
 END GET_SUBSET_PROPOSAL; 


   /*----------------------------------------------------------------*/
   /*                      GET_SUBSET_LETTING                        */
   /*----------------------------------------------------------------*/

 GET_SUBSET_LETTING: PROC;  

     DCL SAVE_SEGMENT         CHAR (31);   

     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;    
     SHELL$MODULE_SEGMENT = 'GET_SUBSET_LETTING ';      

       %IF DEBUGGER = 'ON'   
           %THEN %DO;         
              PUT SKIP LIST ('INSIDE PROCEDURE ',  
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;      

      SUBSET_FOUND = '1'B; 
      ITRC = ITREAD ('SUBSET','','','');    
      IF ITRC = 8 THEN                      
         SUBSET_FOUND = '0'B;               

      IF SUBSET_FOUND THEN 
         SUBSET_LCONTID = LETPROP_RECORD.LCONTID;   

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END GET_SUBSET_LETTING;

  /*----------------END NESTED PROCEDURES IN GET_SUBSET-------------*/ 

 END GET_SUBSET;   


 /*----------------------------------------------------------------*/ 
 /*                  BUILD GPDE (TEMPORARY) FILES                  */ 
 /*----------------------------------------------------------------*/

 CHECK_GPDEEST: PROC;

     DCL SAVE_SEGMENT         CHAR (31);

     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'CHECK_GPDEEST';

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ', 
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;

    DCL  ESTIMATE_FOUND          CHAR (1);

    ESTIMATE_FOUND = '1';

    ITRC = ITREAD('GPDEEST',' ','0','GE');
    IF ITRC = 8 THEN
       ESTIMATE_FOUND = '0';

    DO WHILE (ESTIMATE_FOUND = '1');                               
                                                       
       /* IF THERE ARE NO PROJECTS ASSOCIATED WITH THE ESTIMATE, */
       /* THEN DELETE THE ESTIMATE FROM THE GPDEEST FILE.        */
       /* PCGW - 01/28/93   BSR - 921201-3201 AND 921015-3201    */
                                                                  
       GPDEPROJ_KEY = GPDEEST_RECORD.ESTKEY;
       ITRC = ITREAD('GPDEPROJ',GPDEPROJ_KEY,'1','GE');

       IF (GPDEPROJ_RECORD.ESTKEY ^= GPDEEST_RECORD.ESTKEY) THEN
          DO;
             GPDEEST_KEY = GPDEEST_RECORD.ESTKEY;
             ITRC = ITDEL('GPDEEST',GPDEEST_KEY,'0','');
          END;   /* IF ESTKEY^=ESTKEY DO */

       ITRC = ITREAD('GPDEEST','','','');
       IF ITRC = 8 THEN
          ESTIMATE_FOUND = '0';
    END;   /* DO WHILE ESTIMATE_FOUND=1 */

    SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END CHECK_GPDEEST;


 /*----------------------------------------------------------------*/ 
 /*                  BUILD GPDE (TEMPORARY) FILES                  */ 
 /*----------------------------------------------------------------*/ 

 BUILD_GPDEFILES: PROC;

     DCL SAVE_SEGMENT         CHAR (31);

     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'BUILD_GPDEFILES ';

       %IF DEBUGGER = 'ON' 
           %THEN %DO; 
              PUT SKIP LIST ('INSIDE PROCEDURE ', 
                              TRIM(SHELL$MODULE_SEGMENT));
           %END; 

    DCL       CATG_BUILT                          BIT (1), 
              O_CATG_BUILT                        BIT INIT ('0'B),
              ITEM_BUILT                          BIT (1),
              GPDEPROJ_DELETED                    BIT (1) INIT ('0'B),
              DUPLICATE_FOUND                     BIT (1) INIT ('1'B),
              TERMINATE_CATG_LOOP                 BIT (1) INIT ('0'B),
              LOWCOST                             BIT (1) INIT ('0'B),
              CATG_LOWCOST_FLAG                   CHAR(1), 
              PROCESSED_PCN                       BIT INIT ('0'B);


    /* THESE ARE THE DCL'S FOR THE PERCENT_LOOKUP PROCEDURE */ 

    DCL TEMP_PERCENT                CHAR ( 6), 
        TEMP_NUM_PCT                FIXED DEC (5,2),
        TEST_STRING                 CHAR (12), 
        RESULT                      FIXED BIN (1) ; 


    IF VIEW = 'PROJECTS' &amp SUMLVL ^='PROJECT' THEN 
       DO;     

          IF FIRST_SUBSET THEN 
              DO;  

                 CALL GENERATE_PCN_LIST;  

                 CALL BUILD_GPDEEST; 

                 PLIST = PCN_LIST_TOP;  
                 DO WHILE (PLIST ^=NULL);  
                    CALL BUILD_GPDEPROJ; 
                    IF GPDEPROJ_BUILT THEN
                       DO;   
                          CALL BUILD_GPDECATG_FUND_ITEM; 
                          IF ^GPDEPROJ_DELETED THEN 
                             CALL PROCESS_ADDITEMS;  
                       END; 
                    PLIST = PLIST -&gt PCN_LIST_NODE.NEXT_PTR;
                 END;                 /* DO WHILE LIST ^NULL */ 
                 FIRST_SUBSET = '0'B; 
                 CALL FREE_PCN_LIST; 
              END;       /* IF FIRST SUBSET DO */ 

           ELSE DO; 
                  CALL DUPLICATE_ENTRY_CHECK;
                  IF (PROCESSED_PCN &amp ^DUPLICATE_FOUND) THEN; 
                      /* SKIP THIS SUBSET FILE */   
                  ELSE IF DUPLICATE_FOUND THEN   
                     CALL UPDATE_GPDEPROJ;  
                  ELSE DO; 
                          CALL GENERATE_PCN_LIST; 

                          CALL BUILD_GPDEEST;

                          PLIST = PCN_LIST_TOP;
                          DO WHILE (PLIST ^=NULL); 
                             CALL BUILD_GPDEPROJ; 
                             IF GPDEPROJ_BUILT THEN
                                DO;  
                                    CALL BUILD_GPDECATG_FUND_ITEM;
                                    IF ^GPDEPROJ_DELETED THEN 
                                       CALL PROCESS_ADDITEMS;
                                END; 
                             PLIST = PLIST -&gt PCN_LIST_NODE.NEXT_PTR;
                          END;    /* DO WHILE LIST ^NULL */
                          CALL FREE_PCN_LIST; 

                       END;     /* ELSE DO */
                END;       /* ELSE DO */ 
        END;   /* IF PROJECTS AND PROJECT  */

     ELSE 
        DO;
                 CALL GENERATE_PCN_LIST;

                 CALL BUILD_GPDEEST; 

                 PLIST = PCN_LIST_TOP;
                 DO WHILE (PLIST ^=NULL);
                    CALL BUILD_GPDEPROJ; 
                    IF GPDEPROJ_BUILT THEN
                       DO;
                          CALL BUILD_GPDECATG_FUND_ITEM;
                          IF ^GPDEPROJ_DELETED THEN
                             CALL PROCESS_ADDITEMS;
                       END;
                    PLIST = PLIST -&gt PCN_LIST_NODE.NEXT_PTR;
                 END;                /* DO WHILE LIST ^NULL */
                 CALL FREE_PCN_LIST;
        END;         /* ELSE DO */

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT; 

 /*--------------------------------------------------------------*/
 /*-----------NESTED PROCEDURES WITHIN BUILD_GPDEFILES-----------*/
 /*--------------------------------------------------------------*/



 /*----------------------------------------------------------------*/
 /*                   GENERATE PCN LIST                            */
 /*----------------------------------------------------------------*/

 GENERATE_PCN_LIST: PROC;

     DCL SAVE_SEGMENT         CHAR (31);

     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'GENERATE_PCN_LIST ';

       %IF DEBUGGER = 'ON'
           %THEN %DO;     
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END; 

    IF VIEW = 'PROJECTS' THEN 
       DO;    
          DTLFLG_VALUE = 'Y';        /* MOVED HERE */ 
          IF SUMLVL = 'PROJECT' THEN
             DO; 
                EST_KEY = PROJSEL_RECORD.PCN;
                CALL ADD_LIST_PCN(SUBSET_PCN);
             END; 
          ELSE 
             IF SUMLVL = 'PRIME' THEN 
                CALL GET_PROJECTS_IN_PRIME;
             ELSE
                IF SUMLVL = 'PROPOSAL' THEN
                   CALL GET_PROJECTS_IN_PROPOSAL;
       END;  

    IF VIEW = 'PRIMES' THEN 
       CALL GET_PRIME_PROJECTS;

    IF VIEW = 'PROPOSALS' THEN 
       CALL GET_PROPOSAL_PROJECTS;

    IF VIEW = 'LETTINGS' THEN 
       CALL GET_LETTING_CALL_PROJECTS;
                     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

        /*--------NESTED PROCEDURES IN GENERATE_PCN_LIST-------*/ 

   /*----------------------------------------------------------------*/         
   /*                        ADD LIST PCN                            */         
   /*----------------------------------------------------------------*/         
                                                                                
 ADD_LIST_PCN : PROC (LIST_PCN);                                                
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);                                        
                                                                                
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'ADD_LIST_PCN ';                                    
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
       /* THIS PROCEDURE ADDS A NODE TO BOTH THE PCN LIST                       
          FOR BUILDING THE GPDEFILES AND THE PROCESSED                          
          PCN LIST FOR DETERMINING IF PCN WAS PROCESSED                         
          ALREADY BUT POSSIBLY DELETED DURING THE BUILDING                      
          OF THE GPDEFILES.                                 */                  
                                                                                
      DCL      LIST_PCN                          CHAR (13);                     
                                                                                
      ALLOCATE PCN_LIST_NODE SET (PLIST);                                       
                                                                                
         /* ALLOCATE THE PROCESSED PCN LIST */                                  
      ALLOCATE PROCESSED_PCN_LIST_NODE SET (PROCESSED_PLIST);                   
                                                                                
      PLIST -&gt PCN_LIST_NODE.PCN      = LIST_PCN;                               
      PLIST -&gt PCN_LIST_NODE.DTLFLG   = DTLFLG_VALUE;                           
                                                                                
         /* ASSIGN THE PROCESSED LIST PCN NODE */                               
      PROCESSED_PLIST -&gt PROCESSED_PCN_LIST_NODE.PCN    = LIST_PCN;             
      PROCESSED_PLIST -&gt PROCESSED_PCN_LIST_NODE.DTLFLG = DTLFLG_VALUE;         
                                                                                
      PLIST -&gt PCN_LIST_NODE.NEXT_PTR = NULL;                                   
      PROCESSED_PLIST -&gt PROCESSED_PCN_LIST_NODE.NEXT_PTR = NULL;               
                                                                                
      IF PCN_LIST_TOP = NULL THEN                                               
         PCN_LIST_TOP = PLIST;                                                  
      ELSE PCN_LIST_END -&gt PCN_LIST_NODE.NEXT_PTR = PLIST;                      
                                                                                
                                                                                
      IF PROCESSED_PCN_LIST_TOP = NULL THEN                                     
         PROCESSED_PCN_LIST_TOP = PROCESSED_PLIST;                              
      ELSE PROCESSED_PCN_LIST_END -&gt                                            
           PROCESSED_PCN_LIST_NODE.NEXT_PTR = PROCESSED_PLIST;                  
                                                                                
      PCN_LIST_END = PLIST;                                                     
      PROCESSED_PCN_LIST_END = PROCESSED_PLIST;                                 
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
 END ADD_LIST_PCN;                                                              
                                                                                
   /*----------------------------------------------------------------*/         
   /*                     GET_PROJECTS_IN_PRIME                      */         
   /*----------------------------------------------------------------*/         
                                                                                
 GET_PROJECTS_IN_PRIME: PROC;                                                   
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);                                        
                                                                                
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'GET_PROJECTS_IN_PRIME ';                           
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
      DCL   CURRENT_PPCN                        CHAR (15) INIT (' ');           
      DCL   PRIMXWLK_FOUND                      BIT INIT ('1'B);                
                                                                                
                                                                                
      DTLFLG_VALUE = 'N';                                                       
     /*  READ THE PRIMXWLK WITH THE ALTERNATE KEY */                            
     /*  TO GET THE PRIME PROJECT NUMBER          */                            


      /*  SC - 10/04/93 - INCLUDED THE FOLLOWING LOGIC TO     */
      /*  RESOLVE THE ALTERNATE KEY READ PROBLEMS ON THE IBM  */

      %IF PREPROC$OPSYS = 'VMS'
         %THEN
            %DO;
              ITRC = 0;
              ITRC = ITREAD('PRIMXWLK', SUBSET_PCN, '1', 'GE');
              IF (ITRC = 8) THEN
                 PRIMXWLK_FOUND = '0'B;
            %END;
         %ELSE
            %DO;
              ITRC = 0;
              CALL IBM_PRIMPROC(PRIMXWLK_FOUND);
            %END;
      ITRC = ITREAD('PRIMXWLK',SUBSET_PCN,'1','');                              
      IF ITRC = 8 THEN                                                          
         PRIMXWLK_FOUND = '0'B;                                                 

      /* ADDED BY PCGW - 94-01-21 */
      IF PRIMXWLK_RECORD.PCN = SUBSET_PCN THEN
         PRIMXWLK_FOUND = '1'B;
                                                                                
      IF PRIMXWLK_FOUND THEN                                                    
         DO;                                                                    
            EST_KEY      = PRIMXWLK_RECORD.PPCN;                                
            CURRENT_PPCN = PRIMXWLK_RECORD.PPCN;                                
                                                                                
            ITRC = ITREAD('PRIMXWLK',CURRENT_PPCN,'0','GE');               
            IF ITRC = 8 THEN                                                    
               PRIMXWLK_FOUND = '0'B;                                           
                                                                                
            IF PRIMXWLK_FOUND THEN                                              
               DO WHILE (PRIMXWLK_FOUND &amp                                       
                         PRIMXWLK_RECORD.PPCN = CURRENT_PPCN);                  
                                                                                
                  CURRENT_PCN = PRIMXWLK_RECORD.PCN;                            
                  IF PRIMXWLK_RECORD.PCN = SUBSET_PCN THEN                      
                     DTLFLG_VALUE = 'Y';                                        
                                                                                
                  CALL ADD_LIST_PCN(CURRENT_PCN);                               
                                                                                
                  DTLFLG_VALUE = 'N';                                           
                                                                                
                  ITRC = ITREAD('PRIMXWLK','','','');                           
                  IF ITRC = 8 THEN                                              
                     PRIMXWLK_FOUND = '0'B;                                     
                                                                                
               END;  /* DO WHILE */                                             
            ELSE                                                                
               DO;                                                              
                 ERROR_TYPE = 'NO PRIME PROJECT FOUND FOR SELECTED'||
                               'PROJECT'|| SUBSET_PCN;                          
                 CALL BUILD_ERROR_LOG(ERROR_TYPE);                              
               END;                                                             
         END;                                                                   
                                                                                
     ELSE                                                                       
         DO;                                                                    
            ERROR_TYPE = 'NO PRIME PROJECT FOUND FOR SELECTED'||                
                         'PROJECT'|| SUBSET_PCN;                                
            CALL BUILD_ERROR_LOG(ERROR_TYPE);                                   
         END;                                                                   
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
 END GET_PROJECTS_IN_PRIME;                                                     
                                                                                
  


   /*----------------------------------------------------------------*/
   /* IBM_PRIMPROC: THIS ROUTINE SEQUENTIALLY READS THE PRIMXWALK    */
   /* TABLE UNTIL THE SUBSET_PCN MATCHES THE RECORD PCN AND USES     */
   /* THE PPCN OF THAT RECORD AS THE PRIME PROJECT NUMBER.           */
   /*----------------------------------------------------------------*/

    IBM_PRIMPROC: PROC(PRIMXWLK_FOUND);

      DCL PRIMXWLK_FOUND             BIT (1);
      DCL PRIMPROJ_FOUND             BIT (1) INIT('0'B);

      ITRC = 0;
      /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
      ITRC = ITREAD ('PRIMXWLK', '', '0', 'GE');

      DO WHILE (ITRC = 0 &amp ^PRIMPROJ_FOUND);
         
         IF (PRIMXWLK_RECORD.PCN = SUBSET_PCN) THEN
           DO;
           
             PRIMPROJ_FOUND = '1'B;
             PRIMXWLK_FOUND = '1'B;

           END;
     
         ELSE

            ITRC = ITREAD ('PRIMXWLK', '', '', '');
      
      END;

      IF (^PRIMPROJ_FOUND) THEN

         PRIMXWLK_FOUND = '0'B;
    
    END IBM_PRIMPROC;
                                                                       
   /*----------------------------------------------------------------*/         
   /*                     GET_PRIME_PROJECTS                         */         
   /*----------------------------------------------------------------*/         
                                                                                
 GET_PRIME_PROJECTS: PROC;                                                      
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);                                        
                                                                                
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'GET_PRIME_PROJECTS ';                              
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
      DCL   CURRENT_PPCN                        CHAR (15) INIT (' ');           
      DCL   PRIMXWLK_FOUND                      BIT INIT ('1'B);                
                                                                                
                                                                                
            PRIMXWLK_FOUND = '1'B;                                              
            /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
            ITRC = ITREAD('PRIMXWLK',SUBSET_PPCN,'0','GE');
            IF ITRC = 8 THEN                                                    
               PRIMXWLK_FOUND = '0'B;                                           
                                                                                
            IF PRIMXWLK_FOUND THEN                                              
               DO;                                                              
                  DTLFLG_VALUE = 'Y';                                           
                  CURRENT_PPCN = SUBSET_PPCN;                                   
                  EST_KEY      = PRIMXWLK_RECORD.PPCN;                          
                  DO WHILE (PRIMXWLK_FOUND &amp                                    
                            PRIMXWLK_RECORD.PPCN = CURRENT_PPCN);               
                                                                                
                      CURRENT_PCN = PRIMXWLK_RECORD.PCN;                        
                      CALL ADD_LIST_PCN(CURRENT_PCN);                           
                                                                                
                      ITRC = ITREAD('PRIMXWLK','','','');                       
                      IF ITRC = 8 THEN                                          
                         PRIMXWLK_FOUND = '0'B;                                 
                                                                                
                  END;  /* DO WHILE */                                          
                  DTLFLG_VALUE = 'N';                                           
               END;                                                             
            ELSE                                                                
               DO;                                                              
                  ERROR_TYPE =  'NO PROJECTS FOR SELECTED PRIME'||              
                                ' PROJECT'|| CURRENT_PPCN;                      
                  CALL BUILD_ERROR_LOG(ERROR_TYPE);                             
               END;    /* ELSE DO */                                            
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
 END GET_PRIME_PROJECTS;                                                        
                                                                                
                                                                                
   /*----------------------------------------------------------------*/         
   /*                   GET_PROJECTS_IN_PROPOSAL                     */         
   /*----------------------------------------------------------------*/         
                                                                                
 GET_PROJECTS_IN_PROPOSAL: PROC;                                                
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);                                        
                                                                                
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'GET_PROJECTS_IN_PROPOSAL ';                        
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
                                                                                
      DTLFLG_VALUE = 'N';                                                       
                                                                                
      /* READ PROPPROJ WITH ALTERNATE TO GET PROPOSAL CONTID */                 
      PROPPROJ_FOUND = '1'B;                                                    
      ITRC = ITREAD('PROPPROJ',SUBSET_PCN,'1','');                              
      IF ITRC = 8 THEN                                                          
         PROPPROJ_FOUND = '0'B;                                                 
                                                                                
      IF  PROPPROJ_FOUND THEN                                                   
          DO;                                                                   
             EST_KEY        = PROPPROJ_RECORD.CONTID;                           
             CURRENT_CONTID = PROPPROJ_RECORD.CONTID;                           
                                                                                
             ITRC = ITREAD('PROPPROJ',CURRENT_CONTID,'0','GE');
             IF ITRC = 8 THEN                                                   
                PROPPROJ_FOUND = '0'B;                                          
                                                                                
             IF PROPPROJ_FOUND THEN                                             
                DO WHILE (PROPPROJ_FOUND &amp PROPPROJ_RECORD.CONTID =             
                          CURRENT_CONTID);                                      
                                                                                
                   CURRENT_PCN = PROPPROJ_RECORD.PCN;                           
                                                                                
                   IF PROPPROJ_RECORD.PCN = SUBSET_PCN THEN                     
                      DTLFLG_VALUE = 'Y';                                       
                                                                                
                   CALL ADD_LIST_PCN(CURRENT_PCN);                              
                                                                                
                   DTLFLG_VALUE = 'N';                                          
                                                                                
                   ITRC = ITREAD('PROPPROJ','','','');                          
                   IF ITRC = 8 THEN                                             
                      PROPPROJ_FOUND = '0'B;                                    
                                                                                
                END;                                                            
             ELSE                                                               
                DO;                                                             
                   ERROR_TYPE =  'NO PROPOSAL RECORD FOUND FOR ' ||             
                                 ' SELECTED PROJECT'|| SUBSET_PCN;              
                   CALL BUILD_ERROR_LOG(ERROR_TYPE);                            
                END;                                                            
          END;                                                                  
      ELSE                                                                      
          DO;                                                                   
             ERROR_TYPE =  'NO PROPOSAL RECORD FOUND FOR SELECTED'||            
                           ' PROJECT'|| SUBSET_PCN;                             
             CALL BUILD_ERROR_LOG(ERROR_TYPE);                                  
          END;                                                                  
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
 END GET_PROJECTS_IN_PROPOSAL;                                                  


   /*----------------------------------------------------------------*/
   /*                   GET_PROPOSAL_PROJECTS                        */
   /*----------------------------------------------------------------*/

 GET_PROPOSAL_PROJECTS: PROC;     

     DCL SAVE_SEGMENT         CHAR (31);                                        

     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'GET_PROPOSAL_PROJECTS '; 

       %IF DEBUGGER = 'ON'
           %THEN %DO;  
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT)); 
           %END; 


      CURRENT_CONTID = PROPOSAL_RECORD.CONTID;
      PROPPROJ_FOUND = '1'B; 
      /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
      ITRC = ITREAD('PROPPROJ',CURRENT_CONTID,'0','GE'); 
      IF ITRC = 8 THEN  
         PROPPROJ_FOUND = '0'B;  

      DTLFLG_VALUE = 'Y';

      IF  PROPPROJ_FOUND THEN
          DO;                
             EST_KEY     = PROPPROJ_RECORD.CONTID;   
             DO WHILE (PROPPROJ_FOUND &amp
                       PROPPROJ_RECORD.CONTID = CURRENT_CONTID);

                CURRENT_PCN = PROPPROJ_RECORD.PCN;

                CALL ADD_LIST_PCN(CURRENT_PCN);   

                ITRC = ITREAD('PROPPROJ','','','');
                IF ITRC = 8 THEN
                   PROPPROJ_FOUND = '0'B;
             END;
          END;   
      ELSE       
          DO;    
             ERROR_TYPE =  'NO PROPOSAL RECORD FOUND FOR SELECTED'||
                           ' PROPOSAL'|| CURRENT_CONTID;            
             CALL BUILD_ERROR_LOG(ERROR_TYPE);                      
          END; 
               
      DTLFLG_VALUE = 'N'; 
                          
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
                                        
 END GET_PROPOSAL_PROJECTS;             


   /*----------------------------------------------------------------*/ 
   /*                GET_LETTING_CALL_PROJECTS                       */ 
   /*----------------------------------------------------------------*/ 

 GET_LETTING_CALL_PROJECTS: PROC;                                               
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);                                        
                                                                                
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'GET_LETTING_CALL_PROJECTS ';                       
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
                                                                                
      CURRENT_CONTID = LETPROP_RECORD.LCONTID;                                  
      PROPPROJ_FOUND = '1'B;                                                    
      /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
      /* THIS ONE CAUSED LETTING/CALL PROBLEM IN FINAL*/
      ITRC = ITREAD('PROPPROJ',CURRENT_CONTID,'0','GE');
      IF ITRC = 8 THEN                                                          
         PROPPROJ_FOUND = '0'B;                                                 
                                                                                
                                                                                
      IF PROPPROJ_FOUND THEN                                                    
         DO;                                                                    
            EST_KEY     = LETPROP_RECORD.LCONTID;                               
            DO WHILE (PROPPROJ_FOUND &amp                                          
                      PROPPROJ_RECORD.CONTID = CURRENT_CONTID);                 
                                                                                
                CURRENT_PCN = PROPPROJ_RECORD.PCN;                              
                                                                                
                DTLFLG_VALUE = 'Y';                                             
                                                                                
                CALL ADD_LIST_PCN(CURRENT_PCN);                                 
                                                                                
                ITRC = ITREAD('PROPPROJ','','','');                             
                IF ITRC = 8 THEN                                                
                   PROPPROJ_FOUND = '0'B;                                       
                                                                                
            END;                                                                
         END;                                                                   
      ELSE DO;                                                                  
              ERROR_TYPE =  'NO LETTING/CALL PROPOSAL RECORD FOUND'||           
                            'FOR SELECTED LETTING /CALL CONTID '   ||           
                             CURRENT_CONTID;                                    
              CALL BUILD_ERROR_LOG(ERROR_TYPE);                                 
           END;                                                                 
                                                                                
      DTLFLG_VALUE = 'N';                                                       
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
 END GET_LETTING_CALL_PROJECTS;                                                 
                                                                                
   /*------------END NESTED PROCEDURES IN GENERATE_PCN_LIST--------*/           
                                                                                
 END GENERATE_PCN_LIST;

  /*------------------------------------------------------------*/              
  /*                        BUILD GPDEEST                       */              
  /*------------------------------------------------------------*/              
                                                                                
  BUILD_GPDEEST : PROC;
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);
                                        
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'BUILD_GPDEEST ';

       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
     DCL   PROJ_KEY                  CHAR (15);                                 
                                                                                
     IF SUMLVL = 'PROJECT' THEN                                                 
        CALL BUILD_PROJECT_GPDEEST;                                             
     ELSE IF SUMLVL = 'PRIME' THEN                                              
        CALL BUILD_PRIMPROJ_GPDEEST;                                            
     ELSE IF SUMLVL = 'PROPOSAL' THEN                                           
        CALL BUILD_PROPOSAL_GPDEEST;                                            
                                                                                
                                                                                
      /*----- NESTED PROCEDURES WITHIN BUILD_GPDEEST -----*/                    
                                                                                
      BUILD_PROJECT_GPDEEST : PROC;                                             

        SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
        SHELL$MODULE_SEGMENT = 'BUILD_PRIMPROJ_GPDEEST ';

          %IF DEBUGGER = 'ON'
              %THEN %DO; 
                 PUT SKIP LIST ('INSIDE PROCEDURE ',
                                 TRIM(SHELL$MODULE_SEGMENT)); 
              %END; 
                                                                                
           PROJ_KEY = EST_KEY;   
           PROJECT_FOUND = '1'B; 
           /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
           ITRC = ITREAD ('PROJECT',PROJ_KEY,'0','');
           IF ITRC = 8 THEN
              PROJECT_FOUND = '0'B; 


           IF PROJECT_FOUND THEN      
              DO;   
                 GPDEEST_RECORD.ESTKEY   = EST_KEY;  
                 /* added cntlgr assignment below for P-30 9/21/95 lkf*/
                 GPDEEST_RECORD.CNTLGR   = PROJECT_RECORD.CNTLGR;
                 GPDEEST_RECORD.SUMLVL   = SUMLVL; 

                 /* changed gpdeest_record.pproadnm assignment */
                 /* from project_record.pdescr to */
                 /* project_record.proadnm BSR 950113 11/27/95 lkf*/
                 GPDEEST_RECORD.PPROADNM = PROJECT_RECORD.PROADNM; 
                 GPDEEST_RECORD.PPROJNUM = PROJECT_RECORD.PJPRJNUM;
                 GPDEEST_RECORD.PPLOC1   = PROJECT_RECORD.PLOCAT1; 
                 GPDEEST_RECORD.PPLOC2   = PROJECT_RECORD.PLOCAT2; 

             /* PRIMPROJ FIELDS OF GPDEEST WILL BE SET TO BLANK */  
                 GPDEEST_RECORD.FEDAPC1  = ' ';  
                 GPDEEST_RECORD.FEDAPC2  = ' ';
                 GPDEEST_RECORD.FEDAPC3  = ' ';
                 GPDEEST_RECORD.PPSST1   = ' ';
                 GPDEEST_RECORD.PPSST2   = ' ';
                 GPDEEST_RECORD.PPSST3   = ' ';
                 GPDEEST_RECORD.PPSST4   = ' ';
                 GPDEEST_RECORD.PPSST5   = ' ';
                 GPDEEST_RECORD.PPSST6   = ' ';
                 GPDEEST_RECORD.PPSST7   = ' ';
                 GPDEEST_RECORD.PPSST8   = ' ';
                 GPDEEST_RECORD.PPSST9   = ' ';
                 GPDEEST_RECORD.PPSST10  = ' ';
                 GPDEEST_RECORD.PPLST1   = ' ';
                 GPDEEST_RECORD.PPLST2   = ' ';
                 GPDEEST_RECORD.PPNUM1   = ' ';
                 GPDEEST_RECORD.PPNUM2   = ' ';
                 GPDEEST_RECORD.PPNUM3   = ' ';
                 GPDEEST_RECORD.PPNUM4   = ' ';
                 GPDEEST_RECORD.PPDT1    = ' ';
                 GPDEEST_RECORD.PPDT2    = ' ';
                 GPDEEST_RECORD.PPDT3    = ' ';
                 GPDEEST_RECORD.PPDT4    = ' ';
                 GPDEEST_RECORD.PPDT5    = ' ';
                 GPDEEST_RECORD.PPCDE1   = ' ';
                 GPDEEST_RECORD.PPCDE2   = ' ';
                 GPDEEST_RECORD.PPCDE3   = ' ';
                 GPDEEST_RECORD.PPFLG1   = ' ';
                 GPDEEST_RECORD.PPFLG2   = ' ';
                 GPDEEST_RECORD.PPFLG3   = ' ';
                 GPDEEST_RECORD.PPFLG4   = ' ';
                 GPDEEST_RECORD.PPFLG5   = ' ';

             /*        END PRIMPROJ FIELDS OF GPDEEST         */    
                                                                                
                                                                                
                                                                                
             /* PROPOSAL FIELDS OF GPDEEST WILL BE SET TO BLANK */              
                 GPDEEST_RECORD.CNTLPCN  =  ' ';                                
                 GPDEEST_RECORD.PREVLET  =  ' ';                                
                 GPDEEST_RECORD.CONTTYPE =  ' ';                                
                 GPDEEST_RECORD.CSPECYR  =  ' ';                                
                 GPDEEST_RECORD.CSUPPYR  =  ' ';                                
                 GPDEEST_RECORD.CFACSSUP =  ' ';                                
                 GPDEEST_RECORD.CCNTY1   =  ' ';                                
                 GPDEEST_RECORD.CCNTY2   =  ' ';                                
                 GPDEEST_RECORD.CCNTY3   =  ' ';                                
                 GPDEEST_RECORD.CCNTY4   =  ' ';                                
                 GPDEEST_RECORD.PRALT1   =  ' ';                                
                 GPDEEST_RECORD.PRALT2   =  ' ';                                
                 GPDEEST_RECORD.CDBEGOAL =  ' ';                                
                 GPDEEST_RECORD.CWBEGOAL =  ' ';                                
                 GPDEEST_RECORD.DBENOTE  =  ' ';                                
                 GPDEEST_RECORD.SETASIDE =  ' ';                                
                 GPDEEST_RECORD.PROPTYPE =  ' ';                                
                 GPDEEST_RECORD.PROPWORK =  ' ';                                
                 GPDEEST_RECORD.CROADSYS =  ' ';                                
                 GPDEEST_RECORD.CFUNDTYP =  ' ';                                
                 GPDEEST_RECORD.CGARNTY  =  ' ';                                
                 GPDEEST_RECORD.PRROUTE  =  ' ';                                
                 GPDEEST_RECORD.PRHWYTYP =  ' ';                                
                 GPDEEST_RECORD.PRHWYNUM =  ' ';                                
                 GPDEEST_RECORD.PRWKTP1  =  ' ';                                
                 GPDEEST_RECORD.PRWKTP2  =  ' ';                                
                 GPDEEST_RECORD.PRWKTP3  =  ' ';                                
                 GPDEEST_RECORD.CCSTPROP =  ' ';                                
                 GPDEEST_RECORD.CCSTPLAN =  ' ';                                
                 GPDEEST_RECORD.CCSTPLNX =  ' ';                                
                 GPDEEST_RECORD.CCSTSHT  =  ' ';                                
                 GPDEEST_RECORD.CSPFLAG  =  ' ';                                
                 GPDEEST_RECORD.CSECTFLG =  ' ';                                
                 GPDEEST_RECORD.CNUMADD  =  ' ';                                
                 GPDEEST_RECORD.CNUMDESC =  ' ';                                
                 GPDEEST_RECORD.PRSST1   =  ' ';                                
                 GPDEEST_RECORD.PRSST2   =  ' ';                                
                 GPDEEST_RECORD.PRSST3   =  ' ';                                
                 GPDEEST_RECORD.PRSST4   =  ' ';                                
                 GPDEEST_RECORD.PRSST5   =  ' ';                                
                 GPDEEST_RECORD.PRLST1   =  ' ';                                
                 GPDEEST_RECORD.PRNUM1   =  ' ';                                
                 GPDEEST_RECORD.PRNUM2   =  ' ';                                
                 GPDEEST_RECORD.PRNUM3   =  ' ';                                
                 GPDEEST_RECORD.PRQTY1   =  ' ';                                
                 GPDEEST_RECORD.PRQTY2   =  ' ';                                
                 GPDEEST_RECORD.PRDT1    =  ' ';                                
                 GPDEEST_RECORD.PRDT2    =  ' ';                                
                 GPDEEST_RECORD.PRDT3    =  ' ';                                
                 GPDEEST_RECORD.PRDT4    =  ' ';                                
                 GPDEEST_RECORD.PRDT5    =  ' ';                                
                 GPDEEST_RECORD.PRCDE1   =  ' ';                                
                 GPDEEST_RECORD.PRCDE2   =  ' ';                                
                 GPDEEST_RECORD.PRCDE3   =  ' ';                                
                 GPDEEST_RECORD.PRFLG1   =  ' ';                                
                 GPDEEST_RECORD.PRFLG2   =  ' ';                                
                 GPDEEST_RECORD.PRFLG3   =  ' ';                                
                 GPDEEST_RECORD.PRFLG4   =  ' ';                                
                 GPDEEST_RECORD.PRFLG5   =  ' ';                                
             /*      END PROPOSAL FIELDS OF GPDEEST      */                     
                                                                                
                 GPDEEST_RECORD.ECSTTOT       = '000000000.00';                 
                 GPDEEST_RECORD.EECTOT        = '000000000.00';                 
                 GPDEEST_RECORD.EAMTTOT       = '000000000.00';                 
                 GPDEEST_RECORD.EFNDTOT       = '000000000.00';                 
                 GPDEEST_RECORD.EPRJLNML      = '00000.0000';                   
                 GPDEEST_RECORD.EBDLENFT      = '00000.0000';                   
                 GPDEEST_RECORD.ERDLENML      = '00000.0000';                   
                 GPDEEST_RECORD.EADJTOT       = '000000000.00';                 
                 ITRC = ITWRITE ('GPDEEST','');                                 
                                                                                
              END;                                                              
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
      END BUILD_PROJECT_GPDEEST;                                                
      /*--------------------------------------------------*/                    
                                                                                
      BUILD_PRIMPROJ_GPDEEST : PROC;                                            
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);                                        
                                                                                
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'BUILD_PRIMPROJ_GPDEEST ';

       %IF DEBUGGER = 'ON'
           %THEN %DO; 
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT)); 
           %END; 

           PRIMPROJ_FOUND = '1'B;                                               
           IF (VIEW = 'PROJECTS') THEN                                          
              DO;                                                               
                 PRIMPROJ_KEY = EST_KEY;                                        
                 /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
                 ITRC = ITREAD ('PRIMPROJ',PRIMPROJ_KEY,'0','');
                 IF ITRC = 8 THEN                                               
                    PRIMPROJ_FOUND = '0'B;                                      
              END;    /* IF */                                                  
                                                                                
           IF PRIMPROJ_FOUND THEN                                               
              DO;                                                               
                 GPDEEST_RECORD.ESTKEY   = EST_KEY;                             

                 /* added cntlgr assignment below for P-30 9/21/95 lkf*/
                 GPDEEST_RECORD.CNTLGR   = PRIMPROJ_RECORD.CNTLGR;
                 GPDEEST_RECORD.SUMLVL   = SUMLVL;                              
                                                                                
                 GPDEEST_RECORD.PPROADNM = PRIMPROJ_RECORD.PPROADNM;            
                 GPDEEST_RECORD.PPROJNUM = PRIMPROJ_RECORD.PPROJNUM;            
                 GPDEEST_RECORD.PPLOC1   = PRIMPROJ_RECORD.PPLOC1;              
                 GPDEEST_RECORD.PPLOC2   = PRIMPROJ_RECORD.PPLOC2;              
                                                                                
                 GPDEEST_RECORD.FEDAPC1  = PRIMPROJ_RECORD.FEDAPC1;             
                 GPDEEST_RECORD.FEDAPC2  = PRIMPROJ_RECORD.FEDAPC2;             
                 GPDEEST_RECORD.FEDAPC3  = PRIMPROJ_RECORD.FEDAPC3;             
                 GPDEEST_RECORD.PPSST1   = PRIMPROJ_RECORD.PPSST1 ;             
                 GPDEEST_RECORD.PPSST2   = PRIMPROJ_RECORD.PPSST2 ;             
                 GPDEEST_RECORD.PPSST3   = PRIMPROJ_RECORD.PPSST3 ;             
                 GPDEEST_RECORD.PPSST4   = PRIMPROJ_RECORD.PPSST4 ;             
                 GPDEEST_RECORD.PPSST5   = PRIMPROJ_RECORD.PPSST5 ;             
                 GPDEEST_RECORD.PPSST6   = PRIMPROJ_RECORD.PPSST6 ;             
                 GPDEEST_RECORD.PPSST7   = PRIMPROJ_RECORD.PPSST7 ;             
                 GPDEEST_RECORD.PPSST8   = PRIMPROJ_RECORD.PPSST8 ;             
                 GPDEEST_RECORD.PPSST9   = PRIMPROJ_RECORD.PPSST9 ;             
                 GPDEEST_RECORD.PPSST10  = PRIMPROJ_RECORD.PPSST10;             
                 GPDEEST_RECORD.PPLST1   = PRIMPROJ_RECORD.PPLST1 ;             
                 GPDEEST_RECORD.PPLST2   = PRIMPROJ_RECORD.PPLST2 ;             
                 GPDEEST_RECORD.PPNUM1   = PRIMPROJ_RECORD.PPNUM1 ;             
                 GPDEEST_RECORD.PPNUM2   = PRIMPROJ_RECORD.PPNUM2 ;             
                 GPDEEST_RECORD.PPNUM3   = PRIMPROJ_RECORD.PPNUM3 ;             
                 GPDEEST_RECORD.PPNUM4   = PRIMPROJ_RECORD.PPNUM4 ;             
                 GPDEEST_RECORD.PPDT1    = PRIMPROJ_RECORD.PPDT1  ;             
                 GPDEEST_RECORD.PPDT2    = PRIMPROJ_RECORD.PPDT2  ;             
                 GPDEEST_RECORD.PPDT3    = PRIMPROJ_RECORD.PPDT3  ;             
                 GPDEEST_RECORD.PPDT4    = PRIMPROJ_RECORD.PPDT4  ;             
                 GPDEEST_RECORD.PPDT5    = PRIMPROJ_RECORD.PPDT5  ;             
                 GPDEEST_RECORD.PPCDE1   = PRIMPROJ_RECORD.PPCDE1 ;             
                 GPDEEST_RECORD.PPCDE2   = PRIMPROJ_RECORD.PPCDE2 ;             
                 GPDEEST_RECORD.PPCDE3   = PRIMPROJ_RECORD.PPCDE3 ;             
                 GPDEEST_RECORD.PPFLG1   = PRIMPROJ_RECORD.PPFLG1 ;             
                 GPDEEST_RECORD.PPFLG2   = PRIMPROJ_RECORD.PPFLG2 ;             
                 GPDEEST_RECORD.PPFLG3   = PRIMPROJ_RECORD.PPFLG3 ;             
                 GPDEEST_RECORD.PPFLG4   = PRIMPROJ_RECORD.PPFLG4 ;             
                 GPDEEST_RECORD.PPFLG5   = PRIMPROJ_RECORD.PPFLG5 ;             
                                                                                
                                                                                
             /* PROPOSAL FIELDS OF GPDEEST WILL BE SET TO BLANK */              
                 GPDEEST_RECORD.CNTLPCN  =  ' ';                                
                 GPDEEST_RECORD.PREVLET  =  ' ';                                
                 GPDEEST_RECORD.CONTTYPE =  ' ';                                
                 GPDEEST_RECORD.CSPECYR  =  ' ';                                
                 GPDEEST_RECORD.CSUPPYR  =  ' ';                                
                 GPDEEST_RECORD.CFACSSUP =  ' ';                                
                 GPDEEST_RECORD.CCNTY1   =  ' ';                                
                 GPDEEST_RECORD.CCNTY2   =  ' ';                                
                 GPDEEST_RECORD.CCNTY3   =  ' ';                                
                 GPDEEST_RECORD.CCNTY4   =  ' ';                                
                 GPDEEST_RECORD.PRALT1   =  ' ';                                
                 GPDEEST_RECORD.PRALT2   =  ' ';                                
                 GPDEEST_RECORD.CDBEGOAL =  ' ';                                
                 GPDEEST_RECORD.CWBEGOAL =  ' ';                                
                 GPDEEST_RECORD.DBENOTE  =  ' ';                                
                 GPDEEST_RECORD.SETASIDE =  ' ';                                
                 GPDEEST_RECORD.PROPTYPE =  ' ';                                
                 GPDEEST_RECORD.PROPWORK =  ' ';                                
                 GPDEEST_RECORD.CROADSYS =  ' ';                                
                 GPDEEST_RECORD.CFUNDTYP =  ' ';                                
                 GPDEEST_RECORD.CGARNTY  =  ' ';                                
                 GPDEEST_RECORD.PRROUTE  =  ' ';                                
                 GPDEEST_RECORD.PRHWYTYP =  ' ';                                
                 GPDEEST_RECORD.PRHWYNUM =  ' ';                                
                 GPDEEST_RECORD.PRWKTP1  =  ' ';                                
                 GPDEEST_RECORD.PRWKTP2  =  ' ';                                
                 GPDEEST_RECORD.PRWKTP3  =  ' ';                                
                 GPDEEST_RECORD.CCSTPROP =  ' ';                                
                 GPDEEST_RECORD.CCSTPLAN =  ' ';                                
                 GPDEEST_RECORD.CCSTPLNX =  ' ';                                
                 GPDEEST_RECORD.CCSTSHT  =  ' ';                                
                 GPDEEST_RECORD.CSPFLAG  =  ' ';                                
                 GPDEEST_RECORD.CSECTFLG =  ' ';                                
                 GPDEEST_RECORD.CNUMADD  =  ' ';                                
                 GPDEEST_RECORD.CNUMDESC =  ' ';                                
                 GPDEEST_RECORD.PRSST1   =  ' ';                                
                 GPDEEST_RECORD.PRSST2   =  ' ';                                
                 GPDEEST_RECORD.PRSST3   =  ' ';                                
                 GPDEEST_RECORD.PRSST4   =  ' ';                                
                 GPDEEST_RECORD.PRSST5   =  ' ';                                
                 GPDEEST_RECORD.PRLST1   =  ' ';                                
                 GPDEEST_RECORD.PRNUM1   =  ' ';                                
                 GPDEEST_RECORD.PRNUM2   =  ' ';                                
                 GPDEEST_RECORD.PRNUM3   =  ' ';                                
                 GPDEEST_RECORD.PRQTY1   =  ' ';                                
                 GPDEEST_RECORD.PRQTY2   =  ' ';                                
                 GPDEEST_RECORD.PRDT1    =  ' ';                                
                 GPDEEST_RECORD.PRDT2    =  ' ';                                
                 GPDEEST_RECORD.PRDT3    =  ' ';                                
                 GPDEEST_RECORD.PRDT4    =  ' ';                                
                 GPDEEST_RECORD.PRDT5    =  ' ';                                
                 GPDEEST_RECORD.PRCDE1   =  ' ';                                
                 GPDEEST_RECORD.PRCDE2   =  ' ';                                
                 GPDEEST_RECORD.PRCDE3   =  ' ';                                
                 GPDEEST_RECORD.PRFLG1   =  ' ';                                
                 GPDEEST_RECORD.PRFLG2   =  ' ';                                
                 GPDEEST_RECORD.PRFLG3   =  ' ';                                
                 GPDEEST_RECORD.PRFLG4   =  ' ';                                
                 GPDEEST_RECORD.PRFLG5   =  ' ';                                
             /*       END PROPOSAL FIELDS OF GPDEEST      */                    
                                                                                
                                                                                
                                                                                
                 GPDEEST_RECORD.ECSTTOT       = '000000000.00';                 
                 GPDEEST_RECORD.EECTOT        = '000000000.00';                 
                 GPDEEST_RECORD.EAMTTOT       = '000000000.00';                 
                 GPDEEST_RECORD.EFNDTOT       = '000000000.00';                 
                 GPDEEST_RECORD.EPRJLNML      = '00000.0000';                   
                 GPDEEST_RECORD.EBDLENFT      = '00000.0000';                   
                 GPDEEST_RECORD.ERDLENML      = '00000.0000';                   
                 GPDEEST_RECORD.EADJTOT       = '000000000.00';                 
                 ITRC = ITWRITE ('GPDEEST','');                                 
                                                                                
              END;                                                              
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
                                                                                
      END BUILD_PRIMPROJ_GPDEEST;                                               
                                                                                
      /*--------------------------------------------------*/                    
                                                                                
      BUILD_PROPOSAL_GPDEEST : PROC;                                            
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);                                        
                                                                                
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'BUILD_PROPOSAL_GPDEEST ';
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
           PROPOSAL_FOUND = '1'B;                                               
           IF (VIEW = 'PROJECTS') THEN                                          
              DO;                                                               
                 PROPOSAL_KEY = EST_KEY;                                        
                 /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
                 ITRC = ITREAD ('PROPOSAL',PROPOSAL_KEY,'0','');
                 IF ITRC = 8 THEN                                               
                    PROPOSAL_FOUND = '0'B;                                      
              END;    /* IF */                                                  
                                                                                
           IF PROPOSAL_FOUND THEN                                               
              DO;                                                               
                 GPDEEST_RECORD.ESTKEY   = EST_KEY;                             
                 GPDEEST_RECORD.SUMLVL   = SUMLVL;                              
                                                                                
                 /* added cntlgr assignment below for P-30 9/21/95 lkf*/
                 GPDEEST_RECORD.CNTLGR   = PROPOSAL_RECORD.CNTLGR;
                 GPDEEST_RECORD.PPROADNM = PROPOSAL_RECORD.CDESCR;              
                 GPDEEST_RECORD.PPROJNUM = PROPOSAL_RECORD.CPROJNUM;            
                 GPDEEST_RECORD.PPLOC1   = PROPOSAL_RECORD.CLOCAT1;             
                 GPDEEST_RECORD.PPLOC2   = PROPOSAL_RECORD.CLOCAT2;             
                                                                                
                                                                                
             /* PRIMPROJ FIELDS OF GPDEEST WILL BE SET TO BLANK */              
                 GPDEEST_RECORD.FEDAPC1  = ' ';                                 
                 GPDEEST_RECORD.FEDAPC2  = ' ';                                 
                 GPDEEST_RECORD.FEDAPC3  = ' ';                                 
                 GPDEEST_RECORD.PPSST1   = ' ';                                 
                 GPDEEST_RECORD.PPSST2   = ' ';                                 
                 GPDEEST_RECORD.PPSST3   = ' ';                                 
                 GPDEEST_RECORD.PPSST4   = ' ';                                 
                 GPDEEST_RECORD.PPSST5   = ' ';                                 
                 GPDEEST_RECORD.PPSST6   = ' ';                                 
                 GPDEEST_RECORD.PPSST7   = ' ';                                 
                 GPDEEST_RECORD.PPSST8   = ' ';                                 
                 GPDEEST_RECORD.PPSST9   = ' ';                                 
                 GPDEEST_RECORD.PPSST10  = ' ';                                 
                 GPDEEST_RECORD.PPLST1   = ' ';                                 
                 GPDEEST_RECORD.PPLST2   = ' ';                                 
                 GPDEEST_RECORD.PPNUM1   = ' ';                                 
                 GPDEEST_RECORD.PPNUM2   = ' ';                                 
                 GPDEEST_RECORD.PPNUM3   = ' ';                                 
                 GPDEEST_RECORD.PPNUM4   = ' ';                                 
                 GPDEEST_RECORD.PPDT1    = ' ';                                 
                 GPDEEST_RECORD.PPDT2    = ' ';                                 
                 GPDEEST_RECORD.PPDT3    = ' ';                                 
                 GPDEEST_RECORD.PPDT4    = ' ';                                 
                 GPDEEST_RECORD.PPDT5    = ' ';                                 
                 GPDEEST_RECORD.PPCDE1   = ' ';                                 
                 GPDEEST_RECORD.PPCDE2   = ' ';                                 
                 GPDEEST_RECORD.PPCDE3   = ' ';                                 
                 GPDEEST_RECORD.PPFLG1   = ' ';                                 
                 GPDEEST_RECORD.PPFLG2   = ' ';                                 
                 GPDEEST_RECORD.PPFLG3   = ' ';                                 
                 GPDEEST_RECORD.PPFLG4   = ' ';                                 
                 GPDEEST_RECORD.PPFLG5   = ' ';                                 
                                                                                
             /*        END PRIMPROJ FIELDS OF GPDEEST         */                
                                                                                
                                                                                
                 GPDEEST_RECORD.CNTLPCN  =  PROPOSAL_RECORD.CNTLPCN;            
                 GPDEEST_RECORD.PREVLET  =  PROPOSAL_RECORD.PREVLET;            
                 GPDEEST_RECORD.CONTTYPE =  PROPOSAL_RECORD.CONTTYPE;           
                 GPDEEST_RECORD.CSPECYR  =  PROPOSAL_RECORD.CSPECYR;            
                 GPDEEST_RECORD.CSUPPYR  =  PROPOSAL_RECORD.CSUPPYR;            
                 GPDEEST_RECORD.CFACSSUP =  PROPOSAL_RECORD.CFACSSUP;           
                 GPDEEST_RECORD.CCNTY1   =  PROPOSAL_RECORD.CCNTY1;             
                 GPDEEST_RECORD.CCNTY2   =  PROPOSAL_RECORD.CCNTY2;             
                 GPDEEST_RECORD.CCNTY3   =  PROPOSAL_RECORD.CCNTY3;             
                 GPDEEST_RECORD.CCNTY4   =  PROPOSAL_RECORD.CCNTY4;             
                 GPDEEST_RECORD.PRALT1   =  PROPOSAL_RECORD.PRALT1;             
                 GPDEEST_RECORD.PRALT2   =  PROPOSAL_RECORD.PRALT2;             
                 GPDEEST_RECORD.CDBEGOAL =  PROPOSAL_RECORD.CDBEGOAL;           
                 GPDEEST_RECORD.CWBEGOAL =  PROPOSAL_RECORD.CWBEGOAL;           
                 GPDEEST_RECORD.DBENOTE  =  PROPOSAL_RECORD.DBENOTE;            
                 GPDEEST_RECORD.SETASIDE =  PROPOSAL_RECORD.SETASIDE;           
                 GPDEEST_RECORD.PROPTYPE =  PROPOSAL_RECORD.PROPTYPE;           
                 GPDEEST_RECORD.PROPWORK =  PROPOSAL_RECORD.PROPWORK;           
                 GPDEEST_RECORD.CROADSYS =  PROPOSAL_RECORD.CROADSYS;           
                 GPDEEST_RECORD.CFUNDTYP =  PROPOSAL_RECORD.CFUNDTYP;           
                 GPDEEST_RECORD.CGARNTY  =  PROPOSAL_RECORD.CGARNTY;            
                 GPDEEST_RECORD.PRROUTE  =  PROPOSAL_RECORD.PRROUTE;            
                 GPDEEST_RECORD.PRHWYTYP =  PROPOSAL_RECORD.PRHWYTYP;           
                 GPDEEST_RECORD.PRHWYNUM =  PROPOSAL_RECORD.PRHWYNUM;           
                 GPDEEST_RECORD.PRWKTP1  =  PROPOSAL_RECORD.PRWKTP1;            
                 GPDEEST_RECORD.PRWKTP2  =  PROPOSAL_RECORD.PRWKTP2;            
                 GPDEEST_RECORD.PRWKTP3  =  PROPOSAL_RECORD.PRWKTP3;            
                 GPDEEST_RECORD.CCSTPROP =  PROPOSAL_RECORD.CCSTPROP;           
                 GPDEEST_RECORD.CCSTPLAN =  PROPOSAL_RECORD.CCSTPLAN;           
                 GPDEEST_RECORD.CCSTPLNX =  PROPOSAL_RECORD.CCSTPLNX;           
                 GPDEEST_RECORD.CCSTSHT  =  PROPOSAL_RECORD.CCSTSHT;            
                 GPDEEST_RECORD.CSPFLAG  =  PROPOSAL_RECORD.CSPFLAG;            
                 GPDEEST_RECORD.CSECTFLG =  PROPOSAL_RECORD.CSECTFLG;           
                 GPDEEST_RECORD.CNUMADD  =  PROPOSAL_RECORD.CNUMADD;            
                 GPDEEST_RECORD.CNUMDESC =  PROPOSAL_RECORD.CNUMDESC;           
                 GPDEEST_RECORD.PRSST1   =  PROPOSAL_RECORD.PRSST1;             
                 GPDEEST_RECORD.PRSST2   =  PROPOSAL_RECORD.PRSST2;             
                 GPDEEST_RECORD.PRSST3   =  PROPOSAL_RECORD.PRSST3;             
                 GPDEEST_RECORD.PRSST4   =  PROPOSAL_RECORD.PRSST4;             
                 GPDEEST_RECORD.PRSST5   =  PROPOSAL_RECORD.PRSST5;             
                 GPDEEST_RECORD.PRLST1   =  PROPOSAL_RECORD.PRLST1;             
                 GPDEEST_RECORD.PRNUM1   =  PROPOSAL_RECORD.PRNUM1;             
                 GPDEEST_RECORD.PRNUM2   =  PROPOSAL_RECORD.PRNUM2;             
                 GPDEEST_RECORD.PRNUM3   =  PROPOSAL_RECORD.PRNUM3;             
                 GPDEEST_RECORD.PRQTY1   =  PROPOSAL_RECORD.PRQTY1;             
                 GPDEEST_RECORD.PRQTY2   =  PROPOSAL_RECORD.PRQTY2;             
                 GPDEEST_RECORD.PRDT1    =  PROPOSAL_RECORD.PRDT1;              
                 GPDEEST_RECORD.PRDT2    =  PROPOSAL_RECORD.PRDT2;              
                 GPDEEST_RECORD.PRDT3    =  PROPOSAL_RECORD.PRDT3;              
                 GPDEEST_RECORD.PRDT4    =  PROPOSAL_RECORD.PRDT4;              
                 GPDEEST_RECORD.PRDT5    =  PROPOSAL_RECORD.PRDT5;              
                 GPDEEST_RECORD.PRCDE1   =  PROPOSAL_RECORD.PRCDE1;             
                 GPDEEST_RECORD.PRCDE2   =  PROPOSAL_RECORD.PRCDE2;             
                 GPDEEST_RECORD.PRCDE3   =  PROPOSAL_RECORD.PRCDE3;             
                 GPDEEST_RECORD.PRFLG1   =  PROPOSAL_RECORD.PRFLG1;             
                 GPDEEST_RECORD.PRFLG2   =  PROPOSAL_RECORD.PRFLG2;             
                 GPDEEST_RECORD.PRFLG3   =  PROPOSAL_RECORD.PRFLG3;             
                 GPDEEST_RECORD.PRFLG4   =  PROPOSAL_RECORD.PRFLG4;             
                 GPDEEST_RECORD.PRFLG5   =  PROPOSAL_RECORD.PRFLG5;             
                                                                                
                 /* END PROPOSAL FIELDS */                                      
                                                                                
                                                                                
                 GPDEEST_RECORD.ECSTTOT       = '000000000.00';                 
                 GPDEEST_RECORD.EECTOT        = '000000000.00';                 
                 GPDEEST_RECORD.EAMTTOT       = '000000000.00';                 
                 GPDEEST_RECORD.EFNDTOT       = '000000000.00';                 
                 GPDEEST_RECORD.EPRJLNML      = '00000.0000';                   
                 GPDEEST_RECORD.EBDLENFT      = '00000.0000';                   
                 GPDEEST_RECORD.ERDLENML      = '00000.0000';                   
                 GPDEEST_RECORD.EADJTOT       = '000000000.00';                 
                 ITRC = ITWRITE ('GPDEEST','');                                 
                                                                                
              END;                                                              
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
      END BUILD_PROPOSAL_GPDEEST;                                               
                                                                                
      /*--- END NESTED PROCEDURES WITHIN BUILD_GPDEEST ---*/                    
                                                                                
                                                                                
  END BUILD_GPDEEST;                                                            
  /*------------------------------------------------------------*/              
  /*                     CHECK LIST ENTRY                       */              
  /*------------------------------------------------------------*/              
                                                                                
 DUPLICATE_ENTRY_CHECK : PROC ;                                                 
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);                                        
                                                                                
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'DUPLICATE_ENTRY_CHEC ';                            
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
      /* THE FIRST CHECK IN THIS PROCEDURE IS TO DETERMINE                      
         IF THE PCN HAS ALREADY BEEN PROCESSED BY CHECKING                      
         THE PROCESSED_PCN_LIST.  IF THE PCN EXISTS IN THE                      
         PROCESSED_PCN_LIST THEN THE NEXT CHECK IS TO SEE                       
         IF IT IS A DUPLICATE AND NEEDS TO HAVE IT'S DTLFLG                     
         CHANGED.  IF IT IS NOT A DUPLICATE BUT HAS BEEN                        
         PROCESSED, IT IS IGNORED. IF IT IS A DUPLICATE                         
         AND HAS BEEN PROCESSED, IT'S DTLFLG VALUE SHOULD                       
         BE CHANGED.                                       */                   
                                                                                
      CALL CHECK_PROCESSED_LIST;                                                
                                                                                
      IF PROCESSED_PCN THEN                                                     
         DO;                                                                    
                                                                                
            DUPLICATE_FOUND = '1'B;                                             
                                                                                
            /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
            ITRC = ITREAD ('GPDEPROJ',CURRENT_PCN,'0','');
            IF ITRC = 8 THEN                                                    
               DUPLICATE_FOUND = '0'B;                                          
         END;                                                                   
      ELSE                                                                      
         DUPLICATE_FOUND = '0'B;                                                
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
      /* --- NESTED PROCEDURE WITHING DUPLICATE ENTRY CHECK --- */              
      CHECK_PROCESSED_LIST : PROC;                                              
                                                                                
         PROCESSED_PLIST = PROCESSED_PCN_LIST_TOP;                              
                                                                                
         DO WHILE (PROCESSED_PLIST ^=NULL &amp ^PROCESSED_PCN);                    
                                                                                
            IF PROCESSED_PLIST-&gtPROCESSED_PCN_LIST_NODE.PCN                     
                              = CURRENT_PCN THEN                                
               PROCESSED_PCN = '1'B;                                            
                                                                                
            PROCESSED_PLIST = PROCESSED_PLIST -&gt                                
                              PROCESSED_PCN_LIST_NODE.NEXT_PTR;                 
         END;                                                                   
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
      END CHECK_PROCESSED_LIST;                                                 
                                                                                
      /*-- END NESTED PROCEDURE WITHING DUPLICATE ENTRY CHECK --*/              
                                                                                
                                                                                
 END DUPLICATE_ENTRY_CHECK;                                                     
                                                                                
 /*----------------------------------------------------------------*/           
 /*                          UPDATE GPDEPROJ                       */           
 /*----------------------------------------------------------------*/           
                                                                                
 UPDATE_GPDEPROJ: PROC;                                                         
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);                                        
                                                                                
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'UPDATE_GPDEPROJ ';                                 
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
                 GPDEPROJ_KEY = GPDEPROJ_RECORD.PCN;                            
                 GPDEPROJ_RECORD.PJDTLFLG = 'Y';                                
                 ITRC = ITWRITE ('GPDEPROJ','');

 END UPDATE_GPDEPROJ;

 /*----------------------------------------------------------------*/
 /*                  BUILD GPDEPROJ TEMPORARY FILE                 */
 /*----------------------------------------------------------------*/

 BUILD_GPDEPROJ: PROC;

     DCL SAVE_SEGMENT         CHAR (31);

     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'BUILD_GPDEPROJ '; 

       %IF DEBUGGER = 'ON' 
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;

    DCL PROJ_KEY CHAR (13);

    GPDEPROJ_BUILT = '1'B;


    IF (CASSRCE = 'Y' &amp CASFILES) THEN 
       DO;
           PROJ_KEY = PLIST -&gt PCN_LIST_NODE.PCN;
           CONTPROJ_FOUND = '1'B;
           ITRC = ITREAD ('CONTPROJ',PROJ_KEY,'1','');
           IF ITRC = 8 THEN 
              CONTPROJ_FOUND = '0'B;

           IF CONTPROJ_FOUND &amp CONTPROJ_RECORD.PCN =
                               PLIST -&gt PCN_LIST_NODE.PCN THEN
              CALL BUILD_CAS_GPDEPROJ;
           ELSE DO;
                    ERROR_TYPE = ' PROJECT '||
                                   PLIST-&gtPCN_LIST_NODE.PCN   ||
                                 ' NOT FOUND IN THE CAS DATA.' ||
                                 ' PROCEEDING TO '  ||
                                 ' PES/LAS DATA.'; 
                    CALL BUILD_ERROR_LOG(ERROR_TYPE);
                    PROJ_KEY = PLIST -&gt PCN_LIST_NODE.PCN;
                    PROJECT_FOUND = '1'B;
                    /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
                    ITRC = ITREAD ('PROJECT',PROJ_KEY,'0','');
                    IF ITRC = 8 THEN
                       PROJECT_FOUND = '0'B;

                    IF PROJECT_FOUND &amp PROJECT_RECORD.PCN = 
                                       PLIST -&gt PCN_LIST_NODE.PCN THEN
                           CALL BUILD_PES_LAS_GPDEPROJ;
                    ELSE DO;
                            GPDEPROJ_BUILT = '0'B;
                            ERROR_TYPE = ' PROJECT '||
                                          PLIST-&gtPCN_LIST_NODE.PCN   ||
                                         ' NOT FOUND IN CAS DATA'||
                                         ' OR IN PES/LAS DATA.';
                                        
                            CALL BUILD_ERROR_LOG(ERROR_TYPE);
                         END; 
                END;
       END;

    ELSE DO;
             PROJ_KEY = PLIST -&gt PCN_LIST_NODE.PCN;
             PROJECT_FOUND = '1'B;
             /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
             ITRC = ITREAD ('PROJECT',PROJ_KEY,'0','');
             IF ITRC = 8 THEN
                PROJECT_FOUND = '0'B;

             IF PROJECT_FOUND &amp PROJECT_RECORD.PCN =
                                PLIST -&gt PCN_LIST_NODE.PCN THEN  
                CALL BUILD_PES_LAS_GPDEPROJ;  
             ELSE DO;  
                      GPDEPROJ_BUILT = '0'B; 
                      ERROR_TYPE = ' PROJECT '|| 
                                     PLIST-&gtPCN_LIST_NODE.PCN ||
                                   ' NOT FOUND IN THE PROJECT FILE';
                      CALL BUILD_ERROR_LOG(ERROR_TYPE); 
                  END; 
         END;

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT; 

      /*------------NESTED PROCEDURES IN BUILD_GPDEPROJ------*/

    /*---------------------------------------------------------------*/
    /*                       BUILD PES/LAS PROJECT                   */
    /*---------------------------------------------------------------*/

 BUILD_PES_LAS_GPDEPROJ: PROC;

     DCL SAVE_SEGMENT         CHAR (31);  

     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;  
     SHELL$MODULE_SEGMENT = 'BUILD_PES_LAS_GPDEPROJ '; 

       %IF DEBUGGER = 'ON' 
           %THEN %DO; 
              PUT SKIP LIST ('INSIDE PROCEDURE ', 
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;   

             GPDEPROJ_RECORD.PCN      = PROJECT_RECORD.PCN      ; 
             GPDEPROJ_RECORD.ESTKEY   = EST_KEY                 ; 
             GPDEPROJ_RECORD.CNTLGR   = PROJECT_RECORD.CNTLGR   ; 
             GPDEPROJ_RECORD.PDESCR   = PROJECT_RECORD.PDESCR   ; 
             GPDEPROJ_RECORD.PDESCR2  = PROJECT_RECORD.PDESCR2  ; 
             GPDEPROJ_RECORD.PJPRJNUM = PROJECT_RECORD.PJPRJNUM ; 
             GPDEPROJ_RECORD.PSTATUS  = PROJECT_RECORD.PSTATUS  ; 

             GPDEPROJ_RECORD.PLOCAT1  = PROJECT_RECORD.PLOCAT1  ;
             GPDEPROJ_RECORD.PLOCAT2  = PROJECT_RECORD.PLOCAT2  ;
             GPDEPROJ_RECORD.PSPECYR  = PROJECT_RECORD.PSPECYR  ;


             GPDEPROJ_RECORD.ALTPJID   = PROJECT_RECORD.ALTPJID ;
             GPDEPROJ_RECORD.PRJTYP    = PROJECT_RECORD.PRJTYP  ;
             GPDEPROJ_RECORD.PWRKTYP   = PROJECT_RECORD.PWRKTYP ;
             GPDEPROJ_RECORD.PGRADE    = PROJECT_RECORD.PGRADE  ;
             GPDEPROJ_RECORD.UR        = PROJECT_RECORD.UR      ;
             GPDEPROJ_RECORD.PSPCORID  = PROJECT_RECORD.PSPCORID;
             GPDEPROJ_RECORD.PROADSYS  = PROJECT_RECORD.PROADSYS;
             GPDEPROJ_RECORD.PSECTION  = PROJECT_RECORD.PSECTION;
             GPDEPROJ_RECORD.PROADNM   = PROJECT_RECORD.PROADNM ;
             GPDEPROJ_RECORD.PJDISTR   = PROJECT_RECORD.PJDISTR ;
             GPDEPROJ_RECORD.ROUTE     = PROJECT_RECORD.ROUTE   ;

             GPDEPROJ_RECORD.PDESBY    = PROJECT_RECORD.PDESBY  ;
             GPDEPROJ_RECORD.PESTBY    = PROJECT_RECORD.PESTBY  ;
             GPDEPROJ_RECORD.PDATEPRI  = PROJECT_RECORD.PDATEPRI;
             GPDEPROJ_RECORD.PDATEEST  = PROJECT_RECORD.PDATEEST;
             GPDEPROJ_RECORD.PREVBY    = PROJECT_RECORD.PREVBY  ;
             GPDEPROJ_RECORD.PDATEREV  = PROJECT_RECORD.PDATEREV;

             GPDEPROJ_RECORD.BTERMINI  = PROJECT_RECORD.BTERMINI;
             GPDEPROJ_RECORD.ETERMINI  = PROJECT_RECORD.ETERMINI;
             GPDEPROJ_RECORD.BSTATION  = PROJECT_RECORD.BSTATION;
             GPDEPROJ_RECORD.ESTATION  = PROJECT_RECORD.ESTATION;
             GPDEPROJ_RECORD.XCOORD    = PROJECT_RECORD.XCOORD  ;
             GPDEPROJ_RECORD.YCOORD    = PROJECT_RECORD.YCOORD  ;
             GPDEPROJ_RECORD.ASPHSTAT  = PROJECT_RECORD.ASPHSTAT;
             GPDEPROJ_RECORD.FUELSTAT  = PROJECT_RECORD.FUELSTAT;

             GPDEPROJ_RECORD.PJSST1    = PROJECT_RECORD.PJSST1  ;
             GPDEPROJ_RECORD.PJSST2    = PROJECT_RECORD.PJSST2  ;
             GPDEPROJ_RECORD.PJSST3    = PROJECT_RECORD.PJSST3  ;
             GPDEPROJ_RECORD.PJSST4    = PROJECT_RECORD.PJSST4  ;
             GPDEPROJ_RECORD.PJSST5    = PROJECT_RECORD.PJSST5  ;
             GPDEPROJ_RECORD.PJNUM1    = PROJECT_RECORD.PJNUM1  ;
             GPDEPROJ_RECORD.PJNUM2    = PROJECT_RECORD.PJNUM2  ;
             GPDEPROJ_RECORD.PJNUM3    = PROJECT_RECORD.PJNUM3  ;
             GPDEPROJ_RECORD.PJDT1     = PROJECT_RECORD.PJDT1   ;
             GPDEPROJ_RECORD.PJDT2     = PROJECT_RECORD.PJDT2   ;
             GPDEPROJ_RECORD.PJDT3     = PROJECT_RECORD.PJDT3   ;
             GPDEPROJ_RECORD.PJDT4     = PROJECT_RECORD.PJDT4   ;
             GPDEPROJ_RECORD.PJDT5     = PROJECT_RECORD.PJDT5   ;
             GPDEPROJ_RECORD.PJCDE1    = PROJECT_RECORD.PJCDE1  ;
             GPDEPROJ_RECORD.PJCDE2    = PROJECT_RECORD.PJCDE2  ;
             GPDEPROJ_RECORD.PJFLG1    = PROJECT_RECORD.PJFLG1  ;
             GPDEPROJ_RECORD.PJFLG2    = PROJECT_RECORD.PJFLG2  ;
             GPDEPROJ_RECORD.PJFLG3    = PROJECT_RECORD.PJFLG3  ;
             GPDEPROJ_RECORD.PJFLG4    = PROJECT_RECORD.PJFLG4  ;
             GPDEPROJ_RECORD.PJFLG5    = PROJECT_RECORD.PJFLG5  ;

           /*-- GPDEPROJ.PESTAMT WILL BE COMPUTED IN DCE_FUNDING  --*/
           /*-- MODULE AND WILL BE USED TO UPDATE PROJECT.PESTAMT --*/

             GPDEPROJ_RECORD.PESTAMT           =  '000000000.00';

             IF PROJECT_RECORD.PCENGPCT ^= ' '
                THEN 
                  GPDEPROJ_RECORD.PCENGPCT = PROJECT_RECORD.PCENGPCT;
                ELSE GPDEPROJ_RECORD.PCENGPCT  = '000.00'      ;

             GPDEPROJ_RECORD.PNUMPGDE          = ' '; 
             GPDEPROJ_RECORD.PJSOURCE          = 'P'; 

             GPDEPROJ_RECORD.PJDTLFLG = PLIST -&gt PCN_LIST_NODE.DTLFLG;
             GPDEPROJ_RECORD.PRJTOT            = '000000000.00';
             GPDEPROJ_RECORD.PRJCCOST          = '000000000.00';
             GPDEPROJ_RECORD.PRJECTOT          = '000000000.00';

             GPDEPROJ_RECORD.PFEDSHR           = '000000000.00';
             GPDEPROJ_RECORD.PFEDPCT           = '000.00'      ;
             GPDEPROJ_RECORD.PACTPCT           = '000.00'      ;
             GPDEPROJ_RECORD.PPARAMT           = '000000000.00';
             GPDEPROJ_RECORD.PNPARAMT          = '000000000.00';

             /*-- GET CONTID FROM PROPPROJ --*/ 

             RECORD_LOCKED = '0'B;
             ITRC = ITREAD ('PROPPROJ',
                            PLIST-&gtPCN_LIST_NODE.PCN,'1','');
             IF ITRC = 8 
                THEN GPDEPROJ_RECORD.PCONTID = ' ';
                ELSE IF ITRC = 0 
                        THEN GPDEPROJ_RECORD.PCONTID =
                                         PROPPROJ_RECORD.CONTID;

             GPDEPROJ_KEY = GPDEPROJ_RECORD.PCN; 
             ITRC = ITWRITE ('GPDEPROJ', '');  

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT; 

 END BUILD_PES_LAS_GPDEPROJ; 


    /*---------------------------------------------------------------*/ 
    /*                       BUILD CAS PROJECT                       */ 
    /*---------------------------------------------------------------*/ 

 BUILD_CAS_GPDEPROJ: PROC;

     DCL SAVE_SEGMENT         CHAR (31);  

     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'BUILD_CAS_GPDEPROJ ';

       %IF DEBUGGER = 'ON'
           %THEN %DO; 
              PUT SKIP LIST ('INSIDE PROCEDURE ', 
                              TRIM(SHELL$MODULE_SEGMENT));
           %END; 

             GPDEPROJ_RECORD.PCN      = CONTPROJ_RECORD.PCN      ;
             GPDEPROJ_RECORD.ESTKEY   = EST_KEY                  ;
             GPDEPROJ_RECORD.CNTLGR   = ' '; 
             GPDEPROJ_RECORD.PDESCR   = CONTPROJ_RECORD.CPDESC   ;
             GPDEPROJ_RECORD.PDESCR2  = CONTPROJ_RECORD.CPDESC2  ;
             GPDEPROJ_RECORD.PJPRJNUM = CONTPROJ_RECORD.CPFEDST  ;
             GPDEPROJ_RECORD.PSTATUS  = CONTPROJ_RECORD.CPSTAT   ;
             GPDEPROJ_RECORD.PLOCAT1  = CONTPROJ_RECORD.CPLOC1   ;
             GPDEPROJ_RECORD.PLOCAT2  = CONTPROJ_RECORD.CPLOC2   ;
             GPDEPROJ_RECORD.PSPECYR  = CONTPROJ_RECORD.CPSPECYR ;
             GPDEPROJ_RECORD.ALTPJID  = CONTPROJ_RECORD.CPALTPID; 
             GPDEPROJ_RECORD.PRJTYP   = CONTPROJ_RECORD.CPPRJTYP; 
             GPDEPROJ_RECORD.PWRKTYP  = CONTPROJ_RECORD.CPWRKTYP; 
             GPDEPROJ_RECORD.PGRADE   = CONTPROJ_RECORD.CPGRADE ; 
             GPDEPROJ_RECORD.UR       = CONTPROJ_RECORD.CPUR    ; 
             GPDEPROJ_RECORD.PSPCORID = CONTPROJ_RECORD.CPSECFLG; 
             GPDEPROJ_RECORD.PROADSYS = CONTPROJ_RECORD.CPROADSY; 
             GPDEPROJ_RECORD.PSECTION = CONTPROJ_RECORD.CPRDSECT; 
             GPDEPROJ_RECORD.PROADNM  = CONTPROJ_RECORD.CPROADNM; 
             GPDEPROJ_RECORD.PJDISTR  = CONTPROJ_RECORD.CPFACSDS; 
             GPDEPROJ_RECORD.ROUTE    = CONTPROJ_RECORD.CPROUTE ; 
             GPDEPROJ_RECORD.PDESBY   = ' ';
             GPDEPROJ_RECORD.PESTBY   = ' ';
             GPDEPROJ_RECORD.PDATEPRI = ' ';
             GPDEPROJ_RECORD.PDATEEST = ' ';
             GPDEPROJ_RECORD.PREVBY   = ' ';
             GPDEPROJ_RECORD.PDATEREV = ' ';
             GPDEPROJ_RECORD.XCOORD   = ' ';
             GPDEPROJ_RECORD.YCOORD   = ' ';
             GPDEPROJ_RECORD.PCONTID  = CONTPROJ_RECORD.CPPROPID;
             GPDEPROJ_RECORD.BTERMINI = CONTPROJ_RECORD.CPBTERMI;
             GPDEPROJ_RECORD.ETERMINI = CONTPROJ_RECORD.CPETERMI;
             GPDEPROJ_RECORD.BSTATION = CONTPROJ_RECORD.CPBSTAT ;
             GPDEPROJ_RECORD.ESTATION = CONTPROJ_RECORD.CPESTAT ;
             GPDEPROJ_RECORD.ASPHSTAT = CONTPROJ_RECORD.CPRES1  ;
             GPDEPROJ_RECORD.FUELSTAT = CONTPROJ_RECORD.CPRES2  ;
             GPDEPROJ_RECORD.PJSST1   = CONTPROJ_RECORD.CPSST1  ;
             GPDEPROJ_RECORD.PJSST2   = CONTPROJ_RECORD.CPSST2  ;
             GPDEPROJ_RECORD.PJSST3   = CONTPROJ_RECORD.CPSST3  ;
             GPDEPROJ_RECORD.PJSST4   = CONTPROJ_RECORD.CPSST4  ;
             GPDEPROJ_RECORD.PJSST5   = CONTPROJ_RECORD.CPSST5  ;
             GPDEPROJ_RECORD.PJNUM1   = CONTPROJ_RECORD.CPNUM1  ;
             GPDEPROJ_RECORD.PJNUM2   = CONTPROJ_RECORD.CPNUM2  ;
             GPDEPROJ_RECORD.PJNUM3   = CONTPROJ_RECORD.CPNUM3  ;
             GPDEPROJ_RECORD.PJDT1    = CONTPROJ_RECORD.CPDT1   ;
             GPDEPROJ_RECORD.PJDT2    = CONTPROJ_RECORD.CPDT2   ;
             GPDEPROJ_RECORD.PJDT3    = CONTPROJ_RECORD.CPDT3   ;
             GPDEPROJ_RECORD.PJDT4    = CONTPROJ_RECORD.CPDT4   ;
             GPDEPROJ_RECORD.PJDT5    = CONTPROJ_RECORD.CPDT5   ;
             GPDEPROJ_RECORD.PJCDE1   = CONTPROJ_RECORD.CPCDE1  ;
             GPDEPROJ_RECORD.PJCDE2   = CONTPROJ_RECORD.CPCDE2  ;
             GPDEPROJ_RECORD.PJFLG1   = CONTPROJ_RECORD.CPFLG1  ;
             GPDEPROJ_RECORD.PJFLG2   = CONTPROJ_RECORD.CPFLG2  ;
             GPDEPROJ_RECORD.PJFLG3   = CONTPROJ_RECORD.CPFLG3  ;
             GPDEPROJ_RECORD.PJFLG4   = CONTPROJ_RECORD.CPFLG4  ;
             GPDEPROJ_RECORD.PJFLG5   = CONTPROJ_RECORD.CPFLG5  ;
             GPDEPROJ_RECORD.PNUMPGDE = ' ';

             GPDEPROJ_RECORD.PJDTLFLG  = PLIST -&gt PCN_LIST_NODE.DTLFLG;
             GPDEPROJ_RECORD.PJSOURCE  = 'C';
             GPDEPROJ_RECORD.PJADJTOT  = '000000000.00'; 

             GPDEPROJ_RECORD.PESTAMT   = CONTPROJ_RECORD.CPCURAMT;

             IF CONTPROJ_RECORD.CPENGPCT ^= ' ' 
                THEN 
                  GPDEPROJ_RECORD.PCENGPCT = CONTPROJ_RECORD.CPENGPCT; 
                ELSE GPDEPROJ_RECORD.PCENGPCT = '000.00';

             GPDEPROJ_RECORD.PRJTOT     = '000000000.00'; 
             GPDEPROJ_RECORD.PRJCCOST   = '000000000.00';
             GPDEPROJ_RECORD.PRJECTOT   = '000000000.00';

             GPDEPROJ_RECORD.PFEDSHR    = '000000000.00';
             GPDEPROJ_RECORD.PFEDPCT    = '000.00';
             GPDEPROJ_RECORD.PACTPCT    = '000.00';
             GPDEPROJ_RECORD.PPARAMT    = '000000000.00';
             GPDEPROJ_RECORD.PNPARAMT   = '000000000.00';
             GPDEPROJ_RECORD.PCONTID    = CONTPROJ_RECORD.CONTID;
                                                       /* CPPROPID? */ 
             GPDEPROJ_KEY = GPDEPROJ_RECORD.PCN; 
             ITRC = ITWRITE ('GPDEPROJ',''); 

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END BUILD_CAS_GPDEPROJ;

     /*---------END NESTED PROCEDURES IN BUILD_GPDEPROJ-------*/

 END BUILD_GPDEPROJ;


 /*----------------------------------------------------------------*/
 /*              BUILD GPDECATG, GPDEFUND, &amp GPDEITEM              */ 
 /*----------------------------------------------------------------*/

 BUILD_GPDECATG_FUND_ITEM: PROC; 

     DCL SAVE_SEGMENT         CHAR (31);  

     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'BUILD_GPDECATG_FUND_ITEM '; 

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END; 

    IF GPDEPROJ_RECORD.PJSOURCE = 'C' THEN
       CALL BUILD_CAS_GPDECATG;   
    ELSE 
       CALL BUILD_PES_LAS_GPDECATG;

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END BUILD_GPDECATG_FUND_ITEM; 


 /*----------------------------------------------------------------*/
 /*                   BUILD CAS PROJECT CATEGORIES                 */
 /*----------------------------------------------------------------*/

 BUILD_CAS_GPDECATG: PROC;

     DCL SAVE_SEGMENT         CHAR (31);

     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'BUILD_CAS_GPDECATG '; 

       %IF DEBUGGER = 'ON'
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
     DCL PROJCATG_KEY CHAR (17);                                                
                                                                                
     CALL GET_FIRST_PROJCATG;                                                   
                                                                                
     CATG_BUILT = '0'B;                                                         
     TERMINATE_CATG_LOOP = '0'B;                                                
     DO WHILE (PROJCATG_FOUND &amp                                                 
               PROJCATG_RECORD.PCN = GPDEPROJ_RECORD.PCN &amp                      
               ^TERMINATE_CATG_LOOP);                                           
                                                                                
        CALL PROCESS_CAS_CATG;                                                  
                                                                                
        CALL GET_NEXT_PROJCATG;                                                 
                                                                                
     END;                                                                       
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
           /*-------NESTED PROCEDURES IN BUILD_CAS_GPDECATG------*/             
                                                                                
    /*---------------------------------------------------------------*/         
    /*                    GET FIRST CAS CATEGORY                     */         
    /*---------------------------------------------------------------*/         
                                                                                
    GET_FIRST_PROJCATG: PROC;                                                   
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);                                        
                                                                                
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'GET_FIRST_PROJCATG ';                              
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
        DCL PROJCATG_KEY CHAR (17);                                             
                                                                                
        PROJCATG_KEY = GPDEPROJ_RECORD.PCN || '0000';                           
                                                                                
        PROJCATG_FOUND = '1'B;                                                  
        /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
        ITRC = ITREAD ('PROJCATG',PROJCATG_KEY,'0','GE');
        IF ITRC = 8 THEN                                                        
           PROJCATG_FOUND = '0'B;                                               
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
    END GET_FIRST_PROJCATG;                                                     
                                                                                
                                                                                
    /*---------------------------------------------------------------*/         
    /*                    GET NEXT CAS CATEGORY                      */         
    /*---------------------------------------------------------------*/         
                                                                                
    GET_NEXT_PROJCATG: PROC;                                                    
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);                                        
                                                                                
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'GET_NEXT_PROJCATG ';                               
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
        PROJCATG_FOUND = '1'B;                                                  
        ITRC = ITREAD ('PROJCATG','','','');                                    
        IF ITRC = 8 THEN                                                        
           PROJCATG_FOUND = '0'B;                                               
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
    END GET_NEXT_PROJCATG;                                                      
                                                                                
                                                                                
    /*---------------------------------------------------------------*/         
    /*                      PROCESS CAS CATEGORYS                    */         
    /*---------------------------------------------------------------*/         
                                                                                
    PROCESS_CAS_CATG: PROC;                                                     
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);                                        
                                                                                
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'PROCESS_CAS_CATG ';                                
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
      CALL GET_FIRST_PROJITEM;                                                  
                                                                                
      IF ^PROJITEM_FOUND THEN                                                   
         DO;                                                                    
           ERROR_TYPE = 'NO ITEMS FOUND FOR PROJECT '     ||                    
                         CONTPROJ_RECORD.PCN              ||                    
                        ' CATEGORY '|| PROJCATG_RECORD.CN ||                    
                        ' PROJECT DELETED FROM THE ESTIMATE';                   
           CALL BUILD_ERROR_LOG (ERROR_TYPE);                                   
           IF SUMLVL = 'PROJECT' THEN                                           
              DO;                                                               
                 GPDEEST_KEY = GPDEPROJ_RECORD.ESTKEY;                          
                 ITRC = ITDEL ('GPDEEST',GPDEEST_KEY,'','');                    
              END;                                                              
           ITRC = ITDEL ('GPDEPROJ',GPDEPROJ_KEY,'','');                        
           TERMINATE_CATG_LOOP = '1'B;                                          
         END;                                                                   
      ELSE DO;                                                                  
              CALL FORMAT_WRITE_CAS_GPDECATG_REC;                               
              CATG_BUILT = '1'B;                                                
                                                                                
              CALL BUILD_CAS_UNIT_RECORD;                                       
                                                                                
              DO WHILE (PROJITEM_FOUND &amp PROJITEM_RECORD.PCN =                  
                        PROJCATG_RECORD.PCN &amp                                   
                        PROJITEM_RECORD.CN = PROJCATG_RECORD.CN);               
                                                                                
                 CALL FORMAT_WRITE_CAS_GPDEITEM_REC;                            
                 CALL GET_NEXT_PROJITEM;                                        
                                                                                
              END;                                                              
           END;                                                                 
                                                                                
      CALL BUILD_CAS_GPDEFUND_RECORD;                                           
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
    END PROCESS_CAS_CATG;                                                       
                                                                                
                                                                                
    /*---------------------------------------------------------------*/         
    /*                    GET FIRST CAS ITEM                         */         
    /*---------------------------------------------------------------*/         
                                                                                
    GET_FIRST_PROJITEM: PROC;                                                   
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);                                        
                                                                                
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'GET_FIRST_PROJITEM ';                              
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
        PROJITEM_KEY = PROJCATG_RECORD.PCN || PROJCATG_RECORD.CN;               
                                                                                
        PROJCATG_FOUND = '1'B;                                                  
        /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
        ITRC = ITREAD ('PROJITEM',PROJITEM_KEY,'0','GE');
        IF ITRC = 8 THEN                                                        
           PROJCATG_FOUND = '0'B;                                               
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
    END GET_FIRST_PROJITEM;                                                     
                                                                                
                                                                                
    /*---------------------------------------------------------------*/         
    /*                    GET NEXT PROJECT ITEM                      */         
    /*---------------------------------------------------------------*/         
                                                                                
    GET_NEXT_PROJITEM: PROC;                                                    
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);                                        
                                                                                
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'GET_NEXT_PROJITEM ';                               
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
        PROJITEM_FOUND = '1'B;                                                  
        ITRC = ITREAD ('PROJITEM','','','');                                    
        IF ITRC = 8 THEN                                                        
           PROJITEM_FOUND = '0'B;                                               
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
    END GET_NEXT_PROJITEM;                                                      
                                                                                
    /*---------------------------------------------------------------*/         
    /*                         BUILD CAS FUND                        */         
    /*---------------------------------------------------------------*/         
                                                                                
    BUILD_CAS_GPDEFUND_RECORD: PROC;                                            
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);                                        
                                                                                
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'BUILD_CAS_GPDEFUND_RECORD ';                       
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
        CALL GET_FIRST_PROJFUND;                                                
                                                                              

        /*  SC - THE FOLLOWING ERROR MESSAGE HAS BEEN CHANGED   */
        /*  FROM 'NO PROJFUND FOUND FOR SELECTED'               */
        /*  TO 'NO FUNDING AVAILABLE FOR SELECTED'              */
  
        IF ^PROJFUND_FOUND THEN                                                 
           DO;                                                                  
              ERROR_TYPE = ' NO FUNDING AVAILABLE FOR SELECTED '||            
                           ' PROJECT ' ||PROJCATG_RECORD.PCN ||                 
                           ' CATEGORY '||PROJCATG_RECORD.CN  ||
                           ' - NOT AN ERROR IF ZERO CATEGORY IS USED.';
              CALL BUILD_ERROR_LOG(ERROR_TYPE);                                 
           END;                                                                 
                                                                                
        DO WHILE (PROJFUND_FOUND &amp                                              
                  PROJFUND_RECORD.PCN = PROJCATG_RECORD.PCN &amp                   
                  PROJFUND_RECORD.CN = PROJCATG_RECORD.CN);                     
                                                                                
           CALL FORMAT_WRITE_CAS_GPDEFUND_REC;                                  
           CALL GET_NEXT_PROJFUND;                                              
                                                                                
        END;                                                                    
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
    END BUILD_CAS_GPDEFUND_RECORD;                                              
                                                                                
                                                                                
    /*---------------------------------------------------------------*/         
    /*                    GET FIRST PROJECT FUND                     */         
    /*---------------------------------------------------------------*/         
                                                                                
    GET_FIRST_PROJFUND: PROC;                                                   
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);                                        
                                                                                
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'GET_FIRST_PROJFUND ';                              
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
                                                                                
        PROJFUND_KEY = PROJCATG_RECORD.PCN || PROJCATG_RECORD.CN;               
                                                                                
        PROJFUND_FOUND = '1'B;                                                  
        /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
        ITRC = ITREAD ('PROJFUND',PROJFUND_KEY,'0','GE');
        IF ITRC = 8 THEN                                                        
           PROJFUND_FOUND = '0'B;                                               
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
    END GET_FIRST_PROJFUND;                                                     
                                                                                
                                                                                
    /*---------------------------------------------------------------*/         
    /*                    GET NEXT PROJECT FUND                      */         
    /*---------------------------------------------------------------*/         
                                                                                
    GET_NEXT_PROJFUND: PROC;                                                    
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);                                        
                                                                                
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'GET_NEXT_PROJFUND ';                               
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
        PROJFUND_FOUND = '1'B;                                                  
        ITRC = ITREAD ('PROJFUND','','','');                                    
        IF ITRC = 8 THEN                                                        
           PROJFUND_FOUND = '0'B;                                               
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
    END GET_NEXT_PROJFUND;                                                      
                                                                                
                                                                                
    /*---------------------------------------------------------------*/         
    /*                      FORMAT WRITE CAS CATEGORY                */         
    /*---------------------------------------------------------------*/         
                                                                                
    FORMAT_WRITE_CAS_GPDECATG_REC: PROC;                                        
                                                                                
     DCL SAVE_SEGMENT         CHAR (31);                                        
                                                                                
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                       
     SHELL$MODULE_SEGMENT = 'FORMAT_WRITE_CAS_GPDECATG_REC ';                   
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
         GPDECATG_RECORD.PCN             = PROJCATG_RECORD.PCN;                 
                                                                                
         IF PROJCATG_RECORD.PCUNITNO = ' '                                      
            THEN GPDECATG_RECORD.CUNITNO = '000';                               
            ELSE GPDECATG_RECORD.CUNITNO = PROJCATG_RECORD.PCUNITNO;            
                                                                                
         GPDECATG_RECORD.CN        = PROJCATG_RECORD.CN;                        
                                                                                
         GPDECATG_RECORD.CNALT     = ' ';                                       
         GPDECATG_RECORD.CCATFOLD  = ' ';                                       
                                                                                
         GPDECATG_RECORD.CATGTITL  = PROJCATG_RECORD.PCTITLE ;                  
         GPDECATG_RECORD.CTITLE2   = PROJCATG_RECORD.PCTITL2 ;                  
         GPDECATG_RECORD.CSECNUM   = PROJCATG_RECORD.PCSECNUM;                  
         GPDECATG_RECORD.CWRKCLS   = PROJCATG_RECORD.PCWRKCLS;                  
         GPDECATG_RECORD.CFEDWCLS  = PROJCATG_RECORD.PCFDWCLS;                  
         GPDECATG_RECORD.CFEDCCLS  = PROJCATG_RECORD.PCFDCCLS;                  
                                                                                
         IF PROJCATG_RECORD.PCFDCCLS = '*'                                      
            THEN GPDECATG_RECORD.CFXCOST = 'Y';                                 
            ELSE GPDECATG_RECORD.CFXCOST = 'N';                                 
                                                                                
         GPDECATG_RECORD.CFEDSUPP  = PROJCATG_RECORD.PCFEDSUP;                  
         GPDECATG_RECORD.CLENGTH   = PROJCATG_RECORD.PCLENGTH;                  
         GPDECATG_RECORD.CWIDTH    = PROJCATG_RECORD.PCWIDTH;                   
                                                                                
                                                                                
         IF PROJCATG_RECORD.PCPCTENG = ' '                                      
           THEN GPDECATG_RECORD.PCTCENG = GPDEPROJ_RECORD.PCENGPCT;             
           ELSE GPDECATG_RECORD.PCTCENG = PROJCATG_RECORD.PCPCTENG;             
                                                                                
         GPDECATG_RECORD.CBRLEN    = PROJCATG_RECORD.PCBRLEN ;                  
         GPDECATG_RECORD.CBRWID    = PROJCATG_RECORD.BRWIDT  ;                  
         GPDECATG_RECORD.CNUMSPAN  = PROJCATG_RECORD.PCNUMSPN;                  
         GPDECATG_RECORD.BRTYPE    = PROJCATG_RECORD.PCBRTYPE;                  
         GPDECATG_RECORD.BRDGID    = PROJCATG_RECORD.PBRIDGE ;                  
         GPDECATG_RECORD.CHWYTYPE  = PROJCATG_RECORD.CHWYTP  ;                  
         GPDECATG_RECORD.CHWYNUM   = PROJCATG_RECORD.PCHWYNUM;                  
         GPDECATG_RECORD.ESRDSECT  = PROJCATG_RECORD.PCSECT  ;                  
         GPDECATG_RECORD.CUNDESC   = PROJCATG_RECORD.PCUNTDES;                  
                                                                                
         GPDECATG_RECORD.BSTAT     = PROJCATG_RECORD.PCBSTAT ;                  
         GPDECATG_RECORD.ESTAT     = PROJCATG_RECORD.PCESTAT ;                  
         GPDECATG_RECORD.BTERM     = PROJCATG_RECORD.PCBTERM ;                  
         GPDECATG_RECORD.ETERM     = PROJCATG_RECORD.PCETERM ;                  
         GPDECATG_RECORD.ESSST1    = PROJCATG_RECORD.PCSST1  ;                  
         GPDECATG_RECORD.ESSST2    = PROJCATG_RECORD.PCSST2  ;                  
         GPDECATG_RECORD.ESSST3    = PROJCATG_RECORD.PCSST3  ;                  
         GPDECATG_RECORD.ESSST4    = PROJCATG_RECORD.PCSST4  ;                  
         GPDECATG_RECORD.ESSST5    = PROJCATG_RECORD.PCSST5  ;                  
         GPDECATG_RECORD.ESSST6    = PROJCATG_RECORD.PCSST6  ;                  
         GPDECATG_RECORD.ESNUM1    = PROJCATG_RECORD.PCNUM1  ;                  
         GPDECATG_RECORD.ESNUM2    = PROJCATG_RECORD.PCNUM2  ;                  
         GPDECATG_RECORD.ESCDE1    = PROJCATG_RECORD.PCCDE1  ;                  
         GPDECATG_RECORD.ESCDE2    = PROJCATG_RECORD.PCCDE2  ;                  
         GPDECATG_RECORD.ESCDE3    = PROJCATG_RECORD.PCCDE3  ;                  
         GPDECATG_RECORD.ESCDE4    = PROJCATG_RECORD.PCCDE4  ;                  
         GPDECATG_RECORD.ESFLG1    = PROJCATG_RECORD.PCFLG1  ;                  
         GPDECATG_RECORD.ESFLG2    = PROJCATG_RECORD.PCFLG2  ;                  
         GPDECATG_RECORD.ESFLG3    = PROJCATG_RECORD.PCFLG3  ;                  
         GPDECATG_RECORD.ESFLG4    = PROJCATG_RECORD.PCFLG4  ;                  
         GPDECATG_RECORD.ESFLG5    = PROJCATG_RECORD.PCFLG5  ;                  
                                                                                
         GPDECATG_RECORD.CLOWCOST  = 'Y';                                       
                                                                                
         GPDECATG_RECORD.CPARCTOT   = '000000000.00';                           
         GPDECATG_RECORD.CCONSTOT   = '000000000.00';                           
         GPDECATG_RECORD.CNPARTOT   = '000000000.00';                           
         GPDECATG_RECORD.CPARAMT    = '000000000.00';                           
         GPDECATG_RECORD.CTOTAMT    = '000000000.00';                           
         GPDECATG_RECORD.CNPARAMT   = '000000000.00';                           
         GPDECATG_RECORD.CPAREC     = '000000000.00';                           
         GPDECATG_RECORD.CECTOT     = '000000000.00';                           
         GPDECATG_RECORD.CNPAREC    = '000000000.00';                           
         GPDECATG_RECORD.CUNFNAMT   = '000000000.00';                           
         GPDECATG_RECORD.CFNDAMT    = '000000000.00';                           
         GPDECATG_RECORD.CFEDSHR    = '000000000.00';                           
         GPDECATG_RECORD.CFEDPCT    = '000.00';                                 
         GPDECATG_RECORD.CCOSTPER   = '000000000';                              
         GPDECATG_RECORD.CCOSTFLG   = ' ';                                      
         GPDECATG_RECORD.ADJCODE    = PROJCATG_RECORD.PCADJCOD;                 
         CALL PERCENT_LOOKUP;                                                   
         GPDECATG_RECORD.ADJPCT     = TEMP_PERCENT;                             
         GPDECATG_RECORD.CADJPAR    = '000000000.00';                           
         GPDECATG_RECORD.CADJNPAR   = '000000000.00';                           
         GPDECATG_RECORD.CADJTOT    = '000000000.00';                           
                                                                                
         GPDECATG_KEY = GPDECATG_RECORD.PCN ||                                  
                        GPDECATG_RECORD.CUNITNO ||                              
                        GPDECATG_RECORD.CN;                                     
                                                                                
         ITRC = ITWRITE ('GPDECATG','');                                        
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
    END FORMAT_WRITE_CAS_GPDECATG_REC;                                          
                                                                                
                                                                                
 /*------------------------------------------------------------------*/         
 /*                     CREATE_UNIT_DECATG_RECORD                    */         
 /*                                                                  */         
 /* CREATE A UNIT-LEVEL RECORD IN GPDECATG FOR EACH UNIQUE UNIT      */         
 /* WITHIN A PROJECT.  A UNIT-LEVEL RECORD HAS A BLANK CN.           */         
 /*------------------------------------------------------------------*/         
                                                                                
    BUILD_CAS_UNIT_RECORD:  PROC;                                               
                                                                                
      DCL SAVE_SEGMENT          CHAR (31);                                      
                                                                                
      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                      
      SHELL$MODULE_SEGMENT = 'BUILD_CAS_UNIT_RECORD ';                          
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
   /*----------------------------------------------------------*/               
   /* VERIFY THAT UNIT-LEVEL RECORD HAS NOT ALREADY BEEN ADDED */               
   /* BY LOOKING FOR PCN-CUNITNO MATCH WITH BLANK CN.          */               
   /*----------------------------------------------------------*/               
                                                                                
      IF PROJCATG_RECORD.PCUNITNO = ' '                                         
         THEN GPDECATG_KEY = GPDEPROJ_RECORD.PCN || '000';                      
         ELSE GPDECATG_KEY = GPDEPROJ_RECORD.PCN ||                             
       
                      PROJCATG_RECORD.PCUNITNO;                          
                                                                                
      GPDECATG_FOUND = '1'B;                                                    
      /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
      ITRC = ITREAD ('GPDECATG', GPDECATG_KEY, '0', '');
      IF ITRC = 8                                                               
         THEN GPDECATG_FOUND = '0'B;                                            
                                                                                
                                                                                
      IF ^GPDECATG_FOUND                                                        
         THEN DO;                                                               
            GPDECATG_RECORD.PCN         = GPDEPROJ_RECORD.PCN;                  
                                                                                
      /*------------------------------------------------------*/                
      /* UNITNO MUST NOT BE BLANK.  BLANK UNITNO HAS SPECIAL  */                
      /* SIGNIFICANCE FOR PROJECT-LEVEL RECORDS.              */                

      /*------------------------------------------------------*/                
                                                                                
            IF PROJCATG_RECORD.PCUNITNO = ' '                                   
               THEN GPDECATG_RECORD.CUNITNO = '000';                            
               ELSE GPDECATG_RECORD.CUNITNO = PROJCATG_RECORD.PCUNITNO;         
                                                                                
            GPDECATG_RECORD.CN          = ' ';                                  
            GPDECATG_RECORD.CNALT       = ' ';                                  
            GPDECATG_RECORD.CATGTITL    = PROJCATG_RECORD.PCTITLE;              
            GPDECATG_RECORD.CTITLE2     = ' ';                                  
                                                                                
            GPDECATG_RECORD.CSECNUM     = ' ';                                  
            GPDECATG_RECORD.CCATFOLD    = ' ';                                  
            GPDECATG_RECORD.CWRKCLS     = ' ';                                  
            GPDECATG_RECORD.CFEDWCLS    = ' ';                                  
            GPDECATG_RECORD.CFEDCCLS    = ' ';                                  
            GPDECATG_RECORD.CFEDSUPP    = ' ';                                  
            GPDECATG_RECORD.CLENGTH     = '0000.0000';                          
            GPDECATG_RECORD.CWIDTH      = '000.0000';                           
            GPDECATG_RECORD.PCTCENG     = '000.00';                             
            GPDECATG_RECORD.CBRLEN      = '00000.0000';                         
            GPDECATG_RECORD.CBRWID      = '000.0000';                           
            GPDECATG_RECORD.CNUMSPAN    = ' ';                                  
            GPDECATG_RECORD.BRTYPE      = ' ';                                  
            GPDECATG_RECORD.BRDGID      = ' ';                                  
            GPDECATG_RECORD.CHWYTYPE    = ' ';                                  
            GPDECATG_RECORD.CHWYNUM     = ' ';                                  
            GPDECATG_RECORD.ESRDSECT    = ' ';                                  
            GPDECATG_RECORD.CUNDESC     = PROJCATG_RECORD.PCTITLE;              
                                                                                
            GPDECATG_RECORD.BSTAT       = ' ';                                  
            GPDECATG_RECORD.ESTAT       = ' ';                                  
            GPDECATG_RECORD.BTERM       = ' ';                                  
            GPDECATG_RECORD.ETERM       = ' ';                                  
            GPDECATG_RECORD.ESSST1      = ' ';                                  
            GPDECATG_RECORD.ESSST2      = ' ';                                  
            GPDECATG_RECORD.ESSST3      = ' ';                                  
            GPDECATG_RECORD.ESSST4      = ' ';                                  
            GPDECATG_RECORD.ESSST5      = ' ';                                  
            GPDECATG_RECORD.ESSST6      = ' ';                                  
            GPDECATG_RECORD.ESNUM1      = ' ';                                  
            GPDECATG_RECORD.ESNUM2      = ' ';                                  
            GPDECATG_RECORD.ESCDE1      = ' ';                                  
            GPDECATG_RECORD.ESCDE2      = ' ';                                  
            GPDECATG_RECORD.ESCDE3      = ' ';                                  
            GPDECATG_RECORD.ESCDE4      = ' ';                                  
            GPDECATG_RECORD.ESFLG1      = ' ';                                  
            GPDECATG_RECORD.ESFLG2      = ' ';                                  
            GPDECATG_RECORD.ESFLG3      = ' ';                                  
            GPDECATG_RECORD.ESFLG4      = ' ';                                  
            GPDECATG_RECORD.ESFLG5      = ' ';                                  
                                                                                
            GPDECATG_RECORD.CLOWCOST    = ' ';                                  
            GPDECATG_RECORD.CPARCTOT    = '000000000.00';                       
            GPDECATG_RECORD.CCONSTOT    = '000000000.00';                       
            GPDECATG_RECORD.CNPARTOT    = '000000000.00';                       
            GPDECATG_RECORD.CPARAMT     = '000000000.00';                       
            GPDECATG_RECORD.CTOTAMT     = '000000000.00';                       
            GPDECATG_RECORD.CNPARAMT    = '000000000.00';                       
            GPDECATG_RECORD.CPAREC      = '000000000.00';                       
            GPDECATG_RECORD.CECTOT      = '000000000.00';                       
            GPDECATG_RECORD.CNPAREC     = '000000000.00';                       
            GPDECATG_RECORD.CUNFNAMT    = '000000000.00';                       
            GPDECATG_RECORD.CFNDAMT     = '000000000.00';                       
            GPDECATG_RECORD.CFEDSHR     = '000000000.00';                       
            GPDECATG_RECORD.CFEDPCT     = '000.00';                             
            GPDECATG_RECORD.CCOSTPER    = '000000000';                          
            GPDECATG_RECORD.CCOSTFLG    = ' ';                                  
            GPDECATG_RECORD.ADJCODE     = PROJCATG_RECORD.PCADJCOD;             
            CALL PERCENT_LOOKUP;                                                
            GPDECATG_RECORD.ADJPCT      = TEMP_PERCENT;                         
            GPDECATG_RECORD.CADJPAR     = '000000000.00';                       
            GPDECATG_RECORD.CADJNPAR    = '000000000.00';                       
            GPDECATG_RECORD.CADJTOT     = '000000000.00';                       
                                                                                
            ITRC = ITWRITE ('GPDECATG', '');                                    
                                                                                
         END;                                                                   
                                                                                
      SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                      
                                                                                
    END BUILD_CAS_UNIT_RECORD;                                                  
                                                                                
                                                                                
    /*---------------------------------------------------------------*/         
    /*                    FORMAT WRITE CAS FUND                      */         
    /*---------------------------------------------------------------*/         
                                                                                
    FORMAT_WRITE_CAS_GPDEFUND_REC: PROC;                                        
                                                                                
      DCL SAVE_SEGMENT          CHAR (31);                                      
                                                                                
      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                      
      SHELL$MODULE_SEGMENT = 'FORMAT_WRITE_CAS_GPDEFUND_REC ';                  
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
         GPDEFUND_RECORD.PCN      = PROJFUND_RECORD.PCN      ;                  
         GPDEFUND_RECORD.UNITNO   = '000';                /* NO EQUIV*/         
         GPDEFUND_RECORD.CN       = PROJFUND_RECORD.CN       ;                  
         GPDEFUND_RECORD.FUND     = PROJFUND_RECORD.FUND     ;                  
         GPDEFUND_RECORD.EDESCR   = PROJFUND_RECORD.PFDESC   ;                  
         GPDEFUND_RECORD.EFUNDPCT = PROJFUND_RECORD.PFPARPCT ;                  
         GPDEFUND_RECORD.ELIMIT   = PROJFUND_RECORD.PFLIMIT  ;                  
         GPDEFUND_RECORD.EFPRIOR  = PROJFUND_RECORD.PFPRIOR  ;                  
         GPDEFUND_RECORD.EFEDFLAG = PROJFUND_RECORD.PFFEDFLG ;                  
         GPDEFUND_RECORD.EFUNDGRP = PROJFUND_RECORD.PFFUNDGP ;                  
         GPDEFUND_RECORD.EFACSFND = PROJFUND_RECORD.PFACSFND ;                  
         GPDEFUND_RECORD.FPARTPCT = 'Y';                                        
         GPDEFUND_RECORD.FCOST    = '000000000.00';                             
         GPDEFUND_RECORD.FEC      = '000000000.00';                             
         GPDEFUND_RECORD.FTOTAMT  = '000000000.00';                             
         GPDEFUND_RECORD.FACTPCT  = '000.00';                                   
         GPDEFUND_RECORD.FFNDTOT  = '000000000.00';                             
         GPDEFUND_RECORD.FADJTOT  = '000000000.00';                             
                                                                                
                                           /* NO UNIT NO IN PROJFUND*/          
         GPDEFUND_KEY = PROJFUND_RECORD.PCN ||                                  
                        PROJCATG_RECORD.PCUNITNO ||                             
                        PROJFUND_RECORD.CN  ||                                  
                        PROJFUND_RECORD.FUND;                                   
                                                                                
         ITRC = ITWRITE ('GPDEFUND','');                                        
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
    END FORMAT_WRITE_CAS_GPDEFUND_REC;                                          

    /*--------------------------------------------------------------*/ 
    /*                      FORMAT WRITE CAS ITEM                   */ 
    /*--------------------------------------------------------------*/ 

    FORMAT_WRITE_CAS_GPDEITEM_REC: PROC;

      DCL SAVE_SEGMENT          CHAR (31);

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'FORMAT_WRITE_CAS_GPDEITEM_REC ';

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END; 

         DCL  ITEM_PRICE             FIXED DEC (13,5),
              EXTAMT                 FIXED DEC (15,5),
              TEMP_EXTAMT            FIXED DEC (11,2),
              QUANTITY               FIXED DEC (15,5),
              TEMP_QUAN              FIXED DEC (12,3);


     /*--------  SET ITEM PRICE = ESTIMATE PRICE  ------------*/

         IF PROJITEM_RECORD.PIPRICE ^= ' ' THEN 
            ITEM_PRICE = C$D13V5(PROJITEM_RECORD.PIPRICE);
         ELSE 
            ITEM_PRICE = 0;

     /*--------------- SET ITEM EXTENDED AMOUNT--------------*/

         TEMP_QUAN = C$D12V3(PROJITEM_RECORD.PICQTY);
         QUANTITY  = TEMP_QUAN;
         OVERFLOW = '0'B;
         EXTAMT = MULTIPLY(QUANTITY, ITEM_PRICE, 15,5);
         IF OVERFLOW
            THEN EXTAMT = 999999999;

         GPDEITEM_RECORD.PCN      =  PROJITEM_RECORD.PCN     ;
         GPDEITEM_RECORD.CN       =  PROJITEM_RECORD.CN      ;
         GPDEITEM_RECORD.ILINENO  =  PROJITEM_RECORD.PILINENO;
         GPDEITEM_RECORD.PITYPE   =  PROJITEM_RECORD.PITYPE  ;
         GPDEITEM_RECORD.CMOD     =  PROJITEM_RECORD.CMOD    ;
         GPDEITEM_RECORD.IALT     =  ' '        ;         /* NO EQUIV*/
         GPDEITEM_RECORD.EIITEM   =  PROJITEM_RECORD.PIITEM  ;
         GPDEITEM_RECORD.ISUPDES  =  PROJITEM_RECORD.PISUPDSC;
         GPDEITEM_RECORD.ISUPDES2 =  PROJITEM_RECORD.PISUPDS2;
         GPDEITEM_RECORD.IPLINENO =  PROJITEM_RECORD.PIPRLINE;
         GPDEITEM_RECORD.IPRPDES  =  ' '        ;
         GPDEITEM_RECORD.IQTY     =  PROJITEM_RECORD.PICQTY  ;
         GPDEITEM_RECORD.IPRICE   =  PROJITEM_RECORD.PIPRICE ;
         GPDEITEM_RECORD.IPRICER  =  ' '        ;
         GPDEITEM_RECORD.IPSOURC  =  ' '        ;
         GPDEITEM_RECORD.IPRLOCK  =  ' '        ;
         GPDEITEM_RECORD.ICOMBINE =  ' '        ;
         GPDEITEM_RECORD.INONPAR  =  PROJITEM_RECORD.PINONPAR;
         GPDEITEM_RECORD.IFIXED   =  ' '        ;
         GPDEITEM_RECORD.ISTATE   =  ' '        ;
         GPDEITEM_RECORD.ICDE1    =  ' '        ;

         TEMP_EXTAMT              = EXTAMT;
         GPDEITEM_RECORD.IEXTAMT  = D11V2$C(TEMP_EXTAMT);

         GPDEITEM_RECORD.ILOWCOST =  'Y'        ;
         GPDEITEM_RECORD.IUNITS   =  ' '        ;
         GPDEITEM_RECORD.IUNITSLS =  ' '        ;
         GPDEITEM_RECORD.IDESCRL  =  ' '        ;
         GPDEITEM_RECORD.IDESCL2  =  ' '        ;
         GPDEITEM_RECORD.ALTITMID =  ' '        ;

         ITEMLIST_FOUND = '1'B;
         ITEMLIST_KEY = PROJITEM_RECORD.PIITEM || '  ';
         /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
         ITRC = ITREAD ('ITEMLIST',ITEMLIST_KEY,'0','GE');
         IF ITRC = 8 THEN
            ITEMLIST_FOUND = '0'B;
         IF (ITEMLIST_FOUND &amp
             ITEMLIST_RECORD.ITEM = PROJITEM_RECORD.PIITEM) THEN 
            DO;
              GPDEITEM_RECORD.IUNITS   =  ITEMLIST_RECORD.IUNITS;
              GPDEITEM_RECORD.IUNITSLS =  ITEMLIST_RECORD.IUNITSLS;
              GPDEITEM_RECORD.IDESCRL  =  ITEMLIST_RECORD.IDESCRL;
              GPDEITEM_RECORD.IDESCL2  =  ITEMLIST_RECORD.IDESCL2;
              GPDEITEM_RECORD.ALTITMID =  ITEMLIST_RECORD.ALTITMID;
            END;

         GPDEITEM_KEY =  PROJITEM_RECORD.PCN || PROJITEM_RECORD.CN ||
                         PROJITEM_RECORD.PILINENO ||
                         PROJITEM_RECORD.PITYPE;

         ITRC = ITWRITE ('GPDEITEM','');

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

    END FORMAT_WRITE_CAS_GPDEITEM_REC;


    /*--------END NESTED PROCEDURES IN BUILD_CAS_GPDECATG---------*/

 END BUILD_CAS_GPDECATG;


 /*----------------------------------------------------------------*/ 
 /*                   BUILD GPDE PROJECT CATEGORIES                */ 
 /*----------------------------------------------------------------*/ 

 BUILD_PES_LAS_GPDECATG: PROC;

      DCL SAVE_SEGMENT          CHAR (31);

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'BUILD_PES_LAS_GPDECATG ';

       %IF DEBUGGER = 'ON' 
           %THEN %DO;  
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END; 

    DCL ESTCATG_KEY            CHAR (17);

    CATG_LOWCOST_FLAG = ' '; 

    O_CATG_BUILT = '0'B;

    /* LOOK FOR A LETPROP RECORD FOR THE CURRENT     */ 
    /* PROJECT (PCN) ONLY IF LAS DATA WAS REQUESTED. */

    IF LASSRCE = 'Y' THEN  
       DO;  

        /* IF VIEW = LETTINGS THEN THE LETPROP FILE IS THE  
           SUBSET FILE; THEREFORE, THE LETPROP RECORD NEEDED 
           TO DETERMINE WHETHER TO GET THE PROJECT FROM LAS
           NEEDS TO BE READ FROM THE LETPROP FILE (NOT SUBSET) */

         PROPPROJ_FOUND = '1'B;
         ITRC = ITREAD('PROPPROJ',GPDEPROJ_RECORD.PCN,'1','');
         IF ITRC = 8 THEN
            PROPPROJ_FOUND = '0'B;

         IF PROPPROJ_FOUND THEN
            DO;
              /*  CALL GET_LETPROP (AVENDOR); */
              LETPROP_FOUND = '1'B;
              ITRC = ITREAD('LETPROP',PROPPROJ_RECORD.CONTID,'1','');
              IF ITRC = 8 THEN
                 LETPROP_FOUND = '0'B;
              IF LETPROP_FOUND THEN
                 IF LETPROP_RECORD.AVENDOR ^= ' ' THEN
                    DO;
                       GPDEPROJ_RECORD.PJSOURCE = 'L';
                       ITRC = ITWRITE ('GPDEPROJ','');
                    END;
            END;    /* IF PROPPROJ FOUND DO */ 
       END;  /* IF LASSRCE = Y DO */ 

     CALL GET_FIRST_ESTCATG;

     CATG_BUILT = '0'B;
     TERMINATE_CATG_LOOP = '0'B;
     DO WHILE (ESTCATG_FOUND &amp
               ESTCATG_RECORD.PCN = GPDEPROJ_RECORD.PCN &amp 
              ^TERMINATE_CATG_LOOP);
        IF ESTCATG_RECORD.CN = '0000' THEN 
           CALL PROCESS_0_CATG(O_CATG_BUILT);
        ELSE DO;
           IF GPDEPROJ_RECORD.PJSOURCE = 'P' THEN
              CALL PROCESS_ESTCATG_RECORD(CATG_BUILT);
           ELSE         /* PJSOURCE = L */
              DO;
                CALL CHECK_LOWCOST_CATG;
                IF LOWCOST THEN
                   DO;
                      CATG_LOWCOST_FLAG = 'Y';
                      CALL PROCESS_BIDTAB_CATG_RECORD(CATG_BUILT);
                   END;   /* IF LOWCOST DO */
              END;   /* ELSE DO */
           END;   /* ELSE DO */

        CALL GET_NEXT_ESTCATG;
     END; 

     IF ^CATG_BUILT THEN
        DO; 
           IF O_CATG_BUILT THEN 
              CALL DEL_0_CATG;
           IF GPDEPROJ_RECORD.PJSOURCE = 'L' THEN
             
              /* MODIFIED THE ERROR MESSAGE  -SC 10/12/93     */

              ERROR_TYPE = 'NO VALID LOWCOST CATEGORIES FOR '||
                           'PROJECT:  '|| CURRENT_PCN || 
                           ' AWARDED PROJECT HAD NO CATEGORIES : '||
                           'PROJECT DELETED FROM THE ESTIMATE';
           ELSE
              ERROR_TYPE = 'NO VALID CATEGORIES FOR PROJECT: '||
                            CURRENT_PCN || ': PROJECT DELETED '||
                           'FROM THE ESTIMATE';
           CALL BUILD_ERROR_LOG(ERROR_TYPE);
          
           IF SUMLVL = 'PROJECT' THEN
              DO;
                 GPDEEST_KEY = GPDEPROJ_RECORD.ESTKEY;
                 ITRC = ITDEL ('GPDEEST',GPDEEST_KEY,'','');
              END; 
        
           GPDEPROJ_KEY = GPDEPROJ_RECORD.PCN; 
           ITRC = ITDEL ('GPDEPROJ',GPDEPROJ_KEY,'','');
           GPDEPROJ_DELETED = '1'B; 

        END;

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END BUILD_PES_LAS_GPDECATG;

 /*----------------------------------------------------------------*/
 /*                    GET FIRST PROJECT CATEGORY                  */
 /*----------------------------------------------------------------*/

 GET_FIRST_ESTCATG: PROC;
                                                                                
      DCL SAVE_SEGMENT          CHAR (31);                                      
                                                                                
      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'GET_FIRST_ESTCATG ';

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;

     DCL ESTCATG_KEY CHAR (17);

     ESTCATG_KEY = GPDEPROJ_RECORD.PCN || ' ';
                                                                                
     ESTCATG_FOUND = '1'B;
     ITRC = ITREAD ('ESTCATG',ESTCATG_KEY,'0','GE');
     IF ITRC = 8 THEN 
        ESTCATG_FOUND = '0'B;
   
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END GET_FIRST_ESTCATG;


 /*----------------------------------------------------------------*/
 /*                    GET NEXT PROJECT CATEGORY                   */
 /*----------------------------------------------------------------*/

 GET_NEXT_ESTCATG: PROC;

      DCL SAVE_SEGMENT          CHAR (31);

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'GET_NEXT_ESTCATG ';

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;

     ESTCATG_FOUND = '1'B;
     ITRC = ITREAD ('ESTCATG','','',''); 
     IF ITRC = 8 THEN
        ESTCATG_FOUND = '0'B;

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END GET_NEXT_ESTCATG;


 /*--------------------------------------------------*/
 /*                 PROCESS 0 CATEGORY               */
 /*--------------------------------------------------*/

 PROCESS_0_CATG: PROC (O_CATG_BUILT);

      DCL SAVE_SEGMENT          CHAR (31);

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'PROCESS_0_CATG ';

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
      DCL O_CATG_BUILT    BIT ;

     IF ESTCATG_RECORD.CN ^= ' ' THEN
        DO;
           ESTITEM_FOUND = '1'B;
           ESTITEM_KEY = ESTCATG_RECORD.PCN || ESTCATG_RECORD.CN;
           /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
           ITRC = ITREAD('ESTITEM',ESTITEM_KEY,'0','GE');
           IF ITRC = 8 
              THEN ESTITEM_FOUND = '0'B;

           IF (ESTITEM_FOUND &amp ESTITEM_RECORD.PCN = ESTCATG_RECORD.PCN
               &amp ESTITEM_RECORD.CN = '0000') THEN
               DO;  /* 0 CATEGORY IS FOR PROJECT LEVEL FUNDING ONLY */
                  ERROR_TYPE = 'ITEMS EXIST FOR PROJECT ' ||
                                ESTCATG_RECORD.PCN  || ' CATEGORY ' ||
                                ESTCATG_RECORD.CN; 
                  CALL BUILD_ERROR_LOG(ERROR_TYPE);
               END;
        END;

     O_CATG_BUILT = '1'B;
 
     /* ADDED PCGW 11/04/91 - FIX FUND LIMIT ON 0 CATG NOT WORKING */
     /*                       SET LOWCOST FLAG TO YES IF LAS DATA. */
     IF GPDEPROJ_RECORD.PJSOURCE = 'L' THEN
        CATG_LOWCOST_FLAG = 'Y';
     CALL FORMAT_WRITE_GPDECATG_RECORD;
     CALL BUILD_PES_LAS_UNIT_RECORD; 
     CALL PROCESS_GPDE_ESTFUND_RECORD;

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END PROCESS_0_CATG;

 /*--------------------------------------------------*/
 /*             PROCESS ESTCATG RECORD               */
 /*--------------------------------------------------*/

 PROCESS_ESTCATG_RECORD: PROC (CATG_BUILT);

      DCL SAVE_SEGMENT          CHAR (31);

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'PROCESS_ESTCATG_RECORD ';

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;

      DCL CATG_BUILT    BIT (1); 

     CALL GET_FIRST_ESTITEM;

     IF (ESTITEM_FOUND &amp 
         ESTITEM_RECORD.PCN = GPDEPROJ_RECORD.PCN &amp
         ESTITEM_RECORD.CN = ESTCATG_RECORD.CN)   THEN
        DO;
           CALL FORMAT_WRITE_GPDECATG_RECORD;
           CATG_BUILT = '1'B;

           CALL BUILD_PES_LAS_UNIT_RECORD;
 
           DO WHILE (ESTITEM_FOUND &amp
                     ESTITEM_RECORD.PCN = GPDEPROJ_RECORD.PCN &amp
                     ESTITEM_RECORD.CN = ESTCATG_RECORD.CN);
              CALL FORMAT_GPDEITEM_RECORD;
              ITRC = ITWRITE ('GPDEITEM','');
              CALL GET_NEXT_ESTITEM;
           END;   /* DO WHILE */
           CALL PROCESS_GPDE_ESTFUND_RECORD;
        END;   /* IF FOUND DO */
     ELSE
        DO;
           ERROR_TYPE = 'NO ITEMS FOR PROJECT '||
                        GPDEPROJ_RECORD.PCN ||
                        ' CATEGORY '|| ESTCATG_RECORD.CN;
           CALL BUILD_ERROR_LOG(ERROR_TYPE); 
           CALL DEL_GPDECATGS;
           CATG_BUILT = '0'B;
           TERMINATE_CATG_LOOP = '1'B;
        END;

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END PROCESS_ESTCATG_RECORD;


 /*--------------------------------------------------*/ 
 /*               PROCESS BIDTAB CATG RECORD         */ 
 /*--------------------------------------------------*/ 

 PROCESS_BIDTAB_CATG_RECORD: PROC (CATG_BUILT);
                                                                                
      DCL SAVE_SEGMENT          CHAR (31);                                      
                                                                                
      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'PROCESS_BIDTAB_CATG_RECORD ';

       %IF DEBUGGER = 'ON'
           %THEN %DO; 
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;                                                                
                                              
       DCL  CATG_BUILT   BIT (1);
                                  
     CALL GET_FIRST_ESTITEM;                                                    
                                                                                
     IF (^ESTITEM_FOUND |
        (ESTITEM_RECORD.PCN ^= GPDEPROJ_RECORD.PCN |
         ESTITEM_RECORD.CN ^= ESTCATG_RECORD.CN)   )THEN
        DO;                                                                     
           ERROR_TYPE = 'NO ITEMS FOR PROJECT '||                               
                         GPDEPROJ_RECORD.PCN   ||                               
                        ' CATEGORY '  || GPDECATG_RECORD.CN;
           CALL BUILD_ERROR_LOG(ERROR_TYPE);
           CALL DEL_GPDECATGS;
           CATG_BUILT = '0'B;
           TERMINATE_CATG_LOOP = '1'B;
        END;
     ITEM_BUILT = '0'B;
     DO WHILE (ESTITEM_FOUND &amp 
               ESTITEM_RECORD.PCN = GPDEPROJ_RECORD.PCN &amp 
               ESTITEM_RECORD.CN = ESTCATG_RECORD.CN); 

        CALL CHECK_LOWCOST_ITEM;
        IF LOWCOST THEN
           DO;
              CALL FORMAT_GPDEITEM_BIDTAB_RECORD;
              ITRC = ITWRITE ('GPDEITEM',''); 
              ITEM_BUILT = '1'B;
           END;

     /* THE FOLLOWING CODE WAS ADDED BY PCG 5/2/91 TO INCLUDE 
        NON-BID ITEMS ON THE FINAL DETAILED ESTIMATE AND USE 
        THE ENGINEER'S ESTIMATE PRICE.                       */
   
        ELSE      /* ^LOWCOST */
           DO;
             IF ESTITEM_RECORD.ISTATE = 'Y' THEN
                CALL FORMAT_GPDEITEM_RECORD;
                GPDEITEM_RECORD.ILOWCOST   =  'Y';
                ITRC = ITWRITE ('GPDEITEM','');
                ITEM_BUILT = '1'B;
           END;
        CALL GET_NEXT_ESTITEM;
     END;

     IF ITEM_BUILT THEN
        DO;

          CALL FORMAT_WRITE_GPDECATG_RECORD;
          CALL BUILD_PES_LAS_UNIT_RECORD;
          CATG_BUILT = '1'B;
          CALL PROCESS_GPDE_ESTFUND_RECORD;

        END;
     ELSE 
        DO;
             ERROR_TYPE = 'NO LOWCOST BID TAB ITEMS FOR PROJECT ' || 
                           GPDEPROJ_RECORD.PCN || 
                          ' CATEGORY '         || ESTCATG_RECORD.CN;  

             CALL BUILD_ERROR_LOG(ERROR_TYPE);
             CALL DEL_GPDECATGS; 
             CATG_BUILT = '0'B; 
             TERMINATE_CATG_LOOP = '1'B; 
        END; 

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT; 

 END PROCESS_BIDTAB_CATG_RECORD; 


 /*--------------------------------------------------*/
 /*               GET FIRST ESTITEM                  */
 /*--------------------------------------------------*/

 GET_FIRST_ESTITEM: PROC;

      DCL SAVE_SEGMENT          CHAR (31);

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'GET_FIRST_ESTITEM ';

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;

    ESTITEM_KEY = ESTCATG_RECORD.PCN || ESTCATG_RECORD.CN;

    ESTITEM_FOUND = '1'B;
    ITRC = ITREAD ('ESTITEM',ESTITEM_KEY,'0','GE');
    IF ITRC = 8 THEN 
       ESTITEM_FOUND = '0'B;

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END GET_FIRST_ESTITEM;

 /*--------------------------------------------------*/
 /*               GET NEXT ESTITEM                   */
 /*--------------------------------------------------*/

 GET_NEXT_ESTITEM: PROC;                                                        
                                                                                
      DCL SAVE_SEGMENT          CHAR (31);                                      
                                                                                
      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                      
      SHELL$MODULE_SEGMENT = 'GET_NEXT_ESTITEM ';                               
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
     ESTITEM_FOUND = '1'B;                                                      
     ITRC = ITREAD ('ESTITEM','','','');                                        
     IF ITRC = 8 THEN                                                           
        ESTITEM_FOUND = '0'B;                                                   
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
 END GET_NEXT_ESTITEM;                                                          
                                                                                
 /*----------------------------------------------------------------*/           
 /*                         BUILD ESTCATG GPDECATG                 */           
 /*----------------------------------------------------------------*/           
                                                                                
 FORMAT_WRITE_GPDECATG_RECORD: PROC;                                            
                                                                                
      DCL SAVE_SEGMENT          CHAR (31);                                      
                                                                                
      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                      
      SHELL$MODULE_SEGMENT = 'FORMAT_WRITE_GPDECATG_RECORD ';                   
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
      /*-------------------------------------------------------*/               
      /* A BLANK UNIT NUMBER HAS SPECIAL SIGNIFICANCE, THUS    */               
      /* WHEN CATEGORY DATA IS LOADED HERE BLANK UNITNO'S ARE  */               
      /* CONVERTED TO 00.  UNIT-LEVEL AND PROJECT-LEVEL RECORDS*/               
      /* ARE CREATED LATER IN THE APPLICATION.  A UNIT-LEVEL   */               
      /* DECATG OR DEFUND RECORD HAS A BLANK CN, AND A PROJECT-*/               
      /* LEVEL DEFUND RECORD HAS A BLANK CN AND A BLANK UNITNO.*/               
      /* THUS, A UNIT-LEVEL DEFUND RECORD WITH A BLANK UNITNO  */               
      /* WOULD BE MISTAKEN FOR A PROJECT-LEVEL DEFUND RECORD IF*/               
      /* UNITNO WAS NOT ENTERED BY THE USER AND WAS NOT        */               
      /* INITIALIZED TO 000 HERE.                              */               
      /*-------------------------------------------------------*/               
                                                                                
      GPDECATG_RECORD.PCN       = ESTCATG_RECORD.PCN;                           
                                                                                
      IF ESTCATG_RECORD.CUNITNO = ' '                                           
         THEN GPDECATG_RECORD.CUNITNO = '000';                                  
         ELSE GPDECATG_RECORD.CUNITNO = ESTCATG_RECORD.CUNITNO;                 
                                                                                
      GPDECATG_RECORD.CN        = ESTCATG_RECORD.CN;                            
                                                                                
      GPDECATG_RECORD.CNALT     = ESTCATG_RECORD.CNALT;                         
      GPDECATG_RECORD.CCATFOLD  = ESTCATG_RECORD.CCATFOLD;                      
                                                                                
      GPDECATG_RECORD.CATGTITL  = ESTCATG_RECORD.CATGTITL ;                     
      GPDECATG_RECORD.CTITLE2   = ESTCATG_RECORD.CTITLE2  ;                     
      GPDECATG_RECORD.CSECNUM   = ESTCATG_RECORD.CSECNUM  ;                     
      GPDECATG_RECORD.CWRKCLS   = ESTCATG_RECORD.CWRKCLS  ;                     
      GPDECATG_RECORD.CFEDWCLS  = ESTCATG_RECORD.CFEDWCLS ;                     
      GPDECATG_RECORD.CFEDCCLS  = ESTCATG_RECORD.CFEDCCLS ;                     
                                                                                
      IF ESTCATG_RECORD.CFEDCCLS = '*'                                          
         THEN GPDECATG_RECORD.CFXCOST = 'Y';                                    
         ELSE GPDECATG_RECORD.CFXCOST = 'N';                                    
                                                                                
      GPDECATG_RECORD.CFEDSUPP  = ESTCATG_RECORD.CFEDSUPP;                      
      GPDECATG_RECORD.CLENGTH   = ESTCATG_RECORD.CLENGTH ;                      
      GPDECATG_RECORD.CWIDTH    = ESTCATG_RECORD.CWIDTH  ;                      
                                                                                
      IF (ESTCATG_RECORD.PCTCENG = ' ')                                         
        THEN GPDECATG_RECORD.PCTCENG = GPDEPROJ_RECORD.PCENGPCT;                
        ELSE GPDECATG_RECORD.PCTCENG = ESTCATG_RECORD.PCTCENG;                  
                                                                                
      GPDECATG_RECORD.CBRLEN    = ESTCATG_RECORD.CBRLEN  ;                      
      GPDECATG_RECORD.CBRWID    = ESTCATG_RECORD.CBRWID  ;                      
      GPDECATG_RECORD.CNUMSPAN  = ESTCATG_RECORD.CNUMSPAN;                      
      GPDECATG_RECORD.BRTYPE    = ESTCATG_RECORD.BRTYPE  ;                      
      GPDECATG_RECORD.BRDGID    = ESTCATG_RECORD.BRDGID  ;                      
      GPDECATG_RECORD.CHWYTYPE  = ESTCATG_RECORD.CHWYTYPE;                      
      GPDECATG_RECORD.CHWYNUM   = ESTCATG_RECORD.CHWYNUM ;                      
      GPDECATG_RECORD.ESRDSECT  = ESTCATG_RECORD.ESRDSECT;                      
                                                                                
      GPDECATG_RECORD.BSTAT     = ESTCATG_RECORD.BSTAT   ;                      
      GPDECATG_RECORD.ESTAT     = ESTCATG_RECORD.ESTAT   ;                      
      GPDECATG_RECORD.BTERM     = ESTCATG_RECORD.BTERM   ;                      
      GPDECATG_RECORD.ETERM     = ESTCATG_RECORD.ETERM   ;                      
      GPDECATG_RECORD.ESSST1    = ESTCATG_RECORD.ESSST1  ;                      
      GPDECATG_RECORD.ESSST2    = ESTCATG_RECORD.ESSST2  ;                      
      GPDECATG_RECORD.ESSST3    = ESTCATG_RECORD.ESSST3  ;                      
      GPDECATG_RECORD.ESSST4    = ESTCATG_RECORD.ESSST4  ;                      
      GPDECATG_RECORD.ESSST5    = ESTCATG_RECORD.ESSST5  ;                      
      GPDECATG_RECORD.ESSST6    = ESTCATG_RECORD.ESSST6  ;                      
      GPDECATG_RECORD.ESNUM1    = ESTCATG_RECORD.ESNUM1  ;                      
      GPDECATG_RECORD.ESNUM2    = ESTCATG_RECORD.ESNUM2  ;                      
      GPDECATG_RECORD.ESCDE1    = ESTCATG_RECORD.ESCDE1  ;                      
      GPDECATG_RECORD.ESCDE2    = ESTCATG_RECORD.ESCDE2  ;                      
      GPDECATG_RECORD.ESCDE3    = ESTCATG_RECORD.ESCDE3  ;                      
      GPDECATG_RECORD.ESCDE4    = ESTCATG_RECORD.ESCDE4  ;                      
      GPDECATG_RECORD.ESFLG1    = ESTCATG_RECORD.ESFLG1  ;                      
      GPDECATG_RECORD.ESFLG2    = ESTCATG_RECORD.ESFLG2  ;                      
      GPDECATG_RECORD.ESFLG3    = ESTCATG_RECORD.ESFLG3  ;                      
      GPDECATG_RECORD.ESFLG4    = ESTCATG_RECORD.ESFLG4  ;                      
      GPDECATG_RECORD.ESFLG5    = ESTCATG_RECORD.ESFLG5  ;                      
                                                                                
      GPDECATG_RECORD.CLOWCOST   = CATG_LOWCOST_FLAG;                           
      GPDECATG_RECORD.CPARCTOT   = '000000000.00';                              
      GPDECATG_RECORD.CCONSTOT   = '000000000.00';                              
      GPDECATG_RECORD.CNPARTOT   = '000000000.00';                              
      GPDECATG_RECORD.CPARAMT    = '000000000.00';                              
      GPDECATG_RECORD.CTOTAMT    = '000000000.00';                              
      GPDECATG_RECORD.CNPARAMT   = '000000000.00';                              
      GPDECATG_RECORD.CPAREC     = '000000000.00';                              
      GPDECATG_RECORD.CECTOT     = '000000000.00';                              
      GPDECATG_RECORD.CNPAREC    = '000000000.00';                              
      GPDECATG_RECORD.CUNFNAMT   = '000000000.00';                              
      GPDECATG_RECORD.CFNDAMT    = '000000000.00';                              
      GPDECATG_RECORD.CFEDSHR    = '000000000.00';                              
      GPDECATG_RECORD.CFEDPCT    = '000.00';                                    
      GPDECATG_RECORD.CCOSTPER   = '000000000';                                 
      GPDECATG_RECORD.CCOSTFLG   = ' ';                                         
      GPDECATG_RECORD.ADJCODE    = ESTCATG_RECORD.ADJCODE;                      
      CALL PERCENT_LOOKUP;                                                      
      GPDECATG_RECORD.ADJPCT     = TEMP_PERCENT;                                
      GPDECATG_RECORD.CADJPAR    = '000000000.00';                              
      GPDECATG_RECORD.CADJNPAR   = '000000000.00';                              
      GPDECATG_RECORD.CADJTOT    = '000000000.00';                              
                                                                                
      GPDECATG_RECORD.CUNDESC    = ESTCATG_RECORD.CUNDESC;                      
      GPDECATG_RECORD.CFXCOST    = ' ';       /* NO EQUIV*/                     
                                                                                
      GPDECATG_KEY = GPDECATG_RECORD.PCN ||                                     
                     GPDECATG_RECORD.CUNITNO ||                                 
                     GPDECATG_RECORD.CN;                                        
                                                                                
      ITRC = ITWRITE ('GPDECATG','');                                           
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
 END FORMAT_WRITE_GPDECATG_RECORD;                                              
                                                                                
 /*----------------------------------------------------------*/                 
 /*                                                          */                 
 /*         BUILD PES LAS UNIT CATEGORY                      */                 
 /*                                                          */                 
 /*----------------------------------------------------------*/                 
                                                                                
 BUILD_PES_LAS_UNIT_RECORD:  PROC;                                              
                                                                                
   DCL SAVE_SEGMENT          CHAR (31);                                         
                                                                                
   SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                         
   SHELL$MODULE_SEGMENT = 'BUILD_PES_LAS_UNIT_RECORD';                          
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
   /*----------------------------------------------------------*/               
   /* VERIFY THAT UNIT-LEVEL RECORD HAS NOT ALREADY BEEN ADDED */               
   /* BY LOOKING FOR PCN-CUNITNO MATCH WITH BLANK CN.          */               
   /*----------------------------------------------------------*/               
                                                                                
   IF ESTCATG_RECORD.CUNITNO = ' '                                              
      THEN GPDECATG_KEY = GPDEPROJ_RECORD.PCN || '000';                         
      ELSE GPDECATG_KEY = GPDEPROJ_RECORD.PCN ||                                
                          ESTCATG_RECORD.CUNITNO;                               
                                                                                
   GPDECATG_FOUND = '1'B;                                                       
   /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
   ITRC = ITREAD ('GPDECATG', GPDECATG_KEY, '0', '');
   IF ITRC = 8                                                                  
      THEN GPDECATG_FOUND = '0'B;                                               
                                                                                
   IF ^GPDECATG_FOUND                                                           
      THEN DO;                                                                  
         GPDECATG_RECORD.PCN         = GPDEPROJ_RECORD.PCN;                     
                                                                                
      /*------------------------------------------------------*/                
      /* UNITNO MUST NOT BE BLANK.  BLANK UNITNO HAS SPECIAL  */                
      /* SIGNIFICANCE FOR PROJECT-LEVEL RECORDS.              */                
      /*------------------------------------------------------*/                
                                                                                
         IF ESTCATG_RECORD.CUNITNO = ' '                                        
            THEN GPDECATG_RECORD.CUNITNO = '000';                               
            ELSE GPDECATG_RECORD.CUNITNO = ESTCATG_RECORD.CUNITNO;              
                                                                                
         GPDECATG_RECORD.CN          = ' ';                                     
         GPDECATG_RECORD.CNALT       = ' ';                                     
         GPDECATG_RECORD.CATGTITL    = ESTCATG_RECORD.CUNDESC;                  
         GPDECATG_RECORD.CTITLE2     = ' ';                                     
                                                                                
         GPDECATG_RECORD.CSECNUM     = ' ';                                     
         GPDECATG_RECORD.CCATFOLD    = ' ';                                     
         GPDECATG_RECORD.CWRKCLS     = ' ';                                     
         GPDECATG_RECORD.CFEDWCLS    = ' ';                                     
         GPDECATG_RECORD.CFEDCCLS    = ' ';                                     
         GPDECATG_RECORD.CFEDSUPP    = ' ';                                     
         GPDECATG_RECORD.CLENGTH     = '0000.0000';                             
         GPDECATG_RECORD.CWIDTH      = '000.0000';                              
         GPDECATG_RECORD.PCTCENG     = '000.00';                                
         GPDECATG_RECORD.CBRLEN      = '00000.0000';                            
         GPDECATG_RECORD.CBRWID      = '000.0000';                              
         GPDECATG_RECORD.CNUMSPAN    = ' ';                                     
         GPDECATG_RECORD.BRTYPE      = ' ';                                     
         GPDECATG_RECORD.BRDGID      = ' ';                                     
         GPDECATG_RECORD.CHWYTYPE    = ' ';                                     
         GPDECATG_RECORD.CHWYNUM     = ' ';                                     
         GPDECATG_RECORD.ESRDSECT    = ' ';                                     
         GPDECATG_RECORD.CUNDESC     = ESTCATG_RECORD.CUNDESC;                  
                                                                                
         GPDECATG_RECORD.BSTAT       = ' ';                                     
         GPDECATG_RECORD.ESTAT       = ' ';                                     
         GPDECATG_RECORD.BTERM       = ' ';                                     
         GPDECATG_RECORD.ETERM       = ' ';                                     
         GPDECATG_RECORD.ESSST1      = ' ';                                     
         GPDECATG_RECORD.ESSST2      = ' ';                                     
         GPDECATG_RECORD.ESSST3      = ' ';                                     
         GPDECATG_RECORD.ESSST4      = ' ';                                     
         GPDECATG_RECORD.ESSST5      = ' ';                                     
         GPDECATG_RECORD.ESSST6      = ' ';                                     
         GPDECATG_RECORD.ESNUM1      = ' ';                                     
         GPDECATG_RECORD.ESNUM2      = ' ';                                     
         GPDECATG_RECORD.ESCDE1      = ' ';                                     
         GPDECATG_RECORD.ESCDE2      = ' ';                                     
         GPDECATG_RECORD.ESCDE3      = ' ';                                     
         GPDECATG_RECORD.ESCDE4      = ' ';                                     
         GPDECATG_RECORD.ESFLG1      = ' ';                                     
         GPDECATG_RECORD.ESFLG2      = ' ';                                     
         GPDECATG_RECORD.ESFLG3      = ' ';                                     
         GPDECATG_RECORD.ESFLG4      = ' ';                                     
         GPDECATG_RECORD.ESFLG5      = ' ';                                     
                                                                                
         GPDECATG_RECORD.CLOWCOST   = ' ';                                      
         GPDECATG_RECORD.CPARCTOT   = '000000000.00';                           
         GPDECATG_RECORD.CCONSTOT   = '000000000.00';                           
         GPDECATG_RECORD.CNPARTOT   = '000000000.00';                           
         GPDECATG_RECORD.CPARAMT    = '000000000.00';                           
         GPDECATG_RECORD.CTOTAMT    = '000000000.00';                           
         GPDECATG_RECORD.CNPARAMT   = '000000000.00';                           
         GPDECATG_RECORD.CPAREC     = '000000000.00';                           
         GPDECATG_RECORD.CECTOT     = '000000000.00';                           
         GPDECATG_RECORD.CNPAREC    = '000000000.00';                           
         GPDECATG_RECORD.CUNFNAMT   = '000000000.00';                           
         GPDECATG_RECORD.CFNDAMT    = '000000000.00';                           
         GPDECATG_RECORD.CFEDSHR    = '000000000.00';                           
         GPDECATG_RECORD.CFEDPCT    = '000.00';                                 
         GPDECATG_RECORD.CCOSTPER   = '000000000';                              
         GPDECATG_RECORD.CCOSTFLG   = ' ';                                      
         GPDECATG_RECORD.ADJCODE    = ESTCATG_RECORD.ADJCODE;                   
         CALL PERCENT_LOOKUP;                                                   
         GPDECATG_RECORD.ADJPCT     = TEMP_PERCENT;                             
         GPDECATG_RECORD.CADJPAR    = '000000000.00';                           
         GPDECATG_RECORD.CADJNPAR   = '000000000.00';                           
         GPDECATG_RECORD.CADJTOT    = '000000000.00';                           
                                                                                
         ITRC = ITWRITE ('GPDECATG', '');                                       
      END;                                                                      
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
 END BUILD_PES_LAS_UNIT_RECORD;                                                 
                                                                                
                                                                                
 /*------------------------------------------------------------------*/         
 /*                      ESTCATG_PERCENT_LOOKUP                      */         
 /*                                                                  */         
 /*  LOOKS UP THE ADJCODE IN THE CODETBLS AND PUTS THE PERCENT       */         
 /*  VALUE IN GPDECATG ADJPCT FIELD.                                 */         
 /*                                                                  */         
 /*------------------------------------------------------------------*/         
                                                                                
  PERCENT_LOOKUP: PROC;                                                         
                                                                                
      DCL SAVE_SEGMENT          CHAR (31);                                      
                                                                                
      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                      
      SHELL$MODULE_SEGMENT = 'PERCENT_LOOKUP ';                                 
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
     TEST_STRING = '.1234567890 ';                                              
     TEMP_PERCENT = '000.00';                                                   
     IF GPDECATG_RECORD.ADJCODE = ' ' THEN                                      
        IF GPDEPROJ_RECORD.PJSOURCE = 'C' THEN                                  
           IF PROJCATG_RECORD.PCADJPCT ^= ' ' THEN                              
              TEMP_PERCENT = PROJCATG_RECORD.PCADJPCT;                          
           ELSE;                                                                
        ELSE   /* PJSOURCE = P OR L */                                          
           IF ESTCATG_RECORD.ADJPCT ^= ' ' THEN                                 
              TEMP_PERCENT = ESTCATG_RECORD.ADJPCT;                             
           ELSE;                                                                
     ELSE    /* LOOK UP THE CODE IN THE CODETBLS */                             
        DO;                                                                     
           VALUE = GPDECATG_RECORD.ADJCODE ||                                   
                   COPY(' ',8-LENGTH(GPDECATG_RECORD.ADJCODE));                 
           CODETBLS_KEY = 'ECTGPCT ' || VALUE;                                  
           CODETBLS_FOUND = '1'B;                                               
           /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
           ITRC = ITREAD('CODETBLS',CODETBLS_KEY,'0','');
           IF ITRC = 8 THEN                                                     
              CODETBLS_FOUND = '0'B;                                            
           IF CODETBLS_FOUND THEN                                               
              DO;                                                               
                RESULT = VERIFY(CODETBLS_RECORD.CODEDESC,TEST_STRING);          
                IF RESULT = 0 THEN                                              
                   DO;                                                          
                      TEMP_NUM_PCT = C$D5V2(CODETBLS_RECORD.CODEDESC);          
                      TEMP_PERCENT = D5V2$C(TEMP_NUM_PCT);                      
                   END;                                                         
                ELSE                                                            
                   DO;                                                          
                   ERROR_TYPE = 'CODETABLE VALUE FOR ADJUSTMENT ' ||            
                           'PERCENT IS A NON NUMERIC VALUE.' ||                 
                           '  0.00 ADJUSTMENT PERCENT IS USED. ';               
                     CALL BUILD_ERROR_LOG(ERROR_TYPE);                          
                   END;   /* ELSE DO */                                         
              END;   /* IF CODETBLS FOUND DO */                                 
        END;   /* ELSE DO  CODETBLS LOOKUP */                                   
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
  END PERCENT_LOOKUP;                                                           
                                                                                
 /*----------------------------------------------------------------*/           
 /*                   PROCESS GPDE ESTFUND                         */           
 /*----------------------------------------------------------------*/           
                                                                                
 PROCESS_GPDE_ESTFUND_RECORD: PROC;                                             
                                                                                
      DCL SAVE_SEGMENT          CHAR (31);                                      
                                                                                
      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                      
      SHELL$MODULE_SEGMENT = 'PROCESS_GPDE_ESTFUND_RECORD ';                    
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
      RECORD_LOCKED = '0'B;                                                     
      ESTFUND_FOUND = '1'B;                                                     
      ESTFUND_KEY   = GPDEPROJ_RECORD.PCN || ESTCATG_RECORD.CN;                 
                                                                                
      /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
      ITRC = ITREAD ('ESTFUND',ESTFUND_KEY,'0','GE');
      IF ITRC = 8 THEN                                                          
         ESTFUND_FOUND = '0'B;    
     /* CHANGED BY PCGW; 920706-3202 WY */
     
     /* CHANGED THE ERROR MESSAGE TO BE MORE MEANINGFUL-SC 10/12/93 */

      IF (^ESTFUND_FOUND | ESTFUND_RECORD.PCN ^= GPDEPROJ_RECORD.PCN
                         | ESTFUND_RECORD.CN ^= ESTCATG_RECORD.CN)  THEN
         DO;                                                                    
            ERROR_TYPE = ' NO ESTIMATE FUNDS FOUND FOR SELECTED '||
                         ' PROJECT ' ||ESTCATG_RECORD.PCN ||                    
                         ' CATEGORY '||ESTCATG_RECORD.CN  ||
                         ' - NOT AN ERROR IF ZERO CATEGORY IS USED.';
            CALL BUILD_ERROR_LOG(ERROR_TYPE);                                   
         END;                                                                   
                                                                                
      DO WHILE (ESTFUND_FOUND &amp                                                 
                ESTFUND_RECORD.PCN = GPDEPROJ_RECORD.PCN &amp                      
                ESTFUND_RECORD.CN = ESTCATG_RECORD.CN);                         
                                                                                
         CALL FORMAT_WRITE_ESTFUND_RECORD;                                      
                                                                                
         ITRC = ITREAD ('ESTFUND','','','');                                    
         IF ITRC = 8 THEN                                                       
            ESTFUND_FOUND = '0'B;                                               
                                                                                
      END;                                                                      
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
 END PROCESS_GPDE_ESTFUND_RECORD;                                               
                                                                                
 /*--------------------------------------------------*/                         
 /*              CHECK LOW COST CATEGORY             */                         
 /*--------------------------------------------------*/                         
                                                                                
 CHECK_LOWCOST_CATG: PROC;                                                      
                                                                                
      DCL SAVE_SEGMENT          CHAR (31);                                      
                                                                                
      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                      
      SHELL$MODULE_SEGMENT = 'CHECK_LOWCOST_CATG ';                             
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
     BIDTABS_KEY = LETPROP_RECORD.LETTING ||                                    
                   LETPROP_RECORD.CALL    ||                                    
                   LETPROP_RECORD.AVENDOR ||'S'||                               
                   ESTCATG_RECORD.CSECNUM;                                      
                                                                                
     LOWCOST = '0'B;                                                            
     CALL GET_BIDTABS; /*DIRECT EQUAL READ*/                                    
     IF BIDTABS_FOUND THEN                                                      
        IF BIDTABS_RECORD.BTLOWCST = 'Y' THEN                                   
           LOWCOST = '1'B;                                                      
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
 END CHECK_LOWCOST_CATG;                                                        
                                                                                
 /*--------------------------------------------------*/                         
 /*          CHECK LOW COST ITEM                     */                         
 /*--------------------------------------------------*/                         
                                                                                
 CHECK_LOWCOST_ITEM: PROC;                                                      
                                                                                
      DCL SAVE_SEGMENT          CHAR (31);                                      
                                                                                
      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                      
      SHELL$MODULE_SEGMENT = 'CHECK_LOWCOST_ITEM ';                             
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
     BIDTABS_KEY = LETPROP_RECORD.LETTING ||                                    
                   LETPROP_RECORD.CALL    ||                                    
                   LETPROP_RECORD.AVENDOR ||'L'||                               
                   ESTITEM_RECORD.IPLINENO;                                     
     LOWCOST = '0'B;                                                            
                                                                                
     CALL GET_BIDTABS; /*DIRECT EQUAL READ*/                                    
     IF BIDTABS_FOUND THEN                                                      
        IF BIDTABS_RECORD.BTLOWCST = 'Y' THEN                                   
           LOWCOST = '1'B;                                                      
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
 END CHECK_LOWCOST_ITEM;                                                        
                                                                                
                                                                                
 /*--------------------------------------------------*/                         
 /*                   GET BIDTABS                    */                         
 /*--------------------------------------------------*/                         
                                                                                
 GET_BIDTABS: PROC;                                                             
                                                                                
      DCL SAVE_SEGMENT          CHAR (31);                                      
                                                                                
      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                      
      SHELL$MODULE_SEGMENT = 'GET_BIDTABS ';                                    
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
      BIDTABS_FOUND = '1'B;                                                     
      /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
      ITRC = ITREAD('BIDTABS',BIDTABS_KEY,'0','');
      IF ITRC = 8 THEN                                                          
         BIDTABS_FOUND = '0'B;                                                  
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
 END GET_BIDTABS;                                                               
                                                                                
                                                                                
 /*----------------------------------------------------------------*/           
 /*                     FORMAT WRITE ESTFUND RECORD                */           
 /*----------------------------------------------------------------*/           
                                                                                
 FORMAT_WRITE_ESTFUND_RECORD: PROC;                                             
                                                                                
      DCL SAVE_SEGMENT          CHAR (31);                                      
                                                                                
      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                      
      SHELL$MODULE_SEGMENT = 'FORMAT_WRITE_ESTFUND_RECORD ';                    
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
        GPDEFUND_RECORD.PCN     = GPDEPROJ_RECORD.PCN;                          
                                                                                
        IF ESTCATG_RECORD.CUNITNO      = ' '                                    
           THEN GPDEFUND_RECORD.UNITNO = '000';                                 
           ELSE GPDEFUND_RECORD.UNITNO = ESTCATG_RECORD.CUNITNO;                
                                                                                
        GPDEFUND_RECORD.CN             = ESTFUND_RECORD.CN;                     
        GPDEFUND_RECORD.FUND           = ESTFUND_RECORD.FUND;                   
        GPDEFUND_RECORD.EDESCR         = ESTFUND_RECORD.EDESCR;                 
                                                                                
        GPDEFUND_RECORD.EFUNDPCT       = ESTFUND_RECORD.EFUNDPCT;               
        GPDEFUND_RECORD.ELIMIT         = ESTFUND_RECORD.ELIMIT;                 
        GPDEFUND_RECORD.EFPRIOR        = ESTFUND_RECORD.EFPRIOR;                
        GPDEFUND_RECORD.EFEDFLAG       = ESTFUND_RECORD.EFEDFLAG;               
        GPDEFUND_RECORD.EFUNDGRP       = ESTFUND_RECORD.EFUNDGRP;               
        GPDEFUND_RECORD.EFACSFND       = ESTFUND_RECORD.EFACSFND;               
                                                                                
        GPDEFUND_RECORD.FPARTPCT       = 'Y';                                   
        GPDEFUND_RECORD.FCOST          = '000000000.00';                        
        GPDEFUND_RECORD.FEC            = '000000000.00';                        
        GPDEFUND_RECORD.FTOTAMT        = '000000000.00';                        
        GPDEFUND_RECORD.FACTPCT        = '000.00';                              
        GPDEFUND_RECORD.FFNDTOT        = '000000000.00';                        
        GPDEFUND_RECORD.FADJTOT        = '000000000.00';                        
                                                                                
        GPDEFUND_KEY = GPDEFUND_RECORD.PCN    ||                                
                       GPDEFUND_RECORD.UNITNO ||                                
                       GPDEFUND_RECORD.CN     ||                                
                       GPDEFUND_RECORD.FUND;                                    
                                                                                
        ITRC = ITWRITE ('GPDEFUND', '');                                        
                                                                                
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;                                         
                                                                                
 END FORMAT_WRITE_ESTFUND_RECORD;                                               
                                                                                
                                                                                
 /*----------------------------------------------------------------*/           
 /*                         BUILD GPDE ESTITEM                     */           
 /*----------------------------------------------------------------*/           
                                                                                
                                                                                
 FORMAT_GPDEITEM_RECORD: PROC;                                                  
                                                                                
      DCL SAVE_SEGMENT          CHAR (31);                                      
                                                                                
      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;                                      
      SHELL$MODULE_SEGMENT = 'FORMAT_GPDEITEM_RECORD ';                         
                                                                                
       %IF DEBUGGER = 'ON'                                                      
           %THEN %DO;                                                           
              PUT SKIP LIST ('INSIDE PROCEDURE ',                               
                              TRIM(SHELL$MODULE_SEGMENT));                      
           %END;                                                                
                                                                                
          DCL REVISED_PRICE          FIXED DEC (13,5),                          
              ITEM_PRICE             FIXED DEC (13,5),                          
              EXTAMT                 FIXED DEC (15,6),                          
              TEMP_EXTAMT            FIXED DEC (11,2),                          
              QUANTITY               FIXED DEC (15,5),                          
              TEMP_QUAN              FIXED DEC (12,3);                          
                                                                                
                                                                                
     /*--------  SET ITEM PRICE = ESTIMATE PRICE  ------------*/                
   
     REVISED_PRICE = C$D13V5(ESTITEM_RECORD.IPRICER);                           
     IF (ESTITEM_RECORD.IPRICER = ' ' | REVISED_PRICE = 0) THEN                 
        DO;                                                                     
           ITEM_PRICE = C$D13V5(ESTITEM_RECORD.IPRICE);                         
           REVISED_PRICE = 0;                                                   
        END;                                                                    
     ELSE                                                                       
        ITEM_PRICE = REVISED_PRICE;                                             
                                                                                
     /*--------------- SET ITEM EXTENDED AMOUNT--------------*/                 
                                                                                
     TEMP_QUAN = C$D12V3(ESTITEM_RECORD.IQTY);                                  
     QUANTITY  = TEMP_QUAN;                                                     
     OVERFLOW = '0'B;                                                           
     EXTAMT = MULTIPLY(QUANTITY, ITEM_PRICE, 15,6);
     IF OVERFLOW                                                                
        THEN EXTAMT = 999999999;                                                
                                                                                
     GPDEITEM_RECORD.PCN        = ESTCATG_RECORD.PCN;                           
     GPDEITEM_RECORD.CN         = ESTITEM_RECORD.CN;                            
     GPDEITEM_RECORD.ILINENO    = ESTITEM_RECORD.ILINENO;                       
     GPDEITEM_RECORD.PITYPE     = ' ';                                          
     GPDEITEM_RECORD.CMOD       = ' ';                                          
     GPDEITEM_RECORD.EIITEM     = ESTITEM_RECORD.EIITEM;                        
     GPDEITEM_RECORD.IALT       = ESTITEM_RECORD.IALT;                          
     GPDEITEM_RECORD.ISUPDES    = ESTITEM_RECORD.ISUPDES;                       
     GPDEITEM_RECORD.ISUPDES2   = ESTITEM_RECORD.ISUPDES2;                      
     GPDEITEM_RECORD.IPLINENO   = ESTITEM_RECORD.IPLINENO;                      
     GPDEITEM_RECORD.IPRPDES    = ESTITEM_RECORD.IPRPDES;                       
                                                                                
     GPDEITEM_RECORD.IQTY       = D12V3$C(TEMP_QUAN);                           
                                                                                
     GPDEITEM_RECORD.IPRICE     = D13V5$C(ITEM_PRICE);                          
     GPDEITEM_RECORD.IPRICER    = D13V5$C(REVISED_PRICE);                       
                                                                                
     GPDEITEM_RECORD.IPSOURC    = ESTITEM_RECORD.IPSOURC;                       
     GPDEITEM_RECORD.IPRLOCK    = ESTITEM_RECORD.IPRLOCK;                       
     GPDEITEM_RECORD.ICOMBINE   = ESTITEM_RECORD.ICOMBINE;                      
     GPDEITEM_RECORD.INONPAR    = ESTITEM_RECORD.INONPAR;                       
     GPDEITEM_RECORD.IFIXED     = ESTITEM_RECORD.IFIXED;                        
     GPDEITEM_RECORD.ISTATE     = ESTITEM_RECORD.ISTATE;                        
     GPDEITEM_RECORD.ICDE1      = ESTITEM_RECORD.ICDE1;                         
                                                                                
     TEMP_EXTAMT                = ROUND(EXTAMT,2);    
     GPDEITEM_RECORD.IEXTAMT    = D11V2$C(TEMP_EXTAMT);                         
                                                                                
     GPDEITEM_RECORD.ILOWCOST   =  ' ';                                         
     GPDEITEM_RECORD.IUNITS     =  ' ';                                         
     GPDEITEM_RECORD.IUNITSLS   =  ' ';                                         
     GPDEITEM_RECORD.IDESCRL    =  ' ';                                         
     GPDEITEM_RECORD.IDESCL2    =  ' ';                                         
     GPDEITEM_RECORD.ALTITMID   =  ' ';                                         

     ITEMLIST_FOUND = '1'B;                  /* PCG */
     ITEMLIST_KEY = ESTITEM_RECORD.EIITEM ||  GPDEPROJ_RECORD.PSPECYR;
     /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
     ITRC = ITREAD ('ITEMLIST',ITEMLIST_KEY,'0',''); /* TOOK OUT GE */
     IF ITRC = 8 THEN
        ITEMLIST_FOUND = '0'B;
     IF (ITEMLIST_FOUND &amp 
         ITEMLIST_RECORD.ITEM = ESTITEM_RECORD.EIITEM) THEN
        DO;               
           GPDEITEM_RECORD.IUNITS   =  ITEMLIST_RECORD.IUNITS;
           GPDEITEM_RECORD.IUNITSLS =  ITEMLIST_RECORD.IUNITSLS;
           GPDEITEM_RECORD.IDESCRL  =  ITEMLIST_RECORD.IDESCRL;
           GPDEITEM_RECORD.IDESCL2  =  ITEMLIST_RECORD.IDESCL2;
           GPDEITEM_RECORD.ALTITMID =  ITEMLIST_RECORD.ALTITMID;
        END;

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END FORMAT_GPDEITEM_RECORD;

 /*----------------------------------------------------------------*/
 /*             BUILD GPDE ESTITEM/BIDTAB RECORD                   */
 /*----------------------------------------------------------------*/

 FORMAT_GPDEITEM_BIDTAB_RECORD: PROC;

      DCL SAVE_SEGMENT          CHAR (31);

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'FORMAT_GPDEITEM_BIDTAB_RECORD ';

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ', 
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;

          DCL REVISED_PRICE          FIXED DEC (13,5),
              ITEM_PRICE             FIXED DEC (13,5),
              EXTAMT                 FIXED DEC (15,6),
              TEMP_EXTAMT            FIXED DEC (11,2),
              QUANTITY               FIXED DEC (15,5),
              TEMP_QUAN              FIXED DEC (12,3);


     /*--------  SET ITEM PRICE = ESTIMATE PRICE  ------------*/

     ITEM_PRICE    = C$D13V5(BIDTABS_RECORD.BIDPRICE);
     REVISED_PRICE = 0; 

     /*--------------- SET ITEM EXTENDED AMOUNT--------------*/

     TEMP_QUAN = C$D12V3(ESTITEM_RECORD.IQTY);
     QUANTITY  = TEMP_QUAN;
     OVERFLOW = '0'B;
     EXTAMT = MULTIPLY(QUANTITY, ITEM_PRICE, 15,6);
     IF OVERFLOW
        THEN EXTAMT = 999999999;
 
     GPDEITEM_RECORD.PCN        = ESTCATG_RECORD.PCN;
     GPDEITEM_RECORD.CN         = ESTITEM_RECORD.CN; 
     GPDEITEM_RECORD.ILINENO    = ESTITEM_RECORD.ILINENO;
     GPDEITEM_RECORD.PITYPE     = ' ';
     GPDEITEM_RECORD.CMOD       = ' ';
     GPDEITEM_RECORD.EIITEM     = ESTITEM_RECORD.EIITEM;
     GPDEITEM_RECORD.IALT       = ESTITEM_RECORD.IALT;
     GPDEITEM_RECORD.ISUPDES    = ESTITEM_RECORD.ISUPDES;
     GPDEITEM_RECORD.ISUPDES2   = ESTITEM_RECORD.ISUPDES2;
     GPDEITEM_RECORD.IPLINENO   = ESTITEM_RECORD.IPLINENO;
     GPDEITEM_RECORD.IPRPDES    = ESTITEM_RECORD.IPRPDES; 

     GPDEITEM_RECORD.IQTY       = D12V3$C(TEMP_QUAN);

     GPDEITEM_RECORD.IPRICE     = D13V5$C(ITEM_PRICE);
     GPDEITEM_RECORD.IPRICER    = D13V5$C(REVISED_PRICE);

     GPDEITEM_RECORD.IPSOURC    = ESTITEM_RECORD.IPSOURC;
     GPDEITEM_RECORD.IPRLOCK    = ESTITEM_RECORD.IPRLOCK;
     GPDEITEM_RECORD.ICOMBINE   = ESTITEM_RECORD.ICOMBINE;
     GPDEITEM_RECORD.INONPAR    = ESTITEM_RECORD.INONPAR; 
     GPDEITEM_RECORD.IFIXED     = ESTITEM_RECORD.IFIXED;  
     GPDEITEM_RECORD.ISTATE     = ESTITEM_RECORD.ISTATE;  
     GPDEITEM_RECORD.ICDE1      = ESTITEM_RECORD.ICDE1;

     TEMP_EXTAMT                = ROUND(EXTAMT,2);
     GPDEITEM_RECORD.IEXTAMT    = D11V2$C(TEMP_EXTAMT);

     GPDEITEM_RECORD.ILOWCOST   =  'Y'; 
     GPDEITEM_RECORD.IUNITS     =  ' ';
     GPDEITEM_RECORD.IUNITSLS   =  ' '; 
     GPDEITEM_RECORD.IDESCRL    =  ' '; 
     GPDEITEM_RECORD.IDESCL2    =  ' '; 
     GPDEITEM_RECORD.ALTITMID   =  ' '; 

     ITEMLIST_FOUND = '1'B;                  /* PCG */ 
     ITEMLIST_KEY = ESTITEM_RECORD.EIITEM || GPDEPROJ_RECORD.PSPECYR;
     /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
     ITRC = ITREAD ('ITEMLIST',ITEMLIST_KEY,'0',''); /* TOOK OUT GE */
     IF ITRC = 8 THEN 
        ITEMLIST_FOUND = '0'B;
     IF (ITEMLIST_FOUND &amp
         ITEMLIST_RECORD.ITEM = ESTITEM_RECORD.EIITEM) THEN
        DO;
           GPDEITEM_RECORD.IUNITS   =  ITEMLIST_RECORD.IUNITS;
           GPDEITEM_RECORD.IUNITSLS =  ITEMLIST_RECORD.IUNITSLS;
           GPDEITEM_RECORD.IDESCRL  =  ITEMLIST_RECORD.IDESCRL; 
           GPDEITEM_RECORD.IDESCL2  =  ITEMLIST_RECORD.IDESCL2; 
           GPDEITEM_RECORD.ALTITMID =  ITEMLIST_RECORD.ALTITMID;
        END;

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END FORMAT_GPDEITEM_BIDTAB_RECORD;


 /*--------------------------------------------------*/
 /*               DELETE GPDE CATEGORIES             */
 /*--------------------------------------------------*/

 DEL_GPDECATGS: PROC;

      DCL SAVE_SEGMENT          CHAR (31);

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'DEL_GPDECATGS '; 

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END; 

     /* IF ANY CATEGORY IN A PROJECT HAS NO ITEMS 
        THEN, THAT CATEGORY SHOULD NOT BE PROCESSED
        SO ALL OTHER CATEGORIES UNDER THAT PROJECT,
        ALL ITEMS ALREADY BUILT UNDER EACH CATEGORY,
        AND ALL FUNDS BUILT UNDER EACH CATEGORY 
        SHOULD BE DELETED.                          */

     GPDECATG_FOUND = '1'B;
     GPDECATG_KEY = GPDEPROJ_RECORD.PCN;
     ITRC = ITREAD ('GPDECATG',GPDECATG_KEY,'0','GE');
     IF ITRC = 8 THEN
        GPDECATG_FOUND = '0'B;

     DO WHILE (GPDECATG_FOUND &amp
               GPDECATG_RECORD.PCN = GPDEPROJ_RECORD.PCN);
        GPDECATG_KEY = GPDEPROJ_RECORD.PCN     ||
                       GPDECATG_RECORD.CUNITNO || GPDECATG_RECORD.CN;

        CALL DEL_GPDEITEMS;

        CALL DEL_GPDEFUNDS;

        ITRC = ITDEL ('GPDECATG',GPDECATG_KEY,'0','');

        ITRC = ITREAD ('GPDECATG','','','');
        IF ITRC = 8 THEN
           GPDECATG_FOUND = '0'B;
     END;


     /*----- NESTED PROCEDURES WITHIN DEL_GPDECATGS -----*/ 
     DEL_GPDEITEMS : PROC;

        GPDEITEM_FOUND = '1'B;
        GPDEITEM_KEY = GPDEPROJ_RECORD.PCN || GPDECATG_RECORD.CN;
        ITRC = ITREAD ('GPDEITEM',GPDEITEM_KEY,'0','GE'); 
        IF ITRC = 8 THEN                                 
           GPDEITEM_FOUND = '0'B;

        DO WHILE (GPDEITEM_FOUND &amp
                  GPDEITEM_RECORD.PCN = GPDEPROJ_RECORD.PCN &amp
                  GPDEITEM_RECORD.CN  = GPDECATG_RECORD.CN); 

           /* ASSIGN THE KEY VALUE TO DELETE THE CORRECT RECORD */
           /*        PCGW - 01/28/93  BSR 921201-3201           */
           GPDEITEM_KEY = GPDEITEM_RECORD.PCN || GPDEITEM_RECORD.CN ||
                          GPDEITEM_RECORD.ILINENO;

           ITRC = ITDEL ('GPDEITEM',GPDEITEM_KEY,'0',''); 

           ITRC = ITREAD ('GPDEITEM','','','');
           IF ITRC = 8 THEN 
              GPDEITEM_FOUND = '0'B;

        END;  

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT; 

     END DEL_GPDEITEMS;  

     /*------------------------------------------------------*/ 

     DEL_GPDEFUNDS : PROC;

      DCL SAVE_SEGMENT          CHAR (31);    

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'DEL_GPDEFUND ';

       %IF DEBUGGER = 'ON' 
           %THEN %DO;      
              PUT SKIP LIST ('INSIDE PROCEDURE ',   
                              TRIM(SHELL$MODULE_SEGMENT)); 
           %END;    

       /* PCGW 4/25/94 */
        GPDEFUND_FOUND = '1'B;   
        GPDEFUND_KEY = GPDEPROJ_RECORD.PCN ||   
                       GPDECATG_RECORD.CUNITNO ||
                       GPDECATG_RECORD.CN;  

        ITRC = ITREAD ('GPDEFUND',GPDEFUND_KEY,'0','GE');
        IF ITRC = 8 THEN   
           GPDEFUND_FOUND = '0'B;  

        DO WHILE (GPDEFUND_FOUND &amp    
                  GPDEFUND_RECORD.PCN = GPDEPROJ_RECORD.PCN &amp
                  GPDEFUND_RECORD.UNITNO = GPDECATG_RECORD.CUNITNO &amp 
                  GPDEFUND_RECORD.CN  = GPDECATG_RECORD.CN); 

           /* ASSIGN THE KEY VALUE TO DELETE THE CORRECT RECORD */
           /*        PCGW - 01/28/93  BSR 921201-3201           */
           /* PCGW 4/25/94 */
           GPDEFUND_KEY = GPDEFUND_RECORD.PCN || 
                          GPDEFUND_RECORD.UNITNO ||
                          GPDEFUND_RECORD.CN ||
                          GPDEFUND_RECORD.FUND;

           ITRC = ITDEL ('GPDEFUND','GPDEFUND_KEY','0',''); 

           ITRC = ITREAD ('GPDEFUND','','',''); 
           IF ITRC = 8 THEN    
              GPDEFUND_FOUND = '0'B; 

        END;

     END DEL_GPDEFUNDS;
     /*--- END NESTED PROCEDURES WITHIN DEL_GPDECATGS ---*/

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;  

 END DEL_GPDECATGS; 

 /*--------------------------------------------------*/ 
 /*               DELETE ZERO CATEGORY               */ 
 /*--------------------------------------------------*/ 

 DEL_0_CATG: PROC;

      DCL SAVE_SEGMENT          CHAR (31);  

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'DEL_0_CATG ';

       %IF DEBUGGER = 'ON' 
           %THEN %DO;      
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;  

     DCL CUNITNO              CHAR (4); 

     /* IF A ZERO CATEGORY HAS BEEN BUILT THEN  
        THAT CATEGORY SHOULD BE DELETED FROM THE
        GPDECATG FILE AND ALL FUNDS UNDER THAT ZERO 
        CATEGORY SHOULD ALSO BE DELETED.            */ 


     GPDECATG_FOUND = '1'B;
     GPDECATG_KEY = GPDEPROJ_RECORD.PCN || '0000';
     ITRC = ITREAD ('GPDECATG',GPDECATG_KEY,'1','');
     IF ITRC = 8 THEN 
        GPDECATG_FOUND = '0'B; 

     IF (GPDECATG_FOUND &amp   
         GPDECATG_RECORD.PCN = GPDEPROJ_RECORD.PCN &amp 
         GPDECATG_RECORD.CN  = '0000') THEN 
        DO; 

           GPDECATG_KEY = GPDEPROJ_RECORD.PCN || GPDECATG_RECORD.CN;
           CUNITNO = GPDECATG_RECORD.CUNITNO; 
           CALL DEL_0_GPDEFUNDS;
           GPDECATG_KEY = GPDEPROJ_RECORD.PCN ||
                          GPDECATG_RECORD.CUNITNO || '0000';
           ITRC = ITDEL ('GPDECATG',GPDECATG_KEY,'0','');


           /* THIS PART DELETES THE CATEGORY ZERO UNIT
              RECORD CREATED FOR THE CATEGORY         */ 

           GPDECATG_KEY = GPDEPROJ_RECORD.PCN ||  
                          CUNITNO || '    '; 
           ITRC = ITREAD ('GPDECATG',GPDECATG_KEY,'0',''); 
           IF ITRC = 8 THEN 
              GPDECATG_FOUND = '0'B; 

           IF (GPDECATG_FOUND &amp
               GPDECATG_RECORD.PCN = GPDEPROJ_RECORD.PCN &amp
               GPDECATG_RECORD.CN  = '    ') THEN 

              ITRC = ITDEL ('GPDECATG',GPDECATG_KEY,'','');
        END; 

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

     /*----- NESTED PROCEDURE WITHIN DEL_0_CATG -----*/ 

     DEL_0_GPDEFUNDS : PROC; 

      DCL SAVE_SEGMENT          CHAR (31);  

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT; 
      SHELL$MODULE_SEGMENT = 'DEL_0_GPDEFUND '; 

       %IF DEBUGGER = 'ON'
           %THEN %DO;     
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT)); 
           %END; 

        GPDEFUND_FOUND = '1'B; 
        GPDEFUND_KEY = GPDEPROJ_RECORD.PCN ||  
                       GPDECATG_RECORD.CN; 

        ITRC = ITREAD ('GPDEFUND',GPDEFUND_KEY,'2','GE');
        IF ITRC = 8 THEN
           GPDEFUND_FOUND = '0'B; 

        DO WHILE (GPDEFUND_FOUND &amp
                  GPDEFUND_RECORD.PCN = GPDEPROJ_RECORD.PCN &amp 
                  GPDEFUND_RECORD.CN  = GPDECATG_RECORD.CN); 

           /* ASSIGN THE KEY VALUE TO DELETE THE CORRECT RECORD */
           /*        PCGW - 01/28/93  BSR 921201-3201           */
           GPDEFUND_KEY = GPDEFUND_RECORD.PCN || 
                          GPDEFUND_RECORD.CN || GPDEFUND_RECORD.FUND;

           ITRC = ITDEL ('GPDEFUND','GPDEFUND_KEY','0',''); 

           ITRC = ITREAD ('GPDEFUND','','','');
           IF ITRC = 8 THEN 
              GPDEFUND_FOUND = '0'B; 

        END;  

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

     END DEL_0_GPDEFUNDS;
     /*--- END NESTED PROCEDURE WITHIN DEL_0_CATG ---*/ 

 END DEL_0_CATG;

 /*--------------------------------------------------------------*/ 
 /*         PROCESS GPDE ADDENDUM ITEMS IN GPDEITEM FILE         */ 
 /*--------------------------------------------------------------*/ 

 PROCESS_ADDITEMS : PROC;

      DCL SAVE_SEGMENT          CHAR (31); 

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'PROCESS_ADDITEM '; 

       %IF DEBUGGER = 'ON'
           %THEN %DO; 
              PUT SKIP LIST ('INSIDE PROCEDURE ', 
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;

   /*---------------------------------------------------------------*/
   /*        FOR CURRENT GPDEPROJ (PCN) APPLY ADDENDUM ITEMS        */
   /*---------------------------------------------------------------*/

  IF GPDEPROJ_RECORD.PJSOURCE ^='C' THEN   /* CASSRCE ^= Y */
     CALL APPLY_ADDITEMS;     

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT; 

     /*----------- NESTED PROCEDURE WITHIN PROCESS ADDITEMS ---------*/ 

  APPLY_ADDITEMS:  PROC;

    DCL  SAVE_SEGMENT       CHAR (31), 
         ACTION             CHAR (1),
        (QUANTITY,PRICE,   
         EXTAMT,REV_PRICE)  FIXED DEC (15,5),    
         TEMP_QUANTITY      FIXED DEC (12,3),
         TEMP_PRICE         FIXED DEC (13,5),
         TEMP_REV_PRICE     FIXED DEC (13,5),
         TEMP_EXTAMT        FIXED DEC (11,2);

    SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
    SHELL$MODULE_SEGMENT = 'APPLY_ADDITEMS'; 

       %IF DEBUGGER = 'ON'  
           %THEN %DO;       
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT)); 
           %END;   

    /*--- GET ADDITEMS FOR PROJECT ---*/     
    RECORD_LOCKED = '0'B;       
    ADDITEM_FOUND = '1'B;

    
    ADDITEM_KEY_1 = GPDEPROJ_RECORD.PCN;
    ITRC = ITREAD ('ADDITEM ', ADDITEM_KEY_1, '1', '');  
    IF ITRC = 8 
       THEN ADDITEM_FOUND = '0'B;

    DO WHILE (ADDITEM_FOUND &amp 
              ADDITEM_RECORD.PCN = GPDEPROJ_RECORD.PCN);  

       /*--- APPLY THIS ADDITEM ONLY IF IT IS NOT STATE SUPPLIED ---*/
       /*---                I.E. AISTATE ^= 'Y'                  ---*/
       /*--- IF ADDITEM IS STATE SUPPLIED THEN SKIP THIS ADDITEM ---*/
       IF ADDITEM_RECORD.AISTATE ^= 'Y' THEN 
          DO;      

       /*-- CHECK VALIDITY OF ADDITEM PCN AND CN AGAINST CATG FILE --*/
            GPDECATG_FOUND = '1'B;  
            GPDECATG_KEY_1 = GPDEPROJ_RECORD.PCN || ADDITEM_RECORD.CN;

            ITRC = ITREAD ('GPDECATG', GPDECATG_KEY_1, '1', ''); 
            IF ITRC = 8   
               THEN GPDECATG_FOUND = '0'B;

            IF GPDECATG_FOUND THEN 
               DO;      
           /*--- CONTINUE CHECKS BASED ON VALUE OF ACTION CODE ---*/ 
           /* CHANGED BY PCGW - 03/14/94 TO CHECK IF ADDITEM.CONTID  */
           /* IS EQUAL TO GPDEPROJ.PCONTID INSTEAD OF CURRENT_CONTID */
                 IF (GPDEPROJ_RECORD.PCONTID = ADDITEM_RECORD.CONTID)
                   THEN DO;
                    ACTION = ADDITEM_RECORD.ACTION;    
                    SELECT;     
                      WHEN (ACTION = 'A')  
                      DO;    
                        CALL ACTION_A;  
                      END;   /* A */ 

                      WHEN (ACTION = 'C') 
                      DO;  
                         CALL ACTION_C; 
                      END;   /* C */    

                      WHEN (ACTION = 'D')
                      DO;   
                         CALL ACTION_D;
                      END;   /* D */  

                    OTHERWISE; 

                   END;   /* SELECT */ 
                 END;   /* IF GPDEPROJ.PCONTID = ADDITEM.CONTID */
               END;   /* IF GPDECATG FOUND DO */
          END;   /* IF  AISTATE ^= Y -- NEXT_ADDITEM: */ 

       ITRC = ITREAD ('ADDITEM ', '', '', ''); 
       IF ITRC = 8     
          THEN ADDITEM_FOUND = '0'B;

    END;  /* DO WHILE ADDITEMS FOUND */

    SHELL$MODULE_SEGMENT = SAVE_SEGMENT; 

       /*------NESTED PROCEDURE WITHIN APPLY ADDITEMS----*/  

       ACTION_A : PROC;  

      DCL SAVE_SEGMENT          CHAR (31); 

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'ACTION_A ';

       %IF DEBUGGER = 'ON'    
           %THEN %DO;     
              PUT SKIP LIST ('INSIDE PROCEDURE ',   
                              TRIM(SHELL$MODULE_SEGMENT)); 
           %END;      

          /*--- VERIFY NON-EXISTENCE OF RECORDS TO BE ADDED ---*/
          LOWCOST = '0'B;
          GPDEITEM_FOUND = '1'B;    
          GPDEITEM_KEY   = ADDITEM_RECORD.PCN || 
                           ADDITEM_RECORD.CN  ||    
                           ADDITEM_RECORD.ILINENO; 

         /* CHANGED KEYLEVEL TO 0 - PCGW 3/14/94 */
          ITRC = ITREAD ('GPDEITEM', GPDEITEM_KEY, '0', ''); 
          IF ITRC = 8 THEN  
             GPDEITEM_FOUND = '0'B;  

          /* ERROR MESSAGE CHANGED - SC 10/12/93   */
          /* ERROR MESSAGE CHANGED - PCGW 03/15/94 */
          IF GPDEITEM_FOUND THEN 
             DO;   
                ERROR_TYPE = ('ADDENDUM ADD ITEM ALREADY EXIST FOR'||
                              ' PROJECT '  || ADDITEM_RECORD.PCN   || 
                              ' CATEGORY ' || ADDITEM_RECORD.CN    ||
                              ' ILINENO= ' || ADDITEM_RECORD.ILINENO); 
                CALL BUILD_ERROR_LOG(ERROR_TYPE); 
             END;   

          /*--- VERIFY THE PROPOSAL LINE NUMBER IS NOT BLANK --*/
          ELSE DO;  /* GPDEITEM_FOUND */     
             IF ADDITEM_RECORD.APLINENO = ' ' THEN
                DO;    
                   ERROR_TYPE = ('NO PROPOSAL LINE NUMBER FOUND ' ||  
                                 'WHILE PROCESSING ADDENDUM '     ||
                                 'ITEMS FOR PROJECT ' ||   
                                 ADDITEM_RECORD.PCN); 
                   CALL BUILD_ERROR_LOG(ERROR_TYPE);
                END;    

          /*--- IF NO EXCEPTIONS ADD THE ADDITEM TO THE ITEM FILE ---*/
          /*--- READ ITEMLIST TO ACCESS UNIT INFORMATION          ---*/
             ELSE      
                DO;   /* APLINENO = ' ' */
                   RECORD_LOCKED = '0'B;
                   ITEMLIST_KEY  = ADDITEM_RECORD.ADITEM||
                                   GPDEPROJ_RECORD.PSPECYR;
                   ITEMLIST_FOUND = '1'B;

                   /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
                   ITRC = ITREAD('ITEMLIST', ITEMLIST_KEY,'0','');
                   IF ITRC = 8 THEN
                      ITEMLIST_FOUND = '0'B;

        /* CHANGED ERROR MESSAGE - 10/12/93 SC */

                   IF ^ITEMLIST_FOUND THEN 
                      DO;  
                         ERROR_TYPE = ('NO ITEMLIST RECORD ' ||  
                                       ' FOR PROJECT ' || 
                                       GPDEPROJ_RECORD.PCN || 
                                       ' FOR ADDENDUM ITEM '||
                                       ADDITEM_RECORD.ADITEM ||
                                       ' SPEC YEAR ' || 
                                       GPDEPROJ_RECORD.PSPECYR);
                         CALL BUILD_ERROR_LOG(ERROR_TYPE);
                       END;  

          /*--- CALCULATE EXTENDED AMOUNT FOR ADDENDUM ITEM ---*/ 
          /*--- IF REVISED PRICE IS NOT BLANK, USE IT       ---*/
                   ELSE 
                      DO;  /* ITEMLIST_FOUND */
                        IF ADDITEM_RECORD.APRICER ^= ' ' THEN
                            DO;
                               PRICE = C$D13V5(ADDITEM_RECORD.APRICER);
                               REV_PRICE = PRICE;
                            END;
                         ELSE
                             DO;
                               PRICE = C$D13V5(ADDITEM_RECORD.APRICE);
                               REV_PRICE = 0;
                             END;

                         OVERFLOW = '0'B;

                         IF (ITEMLIST_RECORD.IUNITS = 'LS'  &amp
                             ITEMLIST_RECORD.IUNITSLS = ' ') THEN
                             QUANTITY = 1;
                         ELSE
                          DO;
                           TEMP_QUANTITY = 
                                         C$D12V3(ADDITEM_RECORD.AQTY);
                           QUANTITY      = TEMP_QUANTITY;
                          END;

              /* ADDED BY PCGW - 920910-3201 - CHECK FOR BIDTAB */
              /* DATA IF PJSOURCE='L'.  USE BID DATA IF LASGFDE */
                         IF GPDEPROJ_RECORD.PJSOURCE = 'L' THEN
                           DO;
                             LETPROP_FOUND = '1'B;
                             ITRC = ITREAD('LETPROP',
                                      ADDITEM_RECORD.CONTID,'1','');
                             IF ITRC = 8 THEN
                                LETPROP_FOUND = '0'B;
                             IF LETPROP_FOUND THEN
                                DO;
                                  BIDTABS_KEY=LETPROP_RECORD.LETTING||
                                              LETPROP_RECORD.CALL   ||
                                              LETPROP_RECORD.AVENDOR||
                                              'L'||
                                              ADDITEM_RECORD.APLINENO;
                                  CALL GET_BIDTABS; /*DIRECT = READ*/
                                  IF BIDTABS_FOUND THEN
                                     IF BIDTABS_RECORD.BTLOWCST = 'Y'
                                       THEN DO;
                                         LOWCOST = '1'B;
                                         PRICE = C$D13V5
                                             (BIDTABS_RECORD.BIDPRICE);
                                         REV_PRICE = 0;
                                       END;  /* LOWCOST ITEM */
                                END;  /* LETPROP_FOUND */
                           END;   /* IF PJSOURCE=L DO */

                         EXTAMT = MULTIPLY(PRICE,QUANTITY,15,5);

                         IF OVERFLOW THEN
                            EXTAMT = 999999999;

                  GPDEITEM_RECORD.PCN       = GPDEPROJ_RECORD.PCN;
                  GPDEITEM_RECORD.CN        = ADDITEM_RECORD.CN;
                  GPDEITEM_RECORD.ILINENO   = ADDITEM_RECORD.ILINENO;
                  GPDEITEM_RECORD.PITYPE    = ' ';
                  GPDEITEM_RECORD.CMOD      = ' ';
                  GPDEITEM_RECORD.IALT      = ADDITEM_RECORD.AIALT;
                  GPDEITEM_RECORD.EIITEM    = ADDITEM_RECORD.ADITEM;
                  GPDEITEM_RECORD.ISUPDES   = ADDITEM_RECORD.ASUPDES;
                  GPDEITEM_RECORD.ISUPDES2  = ADDITEM_RECORD.ASUPDES2;
                  GPDEITEM_RECORD.IPLINENO  = ADDITEM_RECORD.APLINENO;
                  GPDEITEM_RECORD.IPRPDES   = ' ';

                  TEMP_QUANTITY             = QUANTITY;
                  GPDEITEM_RECORD.IQTY      = D12V3$C(TEMP_QUANTITY);

                  TEMP_PRICE                = PRICE;
                  GPDEITEM_RECORD.IPRICE    = D13V5$C(TEMP_PRICE);

                  TEMP_REV_PRICE            = REV_PRICE;
                  GPDEITEM_RECORD.IPRICER   = D13V5$C(TEMP_REV_PRICE);

                  GPDEITEM_RECORD.IPSOURC   = ADDITEM_RECORD.APSOURC;
                  GPDEITEM_RECORD.IPRLOCK   = ADDITEM_RECORD.APRLOCK;
                  GPDEITEM_RECORD.ICOMBINE  = ADDITEM_RECORD.ACOMBINE;
                  GPDEITEM_RECORD.INONPAR   = ADDITEM_RECORD.ANONPAR; 
                  GPDEITEM_RECORD.IFIXED    = ADDITEM_RECORD.AFIXED;  
                  GPDEITEM_RECORD.ISTATE    = ADDITEM_RECORD.AISTATE; 
                  GPDEITEM_RECORD.ICDE1     = ADDITEM_RECORD.AICDE1;  

                  TEMP_EXTAMT               = EXTAMT;
                  GPDEITEM_RECORD.IEXTAMT   = D11V2$C(TEMP_EXTAMT);

                 /* ADDED BY PCGW - IF THE PRICE CAME FROM BIDTABS */
                 /* THEN SET THE LOWCOST FLAG TO Y, ELSE SET TO N  */
                  IF LOWCOST THEN
                     GPDEITEM_RECORD.ILOWCOST  = 'Y';
                  ELSE
                     GPDEITEM_RECORD.ILOWCOST  = 'N';
                  GPDEITEM_RECORD.IUNITS    = ITEMLIST_RECORD.IUNITS;
                  GPDEITEM_RECORD.IUNITSLS  = ITEMLIST_RECORD.IUNITSLS;
                  GPDEITEM_RECORD.IDESCRL   = ITEMLIST_RECORD.IDESCRL;
                  GPDEITEM_RECORD.IDESCL2   = ITEMLIST_RECORD.IDESCL2;
                  GPDEITEM_RECORD.ALTITMID  = ITEMLIST_RECORD.ALTITMID;

                         ITRC = ITWRITE ('GPDEITEM', '');
                      END;  /* ELSE DO -- ^ITEMLIST_FOUND */
                            /* REVISED PRICE NOT BLANK */
                END;  /* ELSE DO -- APLINENO = ' ' */
                      /* READ ITEMLIST */
          END;   /* ELSE DO -- READ GPDEITEM */

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

       END ACTION_A;

       /*------------------------------------------------*/

       ACTION_C : PROC;

      DCL SAVE_SEGMENT          CHAR (31); 

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;  
      SHELL$MODULE_SEGMENT = 'ACTION_C ';  

       %IF DEBUGGER = 'ON' 
           %THEN %DO; 
              PUT SKIP LIST ('INSIDE PROCEDURE ', 
                              TRIM(SHELL$MODULE_SEGMENT));
           %END; 

          /*--- VERIFY EXISTENCE OF ITEM RECORDS TO BE CHANGED ---*/

          GPDEITEM_FOUND = '1'B;  
          GPDEITEM_KEY   = GPDEPROJ_RECORD.PCN || 
                           ADDITEM_RECORD.CN ||    
                           ADDITEM_RECORD.ILINENO; 

          /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
          ITRC = ITREAD ('GPDEITEM',GPDEITEM_KEY, '0', '');
          IF ITRC = 8 
             THEN GPDEITEM_FOUND = '0'B;

          IF ^GPDEITEM_FOUND THEN    
             DO;   
                ERROR_TYPE = ('NO ESTIMATE ITEM RECORD TO CHANGE ' ||
                              'FOR PROJECT '|| ADDITEM_RECORD.PCN ||
                              ' CATEGORY '   || ADDITEM_RECORD.CN  ||
                              ' ADDENDUM ITEM ' || 
                                ADDITEM_RECORD.ILINENO); 
                CALL BUILD_ERROR_LOG(ERROR_TYPE); 
             END; 

          /*--- CHANGE ITEM FILE FIELDS ---*/ 
          ELSE   
             DO; 

   /*-----------------SC 10/06/93 --------------------------------*/
   /* THIS HAS BEEN ADDED TO MAKE SURE THE ITEM UNIT IS CHANGED   */
   /* WHEN THERE IS AN ADDENDUM ITEM CHANGE, SO THAT IF A         */
   /* DETAILED COST ESTIMATE IS RUN AFTER THE ADDENDUM CHANGE THE */
   /* ITEM REFLECTS THE CHANGE OF UNITS.                          */
   /*-------------------------------------------------------------*/

                ITEMLIST_FOUND = '1'B;
                ITEMLIST_KEY = ADDITEM_RECORD.ADITEM ||
                               GPDEPROJ_RECORD.PSPECYR;

    /* MAY BE TAKE OUT 'GE' -----&gt SC 10/15/93 */
    /* ADDED KEYLEVEL 0 TO ITREAD ITEMLIST -- PCGW 03/15/94 */
                ITRC = ITREAD ('ITEMLIST', ITEMLIST_KEY, '0', '');
                
                IF (ITRC = 8) THEN
                  ITEMLIST_FOUND = '0'B;

                IF (ITEMLIST_FOUND) THEN
                   DO;
                     GPDEITEM_RECORD.IUNITS = ITEMLIST_RECORD.IUNITS;
                     GPDEITEM_RECORD.IUNITSLS = 
                                            ITEMLIST_RECORD.IUNITSLS;
                   END;

                IF (GPDEITEM_RECORD.IUNITS = 'LS'  &amp 
                    GPDEITEM_RECORD.IUNITSLS = ' ') THEN
                   QUANTITY = 1;
                ELSE
                  DO;
                   TEMP_QUANTITY = C$D12V3(ADDITEM_RECORD.AQTY);
                   QUANTITY      = TEMP_QUANTITY; 
                  END; 

                IF ADDITEM_RECORD.APRICER ^= ' ' THEN  
                   DO;  
                      TEMP_PRICE = C$D13V5(ADDITEM_RECORD.APRICER);
                      PRICE      = TEMP_PRICE; 
                      REV_PRICE  = PRICE; 
                   END; 
                ELSE 
                   DO;
                      TEMP_PRICE = C$D13V5(ADDITEM_RECORD.APRICE); 
                      PRICE      = TEMP_PRICE;
                      REV_PRICE  = 0; 
                   END; 

                OVERFLOW = '0'B; 

                IF OVERFLOW THEN  
                   EXTAMT = 999999999;

                GPDEITEM_RECORD.EIITEM   = ADDITEM_RECORD.ADITEM; 
                GPDEITEM_RECORD.IALT     = ADDITEM_RECORD.AIALT; 

                TEMP_QUANTITY            = QUANTITY;   
                GPDEITEM_RECORD.IQTY     = D12V3$C(TEMP_QUANTITY);

                /* ONLY ASSIGN GPDEITEM_RECORD.IPRICE A VALUE    */
                /* IF THE PROJECT CAME FROM PES.  IF THE PROJECT */
                /* IS FROM LAS, KEEP THE IPRICE, BECAUSE IT IS   */
                /* A BIDTAB PRICE AND NOT AN ESTIMATED PRICE AS  */
                /* IS ADDITEM_RECORD.APRICE.                     */

                IF GPDEPROJ_RECORD.PJSOURCE = 'P' THEN
                   DO; 
                      TEMP_PRICE             = PRICE; 
                      GPDEITEM_RECORD.IPRICE = D13V5$C(TEMP_PRICE);
                   END;      
                ELSE 
                   DO;  
                      TEMP_PRICE = C$D13V5(GPDEITEM_RECORD.IPRICE);
                      PRICE      = TEMP_PRICE;  
                   END; 

                EXTAMT   = MULTIPLY(PRICE, QUANTITY, 11,2); 

                TEMP_REV_PRICE           = REV_PRICE;  
                GPDEITEM_RECORD.IPRICER  = D13V5$C(TEMP_REV_PRICE);

                GPDEITEM_RECORD.INONPAR  = ADDITEM_RECORD.ANONPAR; 
                GPDEITEM_RECORD.ISTATE   = ADDITEM_RECORD.AISTATE; 

                TEMP_EXTAMT              = EXTAMT;
                GPDEITEM_RECORD.IEXTAMT  = D11V2$C(TEMP_EXTAMT); 

                GPDEITEM_RECORD.ISUPDES  = ADDITEM_RECORD.ASUPDES;
                GPDEITEM_RECORD.ISUPDES2 = ADDITEM_RECORD.ASUPDES2;

                ITRC = ITWRITE ('GPDEITEM', ''); 
                IF (ITRC ^= 0 &amp ITRC ^= 8) THEN  
                   CALL FATAL_ERROR('PROGRAM ',
                               'UNABLE TO UPDATE GPDEITEM');
             END;   /* ELSE DO -- CHANGE ITEMS FILEDS */ 

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;  

       END ACTION_C;    

       /*------------------------------------------------*/

       ACTION_D : PROC;

      DCL SAVE_SEGMENT          CHAR (31);

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'ACTION_D '; 

       %IF DEBUGGER = 'ON'
           %THEN %DO; 
              PUT SKIP LIST ('INSIDE PROCEDURE ', 
                              TRIM(SHELL$MODULE_SEGMENT));
           %END; 
          /*- VERIFY EXISTENCE OF GPDEITEM RECORDS TO BE DELETED -*/
          GPDEITEM_FOUND = '1'B;

          GPDEITEM_KEY   = GPDEPROJ_RECORD.PCN ||
                           ADDITEM_RECORD.CN ||  
                           ADDITEM_RECORD.ILINENO;

          /* PCGW 94/08/26 CHANGE KEYLEVEL FROM '' TO '0' */
          ITRC = ITREAD ('GPDEITEM', GPDEITEM_KEY, '0', '');
          IF ITRC = 8
             THEN GPDEITEM_FOUND = '0'B; 

          /* IF THE ITEM IS NOT FOUND, PRINT AN ERROR MESSAGE  */
          /* IN THE ERROR_LOG ONLY IF THE PROJECT IS FROM PES. */
          /* IF THE PROJECT IS FROM LAS, THE ITEM MAY NOT BE   */
          /* THE GPDEITEM FILE BECAUSE IT WAS NOT A LOWCOST    */
          /* ITEM.  THEREFORE, NO ERROR MESSAGE IS NECESSARY.  */

          IF ^GPDEITEM_FOUND THEN
             IF GPDEPROJ_RECORD.PJSOURCE = 'P' THEN
                DO;
                   ERROR_TYPE = ('NO ESTIMATE ITEM RECORD TO DELETE '||
                                 'FOR PROJECT '||GPDEPROJ_RECORD.PCN ||
                                 ' CATEGORY '  ||ADDITEM_RECORD.CN   ||
                                 ' ADDENDUM ITEM '|| 
                                   ADDITEM_RECORD.ILINENO);
                   CALL BUILD_ERROR_LOG(ERROR_TYPE);
                END;
             ELSE;
                /* DO NOTHING; MISSING GPDEITEM IS OK. */
          ELSE
             IF GPDEITEM_FOUND THEN
                ITRC = ITDEL ('GPDEITEM',GPDEITEM_KEY, '' ,'');

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

       END ACTION_D;

       /*----END NESTED PROCEDURE WITHIN APPLY ADDITEMS--*/ 

  END APPLY_ADDITEMS; 
    /*---------END NESTED PROCEDURE WITHIN PROCESS ADDITEMS -------*/

 END PROCESS_ADDITEMS;

 /*----------------------------------------------------------------*/
 /*                         FREE PCN LIST                          */
 /*----------------------------------------------------------------*/

 FREE_PCN_LIST: PROC;

      DCL SAVE_SEGMENT          CHAR (31); 

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT; 
      SHELL$MODULE_SEGMENT = 'FREE_PCN_LIST '; 

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;

          /*- VERIFY EXISTENCE OF GPDEITEM RECORDS TO BE DELETED -*/
          GPDEITEM_FOUND = '1'B;

    DO WHILE (PCN_LIST_TOP ^=NULL); 
       PLIST = PCN_LIST_TOP -&gt PCN_LIST_NODE.NEXT_PTR;
       FREE PCN_LIST_TOP -&gt PCN_LIST_NODE;
       PCN_LIST_TOP = PLIST;
    END;

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

    PCN_LIST_END = NULL;

 END FREE_PCN_LIST;

 /*----------------------------------------------------------------*/
 /*                         DUMP PCN LIST                          */
 /*----------------------------------------------------------------*/

 DUMP_LIST: PROC;

    PLIST = PCN_LIST_TOP;
    DO WHILE (PLIST ^=NULL);
       BUFFER = PLIST-&gtPCN_LIST_NODE.PCN    || '=PCN   '||
                PLIST-&gtPCN_LIST_NODE.DTLFLG || '=DTLFLG'; 
       PLIST = PLIST -&gt PCN_LIST_NODE.NEXT_PTR;
       PUT SKIP LIST (BUFFER);
    END;

 END DUMP_LIST;


 /*--------------------------------------------------------------*/
 /*-------END OF NESTED PROCEDURES WITHIN BUILD_GPDEFILES--------*/
 /*--------------------------------------------------------------*/

 END BUILD_GPDEFILES;

 /*----------------------------------------------------------------*/
 /*                       BUILD ERROR LOG                          */
 /*----------------------------------------------------------------*/

 BUILD_ERROR_LOG: PROC(ERROR_TYPE);

     DCL     ERROR_TYPE                    CHAR (132);
     DCL     SAVE_SEGMENT                  CHAR (31);


     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'BUILD_ERROR_LOG'; 

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;

     ERROR = '1'B;
     LOG_BUFFER = 'WARNING - ' || ERROR_TYPE;
     PUT FILE (EXCEPTION) SKIP (2) EDIT
         (LOG_BUFFER)
         (COL(3),A,COL(25),A);

     SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END BUILD_ERROR_LOG;


 /*----------------------------------------------------------------*/
 /*                  FREE PROCESSED PCN LIST                       */
 /*----------------------------------------------------------------*/

 FREE_PROCESSED_PCN_LIST: PROC;

      DCL SAVE_SEGMENT          CHAR (31);

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'FREE_PROCESSED_PCN_LIST ';

       %IF DEBUGGER = 'ON'
           %THEN %DO; 
              PUT SKIP LIST ('INSIDE PROCEDURE ', 
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;

    /* THIS PROCESS FREES THE PROCESSED PCN LIST 
       AFTER ALL GPDEFILES HAVE BEEN BUILT       */


    DO WHILE (PROCESSED_PCN_LIST_TOP ^=NULL);
       PROCESSED_PLIST = PROCESSED_PCN_LIST_TOP -&gt 
                         PROCESSED_PCN_LIST_NODE.NEXT_PTR; 
       FREE PROCESSED_PCN_LIST_TOP -&gt PROCESSED_PCN_LIST_NODE;
       PROCESSED_PCN_LIST_TOP = PROCESSED_PLIST;
    END;

    PROCESSED_PCN_LIST_END = NULL;

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END FREE_PROCESSED_PCN_LIST;

 /*================================================================*/
 /*================================================================*/
 /*             THE BRAND NEW, NEW AND IMPROVED.....               */
 /*                  CALCULATE LUMP SUMS !!!!!                     */
 /*================================================================*/
 /*    I HAVE MOVED BUILD_ERROR_LOG OUTSIDE OF THE PROCEDURE       */
 /*    BUILD_GPDEFILES SO THAT I COULD USE IT IN THIS PROCEDURE    */
 /*    TO CAPTURE ERRORS.                                          */
 /*================================================================*/
 
 CALCULATE_LUMP_SUMS: PROC;

      DCL SAVE_SEGMENT          CHAR (31);

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'CALCULATE_LUMP_SUMS ';

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;

   DCL   CONTID_FOUND                   BIT,
         PROPPROJ_CONTID                CHAR(15);

   /*---- HYBRID LS NODE ---*/
   DCL (LS_NODE,
        HYBRID_TOP)          POINTER;

   DCL 1 HYBRID_NODE         BASED,
         2 PCN               CHAR (13),
         2 CN                CHAR (4),
         2 CONTID            CHAR (15),
         2 PILINENO          CHAR (4),
         2 LINE              CHAR (4),
         2 PIITEM            CHAR (13),
         2 PISUPDES          CHAR (40),
         2 PISUPDE2          CHAR (40),
         2 INONPAR           CHAR (6), 
         2 PIQTY             FIXED DEC (12,3),
         2 TOTAL_QTY         FIXED DEC (14,5),
         2 PRICE             FIXED DEC (13,5),
         2 BIDPRICE          FIXED DEC (13,5), /* ADDED */
         2 PIEXTAMT          FIXED DEC (11,2), /* ADDED */
         2 TYPE              CHAR (2),
         2 PICDE1            CHAR (4), 
         2 NEXT_CN           POINTER,
         2 NEXT_HYBRID       POINTER;

   IF LASSRCE = 'Y' THEN
      DO;
         CALL BUILD_HYBRID_LIST(HYBRID_TOP);
         CALL PROCESS_LUMPS_AND_HYBRIDS(HYBRID_TOP);
         CALL FREE_HYBRID_LIST;
      END;   /* IF LASSRCE = Y DO */

 /*--------- NESTED PROCEDURES WITHIN CALCULATE_LUMP_SUMS ---------*/

 /*----------------------------------------*/
 /*      BUILD HYBRID LIST                 */
 /*----------------------------------------*/

  BUILD_HYBRID_LIST : PROC (HYBRID_TOP);

       DCL  HYBRID_TOP       POINTER,
            LS_NODE          POINTER,
            SAVE_SEGMENT     CHAR (31);

     SAVE_SEGMENT=SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'BUILD_HYBRID_LIST';

  %IF DEBUGGER = 'ON'
       %THEN %DO;
          PUT SKIP LIST ('INSIDE OF ',SHELL$MODULE_SEGMENT);
       %END;
 
   HYBRID_TOP = NULL();

   GPDEPROJ_FOUND = '1'B;
   GPDEPROJ_KEY = ' ';

   /* READ GPDEPROJ STARTING FROM TOP, TO GET ALL PROJECTS */
   ITRC = ITREAD ('GPDEPROJ', GPDEPROJ_KEY, '0', 'GE');
   IF ITRC = 8
      THEN GPDEPROJ_FOUND = '0'B;

   GPDEPROJ_KEY = GPDEPROJ_RECORD.PCN;

   DO WHILE (GPDEPROJ_FOUND);
     IF GPDEPROJ_RECORD.PJSOURCE = 'L' THEN
       DO;
           /* IF VIEW = LETTINGS, THE LETPROP FILE IS THE
              SUBSET FILE; THEREFORE, THE LETPROP RECORD NEEDED
              TO READ BIDTABS &amp PROPITEM, TO CALCULATE LUMP SUMS
              WILL BE READ FROM THE LETPROP FILE (NOT SUBSET)    */
 
         RECORD_LOCKED = '0'B;
         PROPPROJ_FOUND = '1'B;
         ITRC = ITREAD ('PROPPROJ',GPDEPROJ_RECORD.PCN,'1','');
         IF ITRC = 8
            THEN PROPPROJ_FOUND = '0'B;

   /* IF CONTID NOT IN LIST */
         CONTID_FOUND= CONTID_IN_LS(HYBRID_TOP,PROPPROJ_RECORD.CONTID);
         IF (PROPPROJ_FOUND &amp CONTID_FOUND = '0'B) 
           THEN DO;

             CALL PROCESS_PROJECTS;

           END;   /* IF CONTID = '0'B DO */
       END;   /* IF PJSOURCE = L DO */
     ITRC = ITREAD ('GPDEPROJ','','',''); /* NEXT GPDE PROJECT */
     IF ITRC = 8
        THEN GPDEPROJ_FOUND = '0'B;
   END;   /* DO WHILE GPDEPROJ */

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;


      /*----- NESTED PROCEDURES WITHIN BUILD_HYBRID_LIST -----*/

 /*----------------------------------------*/
 /*      CHECK HYBRID LUMP SUMS            */
 /*----------------------------------------*/
  CONTID_IN_LS : PROC(HYBRID_TOP,CONTID) RETURNS (BIT (1));

       DCL  HYBRID_TOP       POINTER,
            TEMP             POINTER,
            CONTID           CHAR(15),
            CONTID_FOUND     BIT INIT('0'B),
            LS_NODE          POINTER,
            SAVE_SEGMENT     CHAR (31);

       SAVE_SEGMENT=SHELL$MODULE_SEGMENT;
       SHELL$MODULE_SEGMENT = 'CONTID_IN_LS';

  %IF DEBUGGER = 'ON'
       %THEN %DO;
          PUT SKIP LIST ('INSIDE OF ',SHELL$MODULE_SEGMENT);
       %END;

      TEMP = HYBRID_TOP;

      IF HYBRID_TOP = NULL THEN
         CONTID_FOUND = '0'B;
      ELSE
         DO WHILE (TEMP ^= NULL &amp CONTID_FOUND = '0'B);              
            IF (TEMP-&gtHYBRID_NODE.CONTID = CONTID) THEN
               CONTID_FOUND = '1'B;
            TEMP = TEMP-&gtNEXT_HYBRID;
         END;   /* DO WHILE */
      RETURN (CONTID_FOUND);

     SHELL$MODULE_SEGMENT=SAVE_SEGMENT;

  END CONTID_IN_LS;

 /*----------------------------------------*/
 /*     PROCESS PROJECTS                   */
 /*----------------------------------------*/

  PROCESS_PROJECTS : PROC ;

       DCL SAVE_SEGMENT     CHAR (31);

       SAVE_SEGMENT=SHELL$MODULE_SEGMENT;
       SHELL$MODULE_SEGMENT = 'PROCESS_PROJECTS';

  %IF DEBUGGER = 'ON'
       %THEN %DO;
          PUT SKIP LIST ('INSIDE OF ',SHELL$MODULE_SEGMENT);
       %END;

       PROPPROJ_CONTID = PROPPROJ_RECORD.CONTID; /* SAVE KEY */

   /* GET LETPROP */ 
       LETPROP_FOUND = '1'B;
       ITRC = ITREAD('LETPROP',PROPPROJ_CONTID,'1','');
       IF ITRC = 8 THEN
          LETPROP_FOUND = '0'B;                        
       ITRC = ITREAD ('PROPPROJ',PROPPROJ_CONTID,'0','GE');
       IF ITRC = 8
          THEN PROPPROJ_FOUND = '0'B;

   /* FOR EVERY PROJECT OF CONTID */
       DO WHILE (PROPPROJ_FOUND &amp LETPROP_FOUND &amp
                 PROPPROJ_RECORD.CONTID = PROPPROJ_CONTID);

           CALL PROCESS_CATEGORIES;

           ITRC = ITREAD ('PROPPROJ','','','');
           IF ITRC = 8
              THEN PROPPROJ_FOUND = '0'B;
       END;   /* DO WHILE PROPPROJ */
     SHELL$MODULE_SEGMENT=SAVE_SEGMENT;

  END PROCESS_PROJECTS;

 /*----------------------------------------*/
 /*     PROCESS CATEGORIES                 */
 /*----------------------------------------*/

  PROCESS_CATEGORIES : PROC ;

       DCL SAVE_SEGMENT     CHAR (31);

       SAVE_SEGMENT=SHELL$MODULE_SEGMENT;
       SHELL$MODULE_SEGMENT = 'PROCESS_CATEGORIES';

  %IF DEBUGGER = 'ON'
       %THEN %DO;
          PUT SKIP LIST ('INSIDE OF ',SHELL$MODULE_SEGMENT);
       %END;

       ESTCATG_FOUND = '1'B;
       ESTCATG_KEY = PROPPROJ_RECORD.PCN;
       ITRC = ITREAD('ESTCATG',ESTCATG_KEY,'0','GE');
       IF ITRC = 8 THEN
          ESTCATG_FOUND = '0'B;
       DO WHILE (ESTCATG_FOUND &amp ESTCATG_RECORD.PCN = 
                                 PROPPROJ_RECORD.PCN);
          CALL PROCESS_ITEMS;

          ITRC = ITREAD('ESTCATG','','','');
          IF ITRC = 8 THEN
             ESTCATG_FOUND = '0'B;
       END;   /* DO WHILE ESTCATG */

  END PROCESS_CATEGORIES;

 /*----------------------------------------*/
 /*     PROCESS ITEMS                      */
 /*----------------------------------------*/

  PROCESS_ITEMS : PROC ;

       DCL SAVE_SEGMENT     CHAR (31);

       SAVE_SEGMENT=SHELL$MODULE_SEGMENT;
       SHELL$MODULE_SEGMENT = 'PROCESS_ITEMS';

  %IF DEBUGGER = 'ON'
       %THEN %DO;
          PUT SKIP LIST ('INSIDE OF ',SHELL$MODULE_SEGMENT);
       %END;

       ESTITEM_FOUND = '1'B;
       ESTITEM_KEY = PROPPROJ_RECORD.PCN || ESTCATG_RECORD.CN;
       ITRC = ITREAD('ESTITEM',ESTITEM_KEY,'0','GE');
       IF ITRC = 8 THEN
          ESTITEM_FOUND = '0'B;
       /* FOR EACH ESTITEM */
       DO WHILE (ESTITEM_FOUND &amp 
                 ESTITEM_RECORD.PCN = PROPPROJ_RECORD.PCN &amp
                 ESTITEM_RECORD.CN  = ESTCATG_RECORD.CN);
         /* GET PROPITEM */
         PROPITEM_FOUND = '1'B;
         PROPITEM_KEY = PROPPROJ_RECORD.CONTID || 'L' ||
                        ESTITEM_RECORD.IPLINENO;
         ITRC = ITREAD ('PROPITEM',PROPITEM_KEY,'0','');
         IF ITRC = 8 THEN  
            PROPITEM_FOUND = '0'B;

         IF (PROPITEM_FOUND &amp 
             (PROPITEM_RECORD.PIHYBRID = 'Y' |
              PROPITEM_RECORD.PILUMP = 'Y') ) THEN
            DO;
               /* GET BIDTABS */
               BIDTABS_FOUND = '1'B;
               BIDTABS_KEY = LETPROP_RECORD.LETTING ||
                                         LETPROP_RECORD.CALL    ||
                                         LETPROP_RECORD.AVENDOR ||'L' 
                                         || PROPITEM_RECORD.IPLINENO;
               ITRC = ITREAD('BIDTABS',BIDTABS_KEY,'0','');
               IF ITRC = 8 THEN 
                  BIDTABS_FOUND = '0'B;
               IF (BIDTABS_FOUND &amp 
                   BIDTABS_RECORD.BTLOWCST = 'Y') THEN

                   CALL ADD_TO_LIST (HYBRID_TOP);

            END;   /* IF PROPITEM FOUND DO */

          ITRC = ITREAD('ESTITEM','','','');
          IF ITRC = 8 THEN
             ESTITEM_FOUND = '0'B;
       END;   /* DO WHILE ESTITEM */

  END PROCESS_ITEMS;
 /*----------------------------------------*/
 /*     ALLOCATE HYBRID NODE               */
 /*----------------------------------------*/
  ADD_TO_LIST : PROC (HYBRID_TOP);

       DCL  HYBRID_TOP       POINTER,
            LS_NODE          POINTER,
            SAVE_SEGMENT     CHAR (31),
            CONTID           CHAR(15);

       SAVE_SEGMENT=SHELL$MODULE_SEGMENT;
       SHELL$MODULE_SEGMENT = 'ADD_TO_LIST';

  %IF DEBUGGER = 'ON'
       %THEN %DO;
          PUT SKIP LIST ('INSIDE OF ',SHELL$MODULE_SEGMENT);
       %END;

       CALL ALLOCATE_NODE(LS_NODE);
       CALL INSERT_NODE (LS_NODE,HYBRID_TOP);

       SHELL$MODULE_SEGMENT=SAVE_SEGMENT;

 /*----------------------------------------*/
 /*          ALLOCATE NODE                 */
 /*----------------------------------------*/

  ALLOCATE_NODE: PROC(LS_NODE);

        DCL LS_NODE      POINTER,
            SAVE_SEGMENT CHAR (31);

     SAVE_SEGMENT=SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'ALLOCATE_NODE';

  %IF DEBUGGER = 'ON'
       %THEN %DO;
          PUT SKIP LIST ('INSIDE OF ',SHELL$MODULE_SEGMENT);
       %END;

        ALLOCATE HYBRID_NODE SET (LS_NODE);
        LS_NODE-&gtHYBRID_NODE.PCN      = ESTITEM_RECORD.PCN;
        LS_NODE-&gtHYBRID_NODE.CN       = ESTITEM_RECORD.CN; 
        LS_NODE-&gtHYBRID_NODE.CONTID   = PROPITEM_RECORD.CONTID; 
        LS_NODE-&gtHYBRID_NODE.PILINENO = ESTITEM_RECORD.IPLINENO;
        LS_NODE-&gtHYBRID_NODE.LINE     = ESTITEM_RECORD.ILINENO;
        LS_NODE-&gtHYBRID_NODE.PIITEM   = ESTITEM_RECORD.EIITEM; 
        LS_NODE-&gtHYBRID_NODE.PISUPDES = ESTITEM_RECORD.IPRPDES;
        LS_NODE-&gtHYBRID_NODE.PISUPDE2 = ESTITEM_RECORD.ISUPDES2;
        LS_NODE-&gtHYBRID_NODE.INONPAR  = ESTITEM_RECORD.INONPAR;
        LS_NODE-&gtHYBRID_NODE.PIQTY    =
                             C$D12V3(ESTITEM_RECORD.IQTY);
        /* THIS IS TO START TOTALING QUANTITIES */
        LS_NODE-&gtHYBRID_NODE.TOTAL_QTY = LS_NODE-&gtHYBRID_NODE.PIQTY;
        LS_NODE-&gtHYBRID_NODE.PRICE    =
                             C$D13V5(ESTITEM_RECORD.IPRICE);
        LS_NODE-&gtHYBRID_NODE.BIDPRICE =
                             C$D13V5(BIDTABS_RECORD.BIDPRICE);
        LS_NODE-&gtHYBRID_NODE.PIEXTAMT = 
                             C$D11V2(PROPITEM_RECORD.PIEXTAMT);
        IF PROPITEM_RECORD.PIHYBRID = 'Y' THEN
           LS_NODE-&gtHYBRID_NODE.TYPE     = 'HY';    /* HYBRID */
        ELSE
           LS_NODE-&gtHYBRID_NODE.TYPE     = 'LS';    /*  LUMP  */

        LS_NODE-&gtHYBRID_NODE.PICDE1   = ESTITEM_RECORD.ICDE1;

        LS_NODE-&gtHYBRID_NODE.NEXT_CN       = NULL;

        LS_NODE-&gtHYBRID_NODE.NEXT_HYBRID   = NULL;

     SHELL$MODULE_SEGMENT=SAVE_SEGMENT;

  END ALLOCATE_NODE;

 /*----------------------------------------*/
 /*     INSERT NODE INTO HYBRID LIST       */
 /*----------------------------------------*/

  INSERT_NODE: PROC(LS_NODE,HYBRID_TOP);

     DCL (LS_NODE,
          HYBRID_TOP) POINTER,
          SAVE_SEGMENT CHAR (31);

     SAVE_SEGMENT=SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'INSERT_HYBRID';

  %IF DEBUGGER = 'ON'
       %THEN %DO;
          PUT SKIP LIST ('INSIDE OF ',SHELL$MODULE_SEGMENT);
       %END;

      IF HYBRID_TOP = NULL THEN 

         HYBRID_TOP = LS_NODE;

      ELSE 
         CALL INSERT_BY_CONTID(LS_NODE,HYBRID_TOP);

      SHELL$MODULE_SEGMENT=SAVE_SEGMENT;

  END INSERT_NODE;

 /*----------------------------------------*/
 /*     INSERT INTO LIST BY CONTID         */
 /*----------------------------------------*/

  INSERT_BY_CONTID: PROC(LS_NODE,HYBRID_TOP);

     DCL (LS_NODE,
          HYBRID_TOP ) POINTER,
          SAVE_SEGMENT CHAR (31);

     SAVE_SEGMENT=SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'INSERT_BY_CONTID';

  %IF DEBUGGER = 'ON'
       %THEN %DO;
          PUT SKIP LIST ('INSIDE OF ',SHELL$MODULE_SEGMENT);
       %END;

      IF HYBRID_TOP = NULL THEN 
         HYBRID_TOP = LS_NODE;
      ELSE 
         DO;
           IF (HYBRID_TOP-&gtHYBRID_NODE.CONTID &lt
               LS_NODE-&gtHYBRID_NODE.CONTID) THEN
              CALL INSERT_BY_CONTID (LS_NODE,
                          HYBRID_TOP-&gtHYBRID_NODE.NEXT_HYBRID);
           ELSE 
              DO;
                IF (HYBRID_TOP-&gtHYBRID_NODE.CONTID =
                                LS_NODE-&gtHYBRID_NODE.CONTID) THEN
                   DO;
                      CALL INSERT_BY_IPLINENO(LS_NODE,HYBRID_TOP);
                   END;
                ELSE     /* HYB.CONTID &gt LS.CONTID */
                   DO;
                     LS_NODE-&gtNEXT_HYBRID = HYBRID_TOP;
                     HYBRID_TOP = LS_NODE; 
                   END;   /* ELSE DO IT'S &gt */
              END;   /* ELSE DO IF = */
         END;   /* ELSE DO IF &lt */ 

      SHELL$MODULE_SEGMENT=SAVE_SEGMENT;

  END INSERT_BY_CONTID;

 /*----------------------------------------*/
 /*     INSERT INTO LIST BY IPLINENO       */
 /*----------------------------------------*/

  INSERT_BY_IPLINENO: PROC(LS_NODE,HYBRID_TOP);

     DCL (LS_NODE,
          HYBRID_TOP) POINTER,
          SAVE_SEGMENT CHAR (31);

     SAVE_SEGMENT=SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'INSERT_BY_IPLINENO';

  %IF DEBUGGER = 'ON'
       %THEN %DO;
          PUT SKIP LIST ('INSIDE OF ',SHELL$MODULE_SEGMENT);
       %END;

      IF HYBRID_TOP = NULL THEN 
         HYBRID_TOP = LS_NODE;
      ELSE 
         DO;
           IF (HYBRID_TOP-&gtHYBRID_NODE.PILINENO &lt 
               LS_NODE-&gtHYBRID_NODE.PILINENO &amp
               HYBRID_TOP-&gtHYBRID_NODE.CONTID = 
               LS_NODE-&gtHYBRID_NODE.CONTID) THEN
              CALL INSERT_BY_IPLINENO (LS_NODE,
                          HYBRID_TOP-&gtHYBRID_NODE.NEXT_HYBRID);
           ELSE 
              DO;
                IF (HYBRID_TOP-&gtHYBRID_NODE.PILINENO =
                    LS_NODE-&gtHYBRID_NODE.PILINENO &amp
                    HYBRID_TOP-&gtHYBRID_NODE.CONTID = 
                    LS_NODE-&gtHYBRID_NODE.CONTID) THEN
                   DO;
                      /* ACCUM QTY'S IN THE FIRST NODE */
                      HYBRID_TOP-&gtHYBRID_NODE.TOTAL_QTY = 
                             HYBRID_TOP-&gtHYBRID_NODE.TOTAL_QTY +
                             LS_NODE-&gtHYBRID_NODE.PIQTY;
                            /* INSERT IN FRONT */
                      LS_NODE-&gtHYBRID_NODE.NEXT_CN = 
                               HYBRID_TOP-&gtHYBRID_NODE.NEXT_CN; 
                      HYBRID_TOP-&gtHYBRID_NODE.NEXT_CN = LS_NODE;
                   END;
                ELSE     /* HYB.PILINENO &gt LS.PILINENO */
                   DO;
                     LS_NODE-&gtNEXT_HYBRID = HYBRID_TOP;
                     HYBRID_TOP = LS_NODE; 
                   END;   /* ELSE DO IT'S &gt*/
              END;   /* ELSE DO IF = */
         END;   /* ELSE DO IF &lt */ 

      SHELL$MODULE_SEGMENT=SAVE_SEGMENT;

  END INSERT_BY_IPLINENO;

  END ADD_TO_LIST;

  END BUILD_HYBRID_LIST;


 /*----------------------------------------*/
 /*     PROCESS LUMPS AND HYBRIDS          */
 /*----------------------------------------*/
  PROCESS_LUMPS_AND_HYBRIDS : PROC (HYBRID_TOP);

     DCL  HYBRID_TOP       POINTER,
          LS_NODE          POINTER,
          SAVE_SEGMENT     CHAR (31),
          ROUND_IPLINENO   CHAR (4);

     DCL  PRICE            FIXED DEC (15,6),/*changed*/
          EXTAMT           FIXED DEC (15,6),/*changed*/
          BIDTAB_PRICE     FIXED DEC (15,6),/*changed*/
          ESTITEM_PRICE    FIXED DEC (13,5),
          GPITEM_PRICE     FIXED DEC (13,5),
          GPITEM_QTY       FIXED DEC (13,3),
          PRITEM_EXTAMT    FIXED DEC (12,2),
          TEMP_PRICE       FIXED DEC (13,5),
          PRITEM_QTY       FIXED DEC (13,3),
          TEMP_EXTAMT      FIXED DEC (11,2);

  /* DECLARES FOR THE CHECKING FOR ROUNDING ERRORS */
     DCL  DIFFERENCE       FIXED DEC (11,2),/*change*/
          TOTAL_IEXTAMTS   FIXED DEC (11,2);/*change*/

     SAVE_SEGMENT=SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'PROCESS_LUMPS_AND_HYBRIDS';

  %IF DEBUGGER = 'ON'
       %THEN %DO;
          PUT SKIP LIST ('INSIDE OF ',SHELL$MODULE_SEGMENT);
       %END;

     IF HYBRID_TOP ^= NULL THEN
        DO;

           CALL PROCESSING (HYBRID_TOP);
           CALL PROCESS_LUMPS_AND_HYBRIDS(HYBRID_TOP-&gtNEXT_HYBRID);

        END;
     SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

   /* ---------------------- NESTED PROCEDURES ------------------- */

      /*--------------------------------------------------------*/
      PROCESSING : PROC (HYBRID_TOP);

         DCL HYBRID_TOP            POINTER,
             SAVE_SEGMENT          CHAR (31);

         SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
         SHELL$MODULE_SEGMENT = 'PROCESSING';

  %IF DEBUGGER = 'ON'
       %THEN %DO;
          PUT SKIP LIST ('INSIDE OF ',SHELL$MODULE_SEGMENT);
       %END;

        IF HYBRID_TOP ^= NULL THEN
           DO;
             TOTAL_IEXTAMTS = 0;
             IF (HYBRID_TOP-&gtHYBRID_NODE.TYPE = 'LS') THEN
                CALL LUMP_SUM_CALCULATION(HYBRID_TOP);
             ELSE      /* HYB.TYPE = 'HY' */
                CALL HYBRID_CALCULATION(HYBRID_TOP);
             CALL CHECK_FOR_ROUNDING(HYBRID_TOP);
             CALL UPDATE_GPDEITEM(HYBRID_TOP);
           END;   /* IF HYBRID ^= NULL DO */

         SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
       
      END PROCESSING;

      /*--------------------------------------------------------*/              
      LUMP_SUM_CALCULATION : PROC (HYBRID_TOP); 

      DCL HYBRID_TOP            POINTER,
          TEMP                  POINTER,
          SAVE_SEGMENT          CHAR (31);

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'LUMP_SUM_CALCULATION ';

       %IF DEBUGGER = 'ON'
           %THEN %DO; 
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;

          TEMP = HYBRID_TOP;

          DO WHILE (TEMP ^= NULL);

          /*  THE ALGORITHM FOR THE LUMP SUM CALCULATION IS:
            (BIDTAB_PRICE * ( ESTITEM_PRICE / PROPITEM_EXTAMT) */
             OVERFLOW = '0'B;
             BIDTAB_PRICE  = TEMP-&gtHYBRID_NODE.BIDPRICE;
             ESTITEM_PRICE = TEMP-&gtHYBRID_NODE.PRICE;
             GPITEM_QTY    = TEMP-&gtHYBRID_NODE.PIQTY;
             PRITEM_EXTAMT = TEMP-&gtHYBRID_NODE.PIEXTAMT;
             PRICE  = DIVIDE (ESTITEM_PRICE,PRITEM_EXTAMT,15,6);
             PRICE  = MULTIPLY(BIDTAB_PRICE,PRICE,15,6);
             IF OVERFLOW THEN
                PRICE = 999999999.9999;
  /*QTY=1*/  EXTAMT = MULTIPLY(PRICE,GPITEM_QTY,15,6); 
             
             /* TPS 01/06/92: round price to 2 decimal points */

             PRICE  = ROUND (PRICE,2);
             EXTAMT = ROUND (EXTAMT,2);
             TOTAL_IEXTAMTS = TOTAL_IEXTAMTS + EXTAMT;
             TEMP_PRICE     = PRICE;
             TEMP_EXTAMT    = EXTAMT;
             TEMP-&gtHYBRID_NODE.PRICE    = TEMP_PRICE;
             TEMP-&gtHYBRID_NODE.PIEXTAMT = TEMP_EXTAMT;
             TEMP = TEMP-&gtNEXT_CN;
          END;   /* DO WHILE ^= NULL */

          SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

      END LUMP_SUM_CALCULATION;

      /*--------------------------------------------------------*/

      HYBRID_CALCULATION : PROC (HYBRID_TOP);

      DCL HYBRID_TOP            POINTER,
          TEMP                  POINTER,
          TOT_QTY               FIXED DEC (12,3),
          SAVE_SEGMENT          CHAR (31);

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'HYBRID_CALCULATION';
                                
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;

          TEMP = HYBRID_TOP;

          BIDTAB_PRICE = HYBRID_TOP-&gtHYBRID_NODE.BIDPRICE;
          TOT_QTY      = HYBRID_TOP-&gtHYBRID_NODE.TOTAL_QTY;
          PRICE        = DIVIDE (BIDTAB_PRICE,TOT_QTY,15,6);
          DO WHILE (TEMP ^= NULL);
           /* THE ALGORITHM FOR HYBRIDS IS THE BIDTAB PRICE
              DIVIDED BY THE SUM(ESTITEM QUANTITIES).       */
             OVERFLOW = '0'B;
             GPITEM_QTY   = TEMP-&gtHYBRID_NODE.PIQTY;
             EXTAMT       = MULTIPLY(PRICE,GPITEM_QTY,15,6);
             IF OVERFLOW THEN
                EXTAMT = 999999999.9999;
             TEMP-&gtHYBRID_NODE.PIQTY    = 1.000;
             
             /* TPS 01/06/92: round price to 2 decimal points */

             EXTAMT                     = ROUND (EXTAMT,2);
             TEMP-&gtHYBRID_NODE.PRICE    = EXTAMT;
             TOTAL_IEXTAMTS             = TOTAL_IEXTAMTS + EXTAMT;
             TEMP-&gtHYBRID_NODE.PIEXTAMT = EXTAMT;
             TEMP = TEMP-&gtNEXT_CN;

          END;   /* DO WHILE ^= NULL */

         SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
      END HYBRID_CALCULATION;

      /*--------------------------------------------------------*/
      CHECK_FOR_ROUNDING : PROC (HYBRID_TOP);

      DCL HYBRID_TOP            POINTER,
          SAVE_SEGMENT          CHAR (31);

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'CHECK_FOR_ROUNDING';

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;

        /* CHECK THE CALCULATED TOTAL EXTENDED AMOUNT AGAINST THE */
        /* BIDTAB EXTENDED AMOUNT.  IF A DIFFERENCE EXISTS, THEN  */
        /* A ROUNDING ERROR HAS OCCURRED AND THE DIFFERENCE WILL  */
        /* WILL BE APPLIED TO THE FIRST HYBRID ITEM RECORD.  IF   */
        /* THE FIRST ITEM IS NOT IN GPDEITEM, THEN THE ROUNDING   */
        /* CORRECTION WILL NOT SHOW HERE.                         */

        IF HYBRID_TOP-&gtHYBRID_NODE.BIDPRICE ^= TOTAL_IEXTAMTS THEN
           DO;
             DIFFERENCE  = HYBRID_TOP-&gtHYBRID_NODE.BIDPRICE - 
                           TOTAL_IEXTAMTS;
             HYBRID_TOP-&gtHYBRID_NODE.PRICE = 
                         HYBRID_TOP-&gtHYBRID_NODE.PRICE + DIFFERENCE;
             HYBRID_TOP-&gtHYBRID_NODE.PIEXTAMT = 
                         HYBRID_TOP-&gtHYBRID_NODE.PIEXTAMT + DIFFERENCE;
           END;   /* IF BIDPRICE ^= TOTAL DO */

        SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
                        
      END CHECK_FOR_ROUNDING;
      /*--------------------------------------------------------*/
      UPDATE_GPDEITEM : PROC (HYBRID_TOP);

      DCL (HYBRID_TOP,
           TEMP )                POINTER,
           SAVE_SEGMENT          CHAR (31);

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'UPDATE_GPDEITEM ';

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;

        TEMP = HYBRID_TOP;
        DO WHILE (TEMP ^= NULL);
           GPDEITEM_FOUND = '1'B;
           GPDEITEM_KEY   = TEMP-&gtHYBRID_NODE.PCN ||
                            TEMP-&gtHYBRID_NODE.CN  ||
                            TEMP-&gtHYBRID_NODE.LINE;
           ITRC = ITREAD ('GPDEITEM',GPDEITEM_KEY, '0', 'GE');
           IF ITRC = 8
              THEN GPDEITEM_FOUND = '0'B;
           IF (GPDEITEM_FOUND &amp 
               GPDEITEM_RECORD.PCN = TEMP-&gtHYBRID_NODE.PCN &amp
               GPDEITEM_RECORD.CN  = TEMP-&gtHYBRID_NODE.CN  &amp
               GPDEITEM_RECORD.ILINENO = TEMP-&gtHYBRID_NODE.LINE) THEN
              DO;
                GPDEITEM_RECORD.IPRICE  = 
                                D13V5$C(TEMP-&gtHYBRID_NODE.PRICE);
                GPDEITEM_RECORD.IQTY    = 
                                D12V3$C(TEMP-&gtHYBRID_NODE.PIQTY);
                GPDEITEM_RECORD.IEXTAMT = 
                                D11V2$C(TEMP-&gtHYBRID_NODE.PIEXTAMT);
                ITRC = ITWRITE ('GPDEITEM','');
                IF ITRC ^= 0 THEN
                   DO;
                      ERROR_TYPE = 'ERROR ON UPDATE OF HYBRID ' ||
                                   ' OR LUMP SUM ITEM.';
                      CALL BUILD_ERROR_LOG(ERROR_TYPE);
                   END;   /* IF ITRC ^= 0 DO */
              END;    /* GPDEITEM_FOUND */
           TEMP = TEMP-&gtNEXT_CN;
        END;   /* DO WHILE TEMP ^= NULL */

        SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

      END UPDATE_GPDEITEM;
      /* ----------------- END NESTED PROCEDURES ---------------- */

  END PROCESS_LUMPS_AND_HYBRIDS;


 /*---------------------------------------------------------------*/
 /*                        FREE HYBRID LIST                       */
 /*---------------------------------------------------------------*/

 FREE_HYBRID_LIST: PROC;

      DCL SAVE_SEGMENT          CHAR (31),
         (CURRENT_PTR,
          TEMP_PTR,
          CN_PTR)               POINTER;

      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'FREE_HYBRID_LIST ';

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;

    DO WHILE (HYBRID_TOP ^=NULL);
       CN_PTR = HYBRID_TOP-&gtHYBRID_NODE.NEXT_CN;
       DO WHILE (CN_PTR ^= NULL);
          TEMP_PTR = CN_PTR-&gtHYBRID_NODE.NEXT_CN;
          FREE CN_PTR-&gtHYBRID_NODE;
          CN_PTR = TEMP_PTR;
       END;
       CURRENT_PTR = HYBRID_TOP-&gtHYBRID_NODE.NEXT_HYBRID;
       FREE HYBRID_TOP-&gtHYBRID_NODE;
       HYBRID_TOP = CURRENT_PTR;
    END;

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END FREE_HYBRID_LIST;

 /*----------------------------------------------------------------*/
 /*                      DUMP HYBRID LIST                          */
 /*----------------------------------------------------------------*/

     DUMP_HYB_LIST: PROC(HYBRID_TOP);
                                    
        DCL  (HYBRID_TOP, TEMP1, TEMP2)       POINTER;

        SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
        SHELL$MODULE_SEGMENT = 'DUMP_HYB_LIST ';

  %IF DEBUGGER = 'ON'
       %THEN %DO;
          PUT SKIP LIST ('INSIDE OF ',SHELL$MODULE_SEGMENT);
       %END;

        PUT SKIP LIST ('***** DUMP HYBRID LIST *****');
        TEMP1 = HYBRID_TOP;
        DO WHILE (TEMP1 ^= NULL);
           PUT SKIP LIST (' ');
           PUT SKIP LIST ('--- IPLINENO ---');
           TEMP2 = TEMP1;
           DO WHILE (TEMP2 ^= NULL);
              PUT SKIP EDIT ('CONTID','PCN','CN','IPLN',
                             'ILNE','TYP','IQTY','TOTAL_QTY',
                             'EXTAMT','PRICE','BIDPRICE')
                            (COL(2),A,COL(18),A,COL(32),A,COL(37),A,
                             COL(42),A,COL(47),A,COL(58),A,COL(71),A,
                             COL(86),A,COL(101),A,COL(115),A); 

              PUT SKIP EDIT (TEMP2-&gtHYBRID_NODE.CONTID,
                             TEMP2-&gtHYBRID_NODE.PCN,
                             TEMP2-&gtHYBRID_NODE.CN,
                             TEMP2-&gtHYBRID_NODE.PILINENO,
                             TEMP2-&gtHYBRID_NODE.LINE,
                             TEMP2-&gtHYBRID_NODE.TYPE,
                             TEMP2-&gtHYBRID_NODE.PIQTY,
                             TEMP2-&gtHYBRID_NODE.TOTAL_QTY,
                             TEMP2-&gtHYBRID_NODE.PIEXTAMT,
                             TEMP2-&gtHYBRID_NODE.PRICE,
                             TEMP2-&gtHYBRID_NODE.BIDPRICE)
                            (COL(2),A,COL(18),A,COL(32),A,COL(37),A,
                             COL(42),A,COL(47),A,COL(52),A,COL(67),A,
                             COL(83),A,COL(98),A);
              TEMP2 = TEMP2-&gtHYBRID_NODE.NEXT_CN; 
           END;   /* DO WHILE TEMP2 ^NULL */
           TEMP1 = TEMP1-&gtHYBRID_NODE.NEXT_HYBRID;
        END;   /* DO WHILE TEMP1 ^NULL */
      PUT SKIP LIST (' ');
      PUT SKIP LIST (' ');

     END DUMP_HYB_LIST;

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
                                       
      /*--- END NESTED PROCEDURES WITHIN CALCULATE_LUMP_SUMS ---*/


 END CALCULATE_LUMP_SUMS;

 /*================================================================*/
 /*================================================================*/


 /*----------------------------------------------------------------*/
 /*  THE FOLLOWING CODE IS ONLY COMPILED AND USED IF THE DEBUGGER  */
 /*  PREPROCESSOR BIT IS TURNED ON AND THEY ARE ONLY USED IF A     */
 /*  TO THIS PROCEDURE IS MADE.  THIS CODE WILL ONLY BE USED FOR   */
 /*  INFO TECH'S TESTING AND DEBUGGING.                            */
 /*----------------------------------------------------------------*/

 /*----------------------------------------------------------------*/
 /*                         DUMP GPDE FILES                        */
 /*----------------------------------------------------------------*/
 DUMP_FILES: PROC;

     CALL GPDEPROJ_DUMP;

     CALL GPDEFUND_DUMP;

     CALL GPDECATG_DUMP;

     CALL GPDEITEM_DUMP;

     /*   NESTED PROCEDURES IN THE DEBUGGING, DUMP PROCEDURE   */
     /**********************************************************/
     /*         GPDEPROJ_DUMP FOR DEBUG TRACING PURPOSES       */
     /*  NOTE:  DUMPS SELECTED FIELDS, NOT ALL FIELDS          */
     /**********************************************************/

     GPDEPROJ_DUMP: PROC;

        DCL  REC_FOUND  BIT (1) INIT ('1'B);

        PUT SKIP LIST ('***** GPDEPROJ DUMP *****'); 

        ITRC = ITREAD ('GPDEPROJ','','0','GE');
        IF ITRC = 8  
           THEN REC_FOUND = '0'B;
        PUT SKIP EDIT ('PCN','PJSOURCE','PJDTLFLG')
                      (COL(1),A,COL(15),A,COL(29),A);

        DO WHILE (REC_FOUND); 

           PUT SKIP EDIT (GPDEPROJ_RECORD.PCN,GPDEPROJ_RECORD.PJSOURCE,
                          GPDEPROJ_RECORD.PJDTLFLG) 
                         (COL(1),A,COL(15),A,COL(29),A);

           ITRC = ITREAD ('GPDEPROJ','','',''); 
           IF ITRC = 8
               THEN REC_FOUND = '0'B;
        END;   /* WHILE */
      PUT SKIP LIST (' ');
      PUT SKIP LIST (' ');

     END GPDEPROJ_DUMP;
     /**********************************************************/
     /*         GPDEFUND_DUMP FOR DEBUG TRACING PURPOSES       */
     /*  NOTE:  DUMPS SELECTED FIELDS, NOT ALL FIELDS          */
     /**********************************************************/

     GPDEFUND_DUMP: PROC;

         DCL  REC_FOUND  BIT (1) INIT ('1'B);

         PUT SKIP LIST (' ');
         PUT SKIP LIST (' ');
         PUT SKIP LIST ('***** GPDEFUND DUMP *****');

         ITRC = ITREAD ('GPDEFUND','','0','GE');
         IF ITRC = 8
            THEN REC_FOUND = '0'B; 

         PUT SKIP EDIT ('PCN','UNT','CN','FUND','FUNDPCT',
                'LIMIT','O','F','FACSFND', 'P',
                'FCOST','FEC','FTOTAMT', 'FACTPCT','FADJTOT')
               (COL(1),A,COL(15),A,COL(19),A,COL(24),A,COL(31),A,
                COL(40),A,COL(53),A,COL(55),A,COL(57),A,COL(67),A,
                COL(69),A,COL(82),A,COL(95),A,COL(108),A,COL(116),A);

         DO WHILE (REC_FOUND);

            PUT SKIP EDIT (GPDEFUND_RECORD.PCN,GPDEFUND_RECORD.UNITNO,
                  GPDEFUND_RECORD.CN,GPDEFUND_RECORD.FUND,
                  GPDEFUND_RECORD.EFUNDPCT,GPDEFUND_RECORD.ELIMIT, 
                  GPDEFUND_RECORD.EFPRIOR,GPDEFUND_RECORD.EFEDFLAG,
                  GPDEFUND_RECORD.EFACSFND,
                  GPDEFUND_RECORD.FPARTPCT,GPDEFUND_RECORD.FCOST,
                  GPDEFUND_RECORD.FEC,GPDEFUND_RECORD.FTOTAMT,
                  GPDEFUND_RECORD.FACTPCT,GPDEFUND_RECORD.FADJTOT)
               (COL(1),A,COL(15),A,COL(19),A,COL(24),A,COL(31),A, 
                COL(40),A,COL(53),A,COL(55),A,COL(57),A,COL(67),A,
                COL(69),A,COL(82),A,COL(95),A,COL(108),A,COL(116),A);

            ITRC = ITREAD ('GPDEFUND','','','');
            IF ITRC = 8 
               THEN REC_FOUND = '0'B;
         END;   /* WHILE */  
         PUT SKIP LIST (' ');
         PUT SKIP LIST (' ');

     END GPDEFUND_DUMP;

     /**********************************************************/ 
     /*         GPDECATG_DUMP FOR DEBUG TRACING PURPOSES       */
     /*  NOTE:  DUMPS SELECTED FIELDS, NOT ALL FIELDS          */
     /**********************************************************/

     GPDECATG_DUMP: PROC;

        DCL  REC_FOUND  BIT (1) INIT ('1'B);

        PUT SKIP LIST ('***** GPDECATG DUMP *****');

        ITRC = ITREAD ('GPDECATG','','0','GE');
        IF ITRC = 8 
           THEN REC_FOUND = '0'B;
        PUT SKIP EDIT ('PCN','CN','UNITNO','LOWCOST',
                        'CNALT','ADJCODE','ADJPCT')
                      (COL(1),A,COL(15),A,COL(20),A,COL(27),A,
                       COL(35),A,COL(41),A,COL(50),A);

        DO WHILE (REC_FOUND);

           PUT SKIP EDIT (GPDECATG_RECORD.PCN,GPDECATG_RECORD.CN,
                          GPDECATG_RECORD.CUNITNO, 
                          GPDECATG_RECORD.CLOWCOST,
                          GPDECATG_RECORD.CNALT,GPDECATG_RECORD.ADJCODE,
                          GPDECATG_RECORD.ADJPCT)
                         (COL(1),A,COL(15),A,COL(20),A,COL(27),A,
                          COL(35),A,COL(41),A,COL(50),A);

           ITRC = ITREAD ('GPDECATG','','','');
           IF ITRC = 8
               THEN REC_FOUND = '0'B;
        END;   /* WHILE */
      PUT SKIP LIST (' ');
      PUT SKIP LIST (' ');

     END GPDECATG_DUMP;
     /*--------------------------------------------------*/
     GPDEITEM_DUMP : PROC;

        DCL  REC_FOUND  BIT (1) INIT ('1'B);

        PUT SKIP LIST ('***** GPDEITEM DUMP *****');

        ITRC = ITREAD ('GPDEITEM ','','0','GE');
        IF ITRC = 8 
           THEN REC_FOUND = '0'B;
        PUT SKIP EDIT ('PCN','ILNNO','PITYP','CMOD',' QTY  ',
                       ' IPRICE ','IEXTAMT ')
                      (COL(1),A,COL(15),A,COL(21),A,COL(27),A,COL(32),A,
                       COL(47),A,COL(63),A);

        DO WHILE (REC_FOUND);

           PUT SKIP EDIT (GPDEITEM_RECORD.PCN,GPDEITEM_RECORD.ILINENO,
                      GPDEITEM_RECORD.PITYPE,GPDEITEM_RECORD.CMOD,
                      GPDEITEM_RECORD.IQTY,GPDEITEM_RECORD.IPRICE,
                      GPDEITEM_RECORD.IEXTAMT)
                      (COL(1),A,COL(15),A,COL(21),A,COL(27),A,COL(32),A,
                       COL(47),A,COL(63),A);

           ITRC = ITREAD ('GPDEITEM','','','');
           IF ITRC = 8 
               THEN REC_FOUND = '0'B;
        END;   /* WHILE */
      PUT SKIP LIST (' ');
      PUT SKIP LIST (' ');

     END GPDEITEM_DUMP;

     /* END NESTED PROCEDURES IN THE DEBUGGING, DUMP PROCEDURE */

 END DUMP_FILES;

 END DCELOAD;
</PRE>
<ONLINE>
<HR>
<A HREF="ebsindex.htm"><IMG SRC="/clipart/back.gif" ALIGN="MIDDLE" BORDER=0>
EBSIndex</A><P>
<A HREF="/index.htm"><IMG SRC="/clipart/home.gif" ALIGN="MIDDLE" BORDER=0>
Network Home Page</A>
<HR>
<EM>
Please send any comments or problems to
<A HREF="mailto:webmaster@infotechfl.com">webmaster@infotechfl.com</A>
</EM>
</ONLINE>
</BODY>
</HTML>

