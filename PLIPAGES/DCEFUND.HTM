<HTML>
<HEAD>
<TITLE>test\dcefund.pli</TITLE>
</HEAD>
<BODY>
<H1>test\dcefund.pli</H1>
<PRE>
<HR>
<EM>This page was updated on Tue Jan 14 </EM>
<P>


<A NAME="test\dcefund.pli"></A> /*==================================================================*/
 /*                                                                  */
 /*      DCEFUND: DETERMINE FUNDING (BATCH)                          */
 /*                                                                  */
 /*      ORIGINAL AUTHOR : CJB  10/20/87                             */
 /*      1.0 CONVERSION  : GNC                                       */
 /*      2.0 (IBM)       :                                           */
 /*      2.0 (VAX)       : KLS 03/17/89                              */
 /*                                                                  */
 /*------------------- PROGRAM MODIFICATION HISTORY -----------------*/
 /*      01/19/90   MEA                                              */
 /*                 ADDED CODE IN THE ALLOCATE_CATEGORY_FUNDING      */
 /*                 PROCEDURE TO ADJUST THE LAST FUND ALLOCATED IN   */
 /*                 A GIVEN CATEGORY TO THE ROUND OFF ACCUMULATED    */
 /*                 OR LOST CENTS.                                   */
 /*                 ADDED A CHECK TO SUPPRESS CREATING UNSPECIFIED   */
 /*                 FUNDS RECORDS WHEN ROUND OFF ERROR IS LESS THAN  */
 /*                 10 IN CREATE_NONSPEC_FUND_RECORDS PROCEDURE.     */
 /*      01/23/90   MEA                                              */
 /*                 THE LIMIT CALCULATIONS FOR ANY GIVEN FUND        */
 /*                 ARE ROUNDED TO PREVENT THE LOSS OF CENTS WHEN    */
 /*                 THEY ARE SUMMED UP FOR THE COST SUMMARY REPORT   */
 /*      01/26/90   MEA                                              */
 /*                 ADDED IN DISTRIBUTE_PROJECT_LEVEL_FUNDS PROC     */
 /*                 CODE TO ADJUST LAST FUND ALLOCATED IN A GIVEN    */
 /*                 CATEGORY TO ROUND OFF ERROR OF THE CATEGORY.     */
 /*                 THIS IS DONE FOR FUND ALLOCATION OF THE PROJECT  */
 /*                 LEVEL FUNDS TO CATEGORIES WITHOUT PRIORITY 1     */
 /*                 FUNDS.  THE REMAINING PROJECT FUNDS TO BE DISTRB */
 /*                 AFTER ALLOCATING A PORTION TO A GIVEN CATEGORY,  */
 /*                 ARE CHECKED AGAINST THE DIFFERENCE OF ORIGINAL   */
 /*                 PROJECT FUND AMT AND CATEGORY PARTICIPATING COST */
 /*                 THUS CHECKING WHETHER REMAINING PORTION OF PROJ  */
 /*                 LEVEL FUNDS IS ALREADY TOO SMALL OR LARGE TO COV */
 /*                 ER REMAINING CATEGS. IF SO THE ADJUSTMENT TAKES  */
 /*                 PLACE.                                           */
 /*                                                                  */
 /*      90/06/19   PCG                                              */
 /*                 CHANGED CODE IN PROCEDURE &quotCOMPUTE_EST_TOTALS&quot   */
 /*                 TO NOT CREATE A GPDEEST RECORD EACH TIME THE     */
 /*                 NEXT GPDEEST RECORD IS NEEDED.  BUT READ THE     */
 /*                 NEXT GPDEEST RECORD AND CALCULATE THE TOTALS.    */
 /*                 THE GPDEEST FILE HAS ALREADY BEEN CREATED.       */
 /*                                                                  */
 /*                 ALSO ADDED CODE TO POPULATE THE DCEFUND FILE     */
 /*                 TOTAL FIELDS OF UNIT FUND RECORDS. THE           */
 /*                 PROCEDURES USED THE POPULATE THE FUND TOTAL AND  */
 /*                 THE UNIT FUND TOTAL FIELDS ARE :                 */
 /*                                                                  */
 /*                     COMPUTE_CATEGORY_FUND_TOTALS         &amp       */
 /*                     COMPUTE_UNIT_FUND_TOTALS                     */
 /*                                                                  */
 /*                 ALSO, THE NEW ADJUSTMENT PERCENT IS CALCULATED   */
 /*                 JUST LIKE E&ampC IS CALCULATED IN THE PROGRAM.      */
 /*                                                                  */
 /*      90/10/24   TPS                                              */
 /*                 Added preprocessor statments for debugging       */
 /*                                                                  */
 /*      91/05/01   PCG                                              */
 /*                 ADDED STATEMENTS IN 5 PROCEDURES TO INITIALIZE   */
 /*                 THE DCEFUND.FADJTOT FIELD TO ZERO.  THIS CAUSED  */
 /*                 DATA EXCEPTION ON THE IBM.                       */
 /*                                                                  */
 /*      91/09/03   PCGW                                             */
 /*                 ADDED STATEMENT TO SUM THE ADJUSTMENT TOTAL      */
 /*                 FIELD OF GPDEEST FILE.   THIS WAS REPORTED BY    */
 /*                 NM.   (910627-6101)                              */
 /*                                                                  */
 /*      91/09/26   RTD                                              */
 /*                 Added check of category level for low cost when  */
 /*                 summing the by-fund totals for units and pcns.   */
 /*                 Changes made in COMPUTE_CATEGORY_FUND_TOTALS and */
 /*                 COMPUTE_UNIT_FUND_TOTALS.                        */
 /*                 (910612-3201)                                    */
 /*                                                                  */
 /*      91/11/15   PCGW                                             */
 /*                 Added check for rounding in DISTRIBUTE_PROJ_     */
 /*                 LEVEL_FUNDS routine.  Check that total fund      */
 /*                 limit in catg 0000 equal sum of all catg limits. */
 /*                 This was made because the IBM did not calculate  */
 /*                 the same as VAX in the internal machine language.*/
 /*                 (no bsr).                                        */
 /*                                                                  */
 /*      94/09/19   PCGW     BSR 940161  NM                          */
 /*                 Changed DECATG_RECORD.CTOTAL_AMOUNT to           */
 /*                 DECATG_RECORD.CPAR_TOATAL_AMOUNT so that the     */
 /*                 TOTAL AMOUNT values on the Funding Summarys will */
 /*                 not include non-participating amounts.           */
 /*                                                                  */
 /*      94/11/28   RTD     METRICATION                              */
 /*                 Modified calculations relating to units to be    */
 /*                 sensitive to the unit system of the project.     */
 /*                                                                  */
 /*==================================================================*/
     
 /*------------------------------------------------------------------*/
 /* NOTE:  CALLS TO FILE DUMP ROUTINES ARE AT THE END OF each        */
 /*        PROCEDURE.  INITIALIZE THE DEBUG FLAG TO '1'B AND         */
 /*        RECOMPILE TO GET FILE DUMPS FOR DEBUGGING.                */
 /*------------------------------------------------------------------*/
     
     
 DCEFUND: PROC OPTIONS (MAIN);
     
    /*****************************************/
    /*                                       */
    /* These two statements will determine   */
    /* if the module is compiled for testing */
    /* or production.  In production mode    */
    /* the preprocessor variable is set to   */
    /* 'OFF', while during testing it is 'ON'*/
    /*                                       */
    /*****************************************/
   %INCLUDE BENVSTP;
     
   %INIT_TYPE = 'INTEGRATED';
     
   %INCLUDE BTCSTUP;
     
   %DCL DEBUGGER CHARACTER;
   %DEBUGGER = 'OFF';

   /*  %DECLARE USEPRIMPROJ CHARACTER;
       %USEPRIMPROJ = 'Y';             */
     
   SHELL$MODULE_NAME    = 'DCEFUND';
   SHELL$MODULE_SEGMENT = 'SETUP';
     
   ITRC = ITSET ('LOCK','FATAL');
   ITRC = ITSET ('TNF' ,'FATAL');
     

   %IF DEBUGGER = 'ON'
       %THEN %DO;
          ITRC = ITSET ('TRACE','ON');
       %END;

   %INCLUDE DCEFILES;
   %INCLUDE FUNDLIST;
     
   DCL (DECATG_FOUND,DEITEM_FOUND,
        DEPROJ_FOUND,DEFUND_FOUND,
        FUNDLIST_FOUND,GPDEEST_FOUND,
        OVERFLOW)                       BIT (1);
     
   DCL ZERO_CATEGORY CHAR (4) INIT ('0000');
     
   ON FIXEDOVERFLOW OVERFLOW = '1'B;
     
  /* %IF USEPRIMPROJ = 'Y'
       %THEN %DO;
          %INCLUDE PRIMPROJ;
          PRIMPROJ_RECORD_PTR = ADDR(PRIMPROJ_RECORD);
          ITRC = ITOPEN ('PRIMPROJ', PRIMPROJ_RECORD_PTR,
                         'READ', '', '', '');
       %END;
                     */
   FUNDLIST_RECORD_PTR = ADDR(FUNDLIST_RECORD);
   ITRC = ITOPEN ('FUNDLIST', FUNDLIST_RECORD_PTR, 'READ', '', '', '');
     
   GPDECATG_RECORD_PTR = ADDR(GPDECATG_RECORD);
   ITRC = ITOPEN ('GPDECATG', GPDECATG_RECORD_PTR, 'WRITE', '', '',
                  'LIBRARY=TEMPTABL');
     
   GPDEITEM_RECORD_PTR = ADDR(GPDEITEM_RECORD);
   ITRC = ITOPEN ('GPDEITEM', GPDEITEM_RECORD_PTR, 'READ', '', '',
                  'LIBRARY=TEMPTABL');
     
   GPDEFUND_RECORD_PTR = ADDR(GPDEFUND_RECORD);
   ITRC = ITOPEN ('GPDEFUND', GPDEFUND_RECORD_PTR, 'WRITE', '', '',
                  'LIBRARY=TEMPTABL');
     
   GPDEPROJ_RECORD_PTR = ADDR(GPDEPROJ_RECORD);
   ITRC = ITOPEN ('GPDEPROJ', GPDEPROJ_RECORD_PTR, 'WRITE', '', '',
                  'LIBRARY=TEMPTABL');

   GPDEEST_RECORD_PTR = ADDR(GPDEEST_RECORD);
   ITRC = ITOPEN ('GPDEEST ', GPDEEST_RECORD_PTR, 'WRITE', '', '',
                  'LIBRARY=TEMPTABL');
     
     
   /*----------------------------------------------------------------*/
   /* CALCULATE FUNDING AND ESTIMATE TOTALS.  EACH PROCEDURE UPDATES */
   /* RECORDS FOR ALL PROJECTS.  THIS PROGRAM CREATES GPDEEST FILE,  */
   /* UPDATES GPDECATG, GPDEFUND, AND GPDEPROJ.                      */
   /*----------------------------------------------------------------*/

   CALL CREATE_NONPART_DEFUND_RECORDS;    /* UPDATES: GPDEFUND */

   CALL CREATE_UNIT_DEFUND_RECORDS;       /* UPDATES: GPDEFUND */

   CALL CREATE_PROJECT_DEFUND_RECORDS;    /* UPDATES: GPDEFUND */

   CALL COMPUTE_NONPART_FUND_TOTALS;      /* UPDATES: GPDEFUND */

   CALL COMPUTE_CATG_NONPART_TOTALS;      /* UPDATES: GPDECATG */

   CALL COMPUTE_CATG_PART_TOTALS;         /* UPDATES: GPDECATG */

   CALL COMPUTE_0_CATG_AMOUNTS;           /* UPDATES: GPDECATG */


   /*--------------------------------------------------------------*/
   /*--- FOR EACH PROJECT, IF THE PROJECT HAS A '0000' CATEGORY ---*/
   /*--- ALLOCATE CATEGORY FUNDING FOR THE '0000' CATEGORY.     ---*/
   /*--- THE ZERO CATEGORY SPECIFIES PROJECT-LEVEL FUNDING,     ---*/
   /*--- FUNDING WHICH IS ALLOCATED TO CATEGORIES THAT DID NOT  ---*/
   /*--- HAVE CATEGORY-LEVEL FUNDING SPECIFIED.                 ---*/
   /*--- UPDATES: GPDECATG, GPDEFUND.                           ---*/
   /*--------------------------------------------------------------*/
     
   DEPROJ_FOUND = '1'B;

   DEPROJ_KEY = ' ';
   ITRC = ITREAD ('GPDEPROJ', DEPROJ_KEY, '0', 'GE');
   IF ITRC = 8
      THEN DEPROJ_FOUND = '0'B;
     
   DO WHILE (DEPROJ_FOUND);

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('MAIN PROC, FIRST LOOP');
              PUT SKIP LIST ('CALL CONVERT_GPDEPROJ_TO_DEPROJ');
           %END;
     
      CALL CONVERT_GPDEPROJ_TO_DEPROJ;
     
      DECATG_FOUND = '1'B;
      DECATG_KEY   = DEPROJ_RECORD.PCN || '   ' || '    ';
     
      ITRC = ITREAD ('GPDECATG', DECATG_KEY, '0', 'GE');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;
      IF DECATG_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

           CALL CONVERT_GPDECATG_TO_DECATG;
         END;
     
      DO WHILE (DECATG_FOUND &amp DECATG_RECORD.PCN = DEPROJ_RECORD.PCN);
     
         IF DECATG_RECORD.CN = ZERO_CATEGORY
            THEN CALL ALLOCATE_CATEGORY_FUNDING;
     
         ITRC = ITREAD ('GPDECATG', '', '', '');
         IF ITRC = 8
            THEN DECATG_FOUND = '0'B;
         IF DECATG_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('MAIN PROC, SECOND LOOP');
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;
              
              CALL CONVERT_GPDECATG_TO_DECATG;
            END;
      END;
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('MAIN PROC, END SECOND LOOP');
            %END;

      ITRC = ITREAD ('GPDEPROJ', '', '', '');
      IF ITRC = 8
         THEN DEPROJ_FOUND = '0'B;
   END;
     
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('MAIN PROC, END FIRST LOOP');
            %END;

   CALL DISTRIBUTE_0_UNFUNDED_AMOUNTS;    /* UPDATES: GPDECATG */
     
   /*-----------------------------------------------------------*/
   /*--- FOR EACH PROJECT - ALLOCATE CATEGORY FUNDING TO ALL ---*/
   /*--- CATEGORIES EXCEPT THE '0000' CATEGORY               ---*/
   /*--- UPDATES: GPDECATG, GPDEFUND                         ---*/
   /*-----------------------------------------------------------*/
     
   DEPROJ_FOUND = '1'B;
     
   ITRC = ITREAD ('GPDEPROJ', ' ','0', 'GE');
   IF ITRC = 8
      THEN DEPROJ_FOUND = '0'B;
     
   DO WHILE (DEPROJ_FOUND);
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('MAIN PROC, FIRST NON ZERO LOOP');
              PUT SKIP LIST ('CALL CONVERT_GPDEPROJ_TO_DEPROJ');
           %END;

      CALL CONVERT_GPDEPROJ_TO_DEPROJ;
     
      DECATG_FOUND = '1'B;
      DECATG_KEY   = DEPROJ_RECORD.PCN;
     
      ITRC = ITREAD ('GPDECATG', DECATG_KEY, '', 'GE');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;
      IF DECATG_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;
        
           CALL CONVERT_GPDECATG_TO_DECATG;
         END;

      DO WHILE (DECATG_FOUND &amp DECATG_RECORD.PCN = DEPROJ_RECORD.PCN);
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('MAIN PROC, SECOND NON ZERO LOOP');
           %END;

         IF DECATG_RECORD.CN = ZERO_CATEGORY |
            DECATG_RECORD.CLOWCOST = 'N' |
            DECATG_RECORD.CN = ' '
            THEN GOTO NEXT_CATEGORY;
     
         CALL ALLOCATE_CATEGORY_FUNDING;
     
         NEXT_CATEGORY:
     
         ITRC = ITREAD ('GPDECATG', '', '', '');
         IF ITRC = 8
            THEN DECATG_FOUND = '0'B;
         IF DECATG_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;
            
              CALL CONVERT_GPDECATG_TO_DECATG;
            END;
      END;
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('MAIN PROC, END SECOND NON ZERO LOOP');
           %END;
     
      ITRC = ITREAD ('GPDEPROJ', '', '', '');
      IF ITRC = 8
         THEN DEPROJ_FOUND = '0'B;
     
      END;
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('MAIN PROC, END FIRST NON ZERO LOOP');
           %END;

   CALL CREATE_NONSPEC_FUND_RECORDS;      /* UPDATES GPDEFUND */

   CALL DISTRIBUTE_PROJ_LEVEL_FUNDS;      /* UPDATES GPDEFUND */

   CALL COMPUTE_CATG_FEDERAL_SHARE;       /* UPDATES GPDECATG */

   CALL UPDATE_DEFUND_RECORDS;            /* UPDATES GPDEFUND */

   CALL COMPUTE_FUNDING_TOTALS;           /* UPDATES GPDEFUND */

   CALL COMPUTE_UNIT_AND_PROJ_TOTALS;     /* UPDT GPDECATG,GPDEPROJ */

   CALL COMPUTE_ACTUAL_FUND_PERCENTAGES;  /* UPDATES GPDEFUND */

   CALL COMPUTE_UNIT_AND_PROJECT_TOTALS;  /* UPDATES GPDEPROJ */

   CALL COMPUTE_DECATG_FUNDED_AMOUNT;     /* UPDATES: GPDECATG */

   /* THE FOLLOWING TWO WERE ADDED BY PCG TO GET CALCULATIONS
      FOR FUND TOTALS AND UNIT FUND TOTALS.                   */

   CALL COMPUTE_CATEGORY_FUND_TOTALS;     /* UPDATES GPDEFUND */

   CALL COMPUTE_UNIT_FUND_TOTALS;         /* UPDATES GPDEFUND */


   CALL COMPUTE_EST_TOTALS;      /* UPDATES GPDEPROJ, GPDEEST */

   REVERT FIXEDOVERFLOW;

   /* %IF USEPRIMPROJ = 'Y'
       %THEN %DO;
          ITRC = ITCLOSE ('PRIMPROJ', '');
       %END;          */

   ITRC = ITCLOSE ('GPDEEST ', 'LIBRARY=TEMPTABL');
   ITRC = ITCLOSE ('GPDECATG', 'LIBRARY=TEMPTABL');
   ITRC = ITCLOSE ('GPDEFUND', 'LIBRARY=TEMPTABL');
   ITRC = ITCLOSE ('GPDEITEM', 'LIBRARY=TEMPTABL');
   ITRC = ITCLOSE ('GPDEPROJ', 'LIBRARY=TEMPTABL');
   ITRC = ITCLOSE ('FUNDLIST', '');
     
 /*------------------------------------------------------------------*/
 /*                   CREATE_NONPART_DEFUND_RECORDS                  */
 /*                                                                  */
 /*    CREATE A GPDEFUND CATEGORY-FUND RECORD FOR EACH CATEGORY      */
 /*    NON-PARTICIPATING FUND.  NON-PARTICIPATING FUNDS ARE          */
 /*    DETERMINED FROM CATEGORY ITEMS THAT HAVE NON-PARTICIPATING    */
 /*    FUND CODES.  UPDATES GPDEFUND.                                */
 /*------------------------------------------------------------------*/
 CREATE_NONPART_DEFUND_RECORDS:    PROC;
     
   DCL SAVE_SEGMENT          CHAR (31),
       LIMIT                 FIXED DEC (11,2),
       PCT                   FIXED DEC (5,2),
       STRING                CHAR (5),
       FEDERAL_FLAG          CHAR (1);
     
   SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
   SHELL$MODULE_SEGMENT = 'CREATE_NONPART_DEFUND_RECORDS';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
     
   DECATG_FOUND = '1'B;
     
   DECATG_KEY = ' ';
   ITRC = ITREAD ('GPDECATG', DECATG_KEY, '0', 'GE');
   IF ITRC = 8
      THEN DECATG_FOUND = '0'B;
     
   DO WHILE (DECATG_FOUND);
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('FIRST LOOP');
           %END;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;
            
      CALL CONVERT_GPDECATG_TO_DECATG;
     
      IF DECATG_RECORD.CN = ' ' | DECATG_RECORD.CN = ZERO_CATEGORY
         THEN GOTO NEXT_CATEGORY;
     
      DEITEM_FOUND = '1'B;
      DEITEM_KEY   = DECATG_RECORD.PCN || DECATG_RECORD.CN;
     
      ITRC = ITREAD ('GPDEITEM', DEITEM_KEY, '', 'GE');
      IF ITRC = 8
         THEN DEITEM_FOUND = '0'B;
      IF DEITEM_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEITEM_TO_DEITEM');
           %END;
            
            CALL CONVERT_GPDEITEM_TO_DEITEM;
          END;
     
      DO WHILE (DEITEM_FOUND &amp DEITEM_RECORD.PCN = DECATG_RECORD.PCN &amp
                               DEITEM_RECORD.CN  = DECATG_RECORD.CN);
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('SECOND LOOP');
           %END;

         IF DEITEM_RECORD.INONPAR = ' '
            THEN GOTO NEXT_ITEM;
     
         DEFUND_FOUND = '1'B;
     
         DEFUND_KEY   = DECATG_RECORD.PCN    ||
                        DECATG_RECORD.UNITNO ||
                        DECATG_RECORD.CN     ||
                        DEITEM_RECORD.INONPAR;
     
         ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '', '');
         IF ITRC = 8
            THEN DEFUND_FOUND = '0'B;
     
         IF DEFUND_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
              GOTO NEXT_ITEM;
            END;
     
         /*--- READ FUNDLIST TO ACCESS FUND DESCRIPTION ---*/
         RECORD_LOCKED = '0'B;
         FUNDLIST_FOUND = '1'B;
         FUNDLIST_KEY   = DEITEM_RECORD.INONPAR;
     
         ITRC = ITREAD ('FUNDLIST', FUNDLIST_KEY, '', '');
         IF ITRC = 8
            THEN FUNDLIST_FOUND = '0'B;
     
         IF ^FUNDLIST_FOUND
            THEN CALL FATAL_ERROR ('PROGRAM',
                                   'NO FUNDLIST FOUND FOR FUND=' ||
                                    TRIM(DEITEM_RECORD.INONPAR));
                                  
         FEDERAL_FLAG = 'N';
     
         /*--- CREATE A DEFUND RECORD FOR ITEM-LEVEL FUND ---*/
     
         DEFUND_RECORD.PCN            = DECATG_RECORD.PCN;
         DEFUND_RECORD.UNITNO         = DECATG_RECORD.UNITNO;
         DEFUND_RECORD.CN             = DECATG_RECORD.CN;
         DEFUND_RECORD.FUND           = DEITEM_RECORD.INONPAR;
         DEFUND_RECORD.FDESCR         = FUNDLIST_RECORD.FDESCR;
         DEFUND_RECORD.FUNDPCT        = 100;
         DEFUND_RECORD.FLIMIT         = 0;
         DEFUND_RECORD.FPRIOR         = ' ';
         DEFUND_RECORD.FFEDERAL       = FEDERAL_FLAG;
         DEFUND_RECORD.EFUNDGRP       = ' ';
         DEFUND_RECORD.EFACSFND       = ' ';
         DEFUND_RECORD.FPARTICIPATING = 'N';
         DEFUND_RECORD.FCOST          = 0;
         DEFUND_RECORD.FEC            = 0;
         DEFUND_RECORD.FTOTAL_AMOUNT  = 0;
         DEFUND_RECORD.FACTUAL_PCT    = 0;
         DEFUND_RECORD.FFUND_TOTAL    = 0;
         DEFUND_RECORD.FADJTOT        = 0;  /* ADDED, PCG 5/1/91 */
     
     
         DEFUND_KEY = DEFUND_RECORD.PCN    ||
                      DEFUND_RECORD.UNITNO ||
                      DEFUND_RECORD.CN     ||
                      DEFUND_RECORD.FUND;
     

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_DEFUND_TO_GPDEFUND');
           %END;

         CALL CONVERT_DEFUND_TO_GPDEFUND;
         ITRC = ITWRITE ('GPDEFUND', '');
     
         NEXT_ITEM:
     
         ITRC = ITREAD ('GPDEITEM', '', '', '');
         IF ITRC = 8
            THEN DEITEM_FOUND = '0'B;
         IF DEITEM_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEITEM_TO_DEITEM');
           %END;

              CALL CONVERT_GPDEITEM_TO_DEITEM;
            END;

      END;
     
      NEXT_CATEGORY:
     
      ITRC = ITREAD ('GPDECATG', '', '', '');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;
   END;
     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
 END CREATE_NONPART_DEFUND_RECORDS;
     
     
 /*------------------------------------------------------------------*/
 /*                    CREATE_UNIT_DEFUND_RECORDS                    */
 /*                                                                  */
 /*    CREATE A UNIT-LEVEL FUND RECORD FOR EACH UNIQUE CATEGORY      */
 /*    PARTICIPATING AND NON-PARTICIPATING FUND IN THE UNIT.         */
 /*    THE UNIT-LEVEL FUND RECORD  FOR EACH UNIQUE CATEGORY IS       */
 /*    FIRST STORED IN A LINKED-LIST.  UPDATES GPDEFUND.             */
 /*------------------------------------------------------------------*/
 CREATE_UNIT_DEFUND_RECORDS:        PROC;
     
   DCL SAVE_SEGMENT          CHAR (31);
     
   DCL (TOP_PTR,CURRENT_PTR,
        DEFUND_PTR)          POINTER;
   DCL 1 DEFUND_REC BASED,
         2 PCN                  CHAR (13),
         2 UNITNO               CHAR ( 3),
         2 FUND                 CHAR ( 6),
         2 FDESCR               CHAR (40),
         2 FPARTICIPATING       CHAR ( 1),
         2 NEXT_PTR             POINTER;
     
     
   SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
   SHELL$MODULE_SEGMENT = 'CREATE_UNIT_DEFUND_RECORDS';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
     
   /*--- ALLOCATE A DUMMY NODE AS HEADER OF THE LINKED-LIST        --*/
     
   ALLOCATE DEFUND_REC SET (TOP_PTR);
   CURRENT_PTR = TOP_PTR;
   CURRENT_PTR-&gtDEFUND_REC.NEXT_PTR = NULL();
     
   DECATG_FOUND = '1'B;
   DECATG_KEY = ' ';
   ITRC = ITREAD ('GPDECATG', DECATG_KEY, '0', 'GE');
   IF ITRC = 8
      THEN DECATG_FOUND = '0'B;
     
   DO WHILE (DECATG_FOUND);
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('FIRST LOOP');
           %END;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

      CALL CONVERT_GPDECATG_TO_DECATG;
     
      IF DECATG_RECORD.CN = ' '
         THEN GOTO NEXT_CATEGORY;
     
      DEFUND_FOUND = '1'B;
      DEFUND_KEY   = DECATG_RECORD.PCN    ||
                     DECATG_RECORD.UNITNO ||
                     DECATG_RECORD.CN;
     
      ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '', 'GE');
      IF ITRC = 8
         THEN DEFUND_FOUND = '0'B;
      IF DEFUND_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

             CALL CONVERT_GPDEFUND_TO_DEFUND;
          END;
     
      DO WHILE (DEFUND_FOUND &amp DEFUND_RECORD.PCN = DECATG_RECORD.PCN &amp
                DEFUND_RECORD.UNITNO = DECATG_RECORD.UNITNO &amp
                DEFUND_RECORD.CN     = DECATG_RECORD.CN);
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('SECOND LOOP');
           %END;

         ALLOCATE DEFUND_REC SET (DEFUND_PTR);
         CURRENT_PTR-&gtDEFUND_REC.NEXT_PTR = DEFUND_PTR;
         DEFUND_PTR-&gtDEFUND_REC.NEXT_PTR  = NULL();
         CURRENT_PTR = DEFUND_PTR;
         DEFUND_PTR-&gtDEFUND_REC.PCN            = DEFUND_RECORD.PCN;
         DEFUND_PTR-&gtDEFUND_REC.UNITNO         = DEFUND_RECORD.UNITNO;
         DEFUND_PTR-&gtDEFUND_REC.FUND           = DEFUND_RECORD.FUND;
         DEFUND_PTR-&gtDEFUND_REC.FDESCR         = DEFUND_RECORD.FDESCR;
         DEFUND_PTR-&gtDEFUND_REC.FPARTICIPATING =
                                       DEFUND_RECORD.FPARTICIPATING;
     
         ITRC = ITREAD ('GPDEFUND', '', '', '');
         IF ITRC = 8
            THEN DEFUND_FOUND = '0'B;
         IF DEFUND_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
             END;

      END;   /* WHILE DEFUND */
     
      NEXT_CATEGORY:
     
      ITRC = ITREAD ('GPDECATG', '', '', '');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;
   END;     /* WHILE DECATG */
     
   /*--- ADD THE UNIT-LEVEL FUND RECORDS TO DEFUND ---*/

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('ADD THE UNIT-LEVEL',
                              'FUND RECORDS TO DEFUND');
           %END;

     
   CURRENT_PTR = TOP_PTR-&gtDEFUND_REC.NEXT_PTR;
   DO WHILE ( CURRENT_PTR ^= NULL() );

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('TRAVERSE THE LIST ');
           %END;

      DEFUND_FOUND = '1'B;
      DEFUND_KEY   = CURRENT_PTR-&gtDEFUND_REC.PCN    ||
                     CURRENT_PTR-&gtDEFUND_REC.UNITNO || '    ' ||
                     CURRENT_PTR-&gtDEFUND_REC.FUND;
     
      ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '', '');
      IF ITRC = 8
         THEN DEFUND_FOUND = '0'B;
      IF DEFUND_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

           CALL CONVERT_GPDEFUND_TO_DEFUND;
         END;
     
      IF ^DEFUND_FOUND
         THEN DO;
           DEFUND_RECORD.PCN      = CURRENT_PTR-&gtDEFUND_REC.PCN;
           DEFUND_RECORD.UNITNO   = CURRENT_PTR-&gtDEFUND_REC.UNITNO;
           DEFUND_RECORD.CN       = '    ';
           DEFUND_RECORD.FUND     = CURRENT_PTR-&gtDEFUND_REC.FUND;
           DEFUND_RECORD.FDESCR   = CURRENT_PTR-&gtDEFUND_REC.FDESCR;
           DEFUND_RECORD.FUNDPCT        = 0;
           DEFUND_RECORD.FLIMIT         = 0;
           DEFUND_RECORD.FPRIOR         = ' ';
           DEFUND_RECORD.FPARTICIPATING =
                         CURRENT_PTR-&gtDEFUND_REC.FPARTICIPATING;
           DEFUND_RECORD.FCOST          = 0;
           DEFUND_RECORD.FEC            = 0;
           DEFUND_RECORD.FTOTAL_AMOUNT  = 0;
           DEFUND_RECORD.FACTUAL_PCT    = 0;
           DEFUND_RECORD.FFUND_TOTAL    = 0;
           DEFUND_RECORD.FADJTOT        = 0;  /* ADDED, PCG 5/1/91 */
           DEFUND_RECORD.FFEDERAL       = ' ';/* ADDED, PCG 5/1/91 */
           DEFUND_RECORD.EFUNDGRP       = ' ';/* ADDED, PCG 5/1/91 */
           DEFUND_RECORD.EFACSFND       = ' ';
     

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

           CALL CONVERT_DEFUND_TO_GPDEFUND;
           ITRC = ITWRITE ('GPDEFUND', '');
         END;   /* THEN */
     
      CURRENT_PTR = CURRENT_PTR-&gtDEFUND_REC.NEXT_PTR;
    END;       /* WHILE */
     
   /*--- FREE THE LINKED LIST ---*/
   CURRENT_PTR = TOP_PTR;
   DO WHILE ( CURRENT_PTR ^= NULL() );
      TOP_PTR = CURRENT_PTR-&gtDEFUND_REC.NEXT_PTR;
      FREE CURRENT_PTR-&gtDEFUND_REC;
      CURRENT_PTR = TOP_PTR;
   END;
     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
 END CREATE_UNIT_DEFUND_RECORDS;
     
 /*------------------------------------------------------------------*/
 /*                 CREATE_PROJECT_DEFUND_RECORDS                    */
 /*                                                                  */
 /*  CREATE A PROJECT LEVEL FUND RECORD FOR EACH UNIQUE CATEGORY     */
 /*  FUND IN THE PROJECT. THE UNIT LEVEL FUND RECORD FOR EACH UNIQUE */
 /*  CATEGORY IS FIRST STORED IN A LINKED-LIST.  UPDATES GPDEFUND.   */
 /*------------------------------------------------------------------*/
 CREATE_PROJECT_DEFUND_RECORDS:        PROC;
     
   DCL SAVE_SEGMENT          CHAR (31),
       STRING                CHAR (5),
       FEDERAL_FLAG          CHAR (1),
       PCT                   FIXED DEC (5,2),
       LIMIT                 FIXED DEC (11,2);
     
   DCL (TOP_PTR,CURRENT_PTR,
        DEFUND_PTR)          POINTER;
   DCL 1 DEFUND_REC BASED,
         2 PCN                  CHAR (13),
         2 UNITNO               CHAR ( 3),
         2 CN                   CHAR ( 4),
         2 FUND                 CHAR ( 6),
         2 FDESCR               CHAR (40),
         2 FPARTICIPATING       CHAR ( 1),
         2 NEXT_PTR             POINTER;
     
   SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
   SHELL$MODULE_SEGMENT = 'CREATE_PROJECT_DEFUND_RECORDS';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
     
   /*--- ALLOCATE A DUMMY NODE AS HEADER OF THE LINK-LIST ----*/
     
   ALLOCATE DEFUND_REC SET (TOP_PTR);
   CURRENT_PTR = TOP_PTR;
   CURRENT_PTR-&gtDEFUND_REC.NEXT_PTR = NULL();
     
   DEPROJ_FOUND = '1'B;
     
   DEPROJ_KEY = ' ';
   ITRC = ITREAD ('GPDEPROJ', DEPROJ_KEY, '0', 'GE');
   IF ITRC = 8
      THEN DEPROJ_FOUND = '0'B;
     
   DO WHILE (DEPROJ_FOUND);
     

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEPROJ_TO_DEPROJ');
           %END;

      CALL CONVERT_GPDEPROJ_TO_DEPROJ;
     
      DEFUND_FOUND = '1'B;
      DEFUND_KEY   = DEPROJ_RECORD.PCN;
     
      ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '', 'GE');
      IF ITRC = 8
         THEN DEFUND_FOUND = '0'B;
      IF DEFUND_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

           CALL CONVERT_GPDEFUND_TO_DEFUND;
         END;
     
      DO WHILE (DEFUND_FOUND &amp DEFUND_RECORD.PCN = DEPROJ_RECORD.PCN);
     
         /*--- SKIP RECORDS WITH BLANK CN - CREATED BY PREVIOUS ---*/
         /*--- PROCEDURE                                        ---*/
         IF DEFUND_RECORD.CN = '    '
            THEN GOTO NEXT_FUND;
     
         ALLOCATE DEFUND_REC SET (DEFUND_PTR);
         CURRENT_PTR-&gtDEFUND_REC.NEXT_PTR       = DEFUND_PTR;
         DEFUND_PTR-&gtDEFUND_REC.NEXT_PTR        = NULL();
         CURRENT_PTR                            = DEFUND_PTR;
     
         CURRENT_PTR-&gtDEFUND_REC.PCN            = DEFUND_RECORD.PCN;
         CURRENT_PTR-&gtDEFUND_REC.UNITNO         = ' ';
         CURRENT_PTR-&gtDEFUND_REC.CN             = ' ';
         CURRENT_PTR-&gtDEFUND_REC.FUND           = DEFUND_RECORD.FUND;
         CURRENT_PTR-&gtDEFUND_REC.FDESCR         = DEFUND_RECORD.FDESCR;
         CURRENT_PTR-&gtDEFUND_REC.FPARTICIPATING =
                                          DEFUND_RECORD.FPARTICIPATING;
     
         NEXT_FUND:
     
         ITRC = ITREAD ('GPDEFUND', '', '', '');
         IF ITRC = 8
            THEN DEFUND_FOUND = '0'B;
         IF DEFUND_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
      END;  /* WHILE DEFUND */
     
      ITRC = ITREAD ('GPDEPROJ', '', '', '');
      IF ITRC = 8
         THEN DEPROJ_FOUND = '0'B;
   END;    /* WHILE DEPROJ */
     
   /*--- ADD THE UNIT-LEVEL FUND RECORDS TO DEFUND ---*/
     
   CURRENT_PTR = TOP_PTR-&gtDEFUND_REC.NEXT_PTR;
   DO WHILE ( CURRENT_PTR ^= NULL() );
      DEFUND_FOUND = '1'B;
      DEFUND_KEY   = CURRENT_PTR-&gtDEFUND_REC.PCN    ||
                     CURRENT_PTR-&gtDEFUND_REC.UNITNO ||
                     CURRENT_PTR-&gtDEFUND_REC.CN     ||
                     CURRENT_PTR-&gtDEFUND_REC.FUND;
     
      ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '', '');
      IF ITRC = 8
         THEN DEFUND_FOUND = '0'B;
      IF DEFUND_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

           CALL CONVERT_GPDEFUND_TO_DEFUND;
         END;
     
      IF ^DEFUND_FOUND
         THEN DO;
           DEFUND_RECORD.PCN         = CURRENT_PTR-&gtDEFUND_REC.PCN;
           DEFUND_RECORD.UNITNO      = CURRENT_PTR-&gtDEFUND_REC.UNITNO;
           DEFUND_RECORD.CN          = CURRENT_PTR-&gtDEFUND_REC.CN;
           DEFUND_RECORD.FUND        = CURRENT_PTR-&gtDEFUND_REC.FUND;
           DEFUND_RECORD.FDESCR      = CURRENT_PTR-&gtDEFUND_REC.FDESCR;
           DEFUND_RECORD.FPARTICIPATING =
                                CURRENT_PTR-&gtDEFUND_REC.FPARTICIPATING;
           DEFUND_RECORD.FUNDPCT        = 0;
           DEFUND_RECORD.FLIMIT         = 0;
           DEFUND_RECORD.FPRIOR         = ' ';
           DEFUND_RECORD.FFEDERAL       = ' ';
           DEFUND_RECORD.EFUNDGRP       = ' '; /* ADDED, PCG 5/1/91 */
           DEFUND_RECORD.EFACSFND       = ' '; /* ADDED, PCG 5/1/91 */
           DEFUND_RECORD.FCOST          = 0;
           DEFUND_RECORD.FEC            = 0;
           DEFUND_RECORD.FTOTAL_AMOUNT  = 0;
           DEFUND_RECORD.FACTUAL_PCT    = 0;
           DEFUND_RECORD.FFUND_TOTAL    = 0;
           DEFUND_RECORD.FADJTOT        = 0;  /* ADDED, PCG 5/1/91 */
     
           CALL CONVERT_DEFUND_TO_GPDEFUND;
           ITRC = ITWRITE ('GPDEFUND', '');
        END;  /* THEN */
     
      CURRENT_PTR = CURRENT_PTR-&gtDEFUND_REC.NEXT_PTR;
    END;      /* WHILE CURRENT_PTR */
     
   /*--- FREE THE LINKED LIST ---*/
   CURRENT_PTR = TOP_PTR;
   DO WHILE ( CURRENT_PTR ^= NULL() );
      TOP_PTR = CURRENT_PTR-&gtDEFUND_REC.NEXT_PTR;
      FREE CURRENT_PTR-&gtDEFUND_REC;
      CURRENT_PTR = TOP_PTR;
   END;
     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
 END CREATE_PROJECT_DEFUND_RECORDS;
     
 /*------------------------------------------------------------------*/
 /*                     COMPUTE_NONPART_FUND_TOTALS                  */
 /*                                                                  */
 /*  COMPUTE TOTAL CONSTRUCTION COST, E&ampC COSTS, AND TOTAL AMOUNTS   */
 /*  FOR NON-PART FUND RECORDS. UPDATES GPDEFUND.                    */
 /*------------------------------------------------------------------*/
 COMPUTE_NONPART_FUND_TOTALS:        PROC;
     
   DCL SAVE_SEGMENT          CHAR (31),
       TEMP_DIV_RESULT       FIXED DEC (5,4);
     
   SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
   SHELL$MODULE_SEGMENT = 'COMPUTE_NONPART_FUND_TOTALS';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
     
   /*----------------------------------------------------------------*/
   /*--- COMPUTE TOTAL CONSTRUCTION COST FOR THE NON-PAR ITEMS FOR --*/
   /*--- EACH OF THE NON-PAR CATEGORY LEVEL FUND RECORDS BY SUMMING -*/
   /*--- THE EXTENDED AMOUNTS OF THE ITEMS WITH NON-PAR FUND CODES.--*/
   /*----------------------------------------------------------------*/
   /*-- COMPUTE TOTAL E&ampC COSTS AND TOTAL AMOUNTS FOR NON-PAR FUND  -*/
   /*-- RECORDS BY APPLYING THE CATEGORY LEVEL E&ampC % TO THE TOTAL  --*/
   /*-- CONST COST FOR THE NON-PAR FUND AND ADDING THAT TO THE TOTAL-*/
   /*-- CONST COST TO GET THAT TOTAL AMOUNT.  THE E&ampC IS NOT APPLIED-*/
   /*-- TO FIXED COST CATEGORIES.  FIXED COST CATEGORIES DO NOT HAVE-*/
   /*-- E&ampC APPLIED.                                              ---*/
   /*----------------------------------------------------------------*/
     
   /*--  ALLOCATE TOTAL AMOUNT TO THE FUND FOR FUNDED AMOUNT       --*/
     
   DEFUND_FOUND = '1'B;
   DEFUND_KEY = ' ';
     
   ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '0', 'GE');
   IF ITRC = 8
      THEN DEFUND_FOUND = '0'B;
     
   DO WHILE (DEFUND_FOUND);

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

      CALL CONVERT_GPDEFUND_TO_DEFUND;

      IF DEFUND_RECORD.CN = ' ' | DEFUND_RECORD.FPARTICIPATING = 'Y' |
         DEFUND_RECORD.CN = ZERO_CATEGORY | DEFUND_RECORD.UNITNO = ' '
        THEN GOTO NEXT_FUND;
            
      DEITEM_FOUND = '1'B;
      DEITEM_KEY   = DEFUND_RECORD.PCN || DEFUND_RECORD.CN;
     
      ITRC = ITREAD ('GPDEITEM', DEITEM_KEY, '', 'GE');
      IF ITRC = 8
         THEN DEITEM_FOUND = '0'B;
      IF DEITEM_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEITEM_TO_DEITEM');
           %END;

           CALL CONVERT_GPDEITEM_TO_DEITEM;
         END;
     
      DO WHILE (DEITEM_FOUND &amp DEITEM_RECORD.PCN = DEFUND_RECORD.PCN &amp
                               DEITEM_RECORD.CN  = DEFUND_RECORD.CN);

         IF DEITEM_RECORD.INONPAR = DEFUND_RECORD.FUND
            THEN DEFUND_RECORD.FCOST = DEFUND_RECORD.FCOST +
                                       DEITEM_RECORD.IEXTAMT;
     
         ITRC = ITREAD ('GPDEITEM', '', '', '');
         IF ITRC = 8
            THEN DEITEM_FOUND = '0'B;
         IF DEITEM_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEITEM_TO_DEITEM');
           %END;

              CALL CONVERT_GPDEITEM_TO_DEITEM;
            END;

      END;  /* WHILE DEITEM */
     
      DECATG_FOUND = '1'B;
      DECATG_KEY   = DEFUND_RECORD.PCN    ||
                     DEFUND_RECORD.UNITNO ||
                     DEFUND_RECORD.CN;
     
      ITRC = ITREAD ('GPDECATG', DECATG_KEY, '', '');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;
      IF DECATG_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

           CALL CONVERT_GPDECATG_TO_DECATG;
         END;
     
      IF DECATG_RECORD.CFIXED_COST = 'Y'
         THEN DEFUND_RECORD.FEC = 0;
         ELSE DO;
            TEMP_DIV_RESULT =
                     DIVIDE(DECATG_RECORD.CEC_PERCENT,100,5,4);
            /*-- CHECK BEFORE DIVIDE --*/
            IF TEMP_DIV_RESULT = 0
               THEN DEFUND_RECORD.FEC = 0.00;
               ELSE DEFUND_RECORD.FEC = MULTIPLY(DEFUND_RECORD.FCOST,
                                 TEMP_DIV_RESULT,11,2);
         END; /* ELSE */
  /*+++*/
      IF DECATG_RECORD.CFIXED_COST = 'Y'
         THEN DEFUND_RECORD.FADJTOT = 0;
         ELSE DO;
            TEMP_DIV_RESULT =
                     DIVIDE(DECATG_RECORD.ADJPCT,100,5,4);
            /*-- CHECK BEFORE DIVIDE --*/
            IF TEMP_DIV_RESULT = 0
               THEN DEFUND_RECORD.FADJTOT = 0.00;
               ELSE DEFUND_RECORD.FADJTOT = 
                    MULTIPLY(DEFUND_RECORD.FCOST,
                                 TEMP_DIV_RESULT,11,2);
         END; /* ELSE */

  /*+++*/     
      DEFUND_RECORD.FTOTAL_AMOUNT =
                    DEFUND_RECORD.FCOST + DEFUND_RECORD.FEC +
                    /*+++*/       DEFUND_RECORD.FADJTOT; /*+++*/
     
      DEFUND_RECORD.FFUND_TOTAL   = DEFUND_RECORD.FTOTAL_AMOUNT;
      DEFUND_KEY = DEFUND_RECORD.PCN    ||
                   DEFUND_RECORD.UNITNO ||
                   DEFUND_RECORD.CN     ||
                   DEFUND_RECORD.FUND;
     
      CALL CONVERT_DEFUND_TO_GPDEFUND;
      ITRC = ITWRITE ('GPDEFUND', '');
     
      NEXT_FUND:
     
      ITRC = ITREAD ('GPDEFUND', '', '', '');
      IF ITRC = 8
         THEN DEFUND_FOUND = '0'B;
   END;  /* WHILE DEFUND */
     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
 END COMPUTE_NONPART_FUND_TOTALS;
     
 /*------------------------------------------------------------------*/
 /*                    COMPUTE_CATG_NONPART_TOTALS                   */
 /*                                                                  */
 /*    COMPUTE THE CATEGORY TOTAL NON-PART CONST. COSTS, E&ampC COSTS,  */
 /*    AND AMOUNTS BY SUMMING THE VALUES FROM THE NON-PART FUNDS     */
 /*    FOR THE CATEGORY. UPDATES GPDECATG.                           */
 /*------------------------------------------------------------------*/
 COMPUTE_CATG_NONPART_TOTALS:     PROC;
     
   DCL SAVE_SEGMENT          CHAR (31);
     
   SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
   SHELL$MODULE_SEGMENT = 'COMPUTE_CATG_NONPART_TOTALS';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
     
   DECATG_FOUND = '1'B;
     
   DECATG_KEY = ' ';
   ITRC = ITREAD ('GPDECATG', DECATG_KEY, '0', 'GE');
   IF ITRC = 8
      THEN DECATG_FOUND = '0'B;
     
   DO WHILE (DECATG_FOUND);
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

      CALL CONVERT_GPDECATG_TO_DECATG;
     
      IF DECATG_RECORD.CN = ' ' &amp DECATG_RECORD.CN = ZERO_CATEGORY
         THEN GOTO NEXT_CATEGORY;
     
      DEFUND_FOUND = '1'B;
      DEFUND_KEY   = DECATG_RECORD.PCN    ||
                     DECATG_RECORD.UNITNO ||
                     DECATG_RECORD.CN;
     
      ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '', 'GE');
      IF ITRC = 8
         THEN DEFUND_FOUND = '0'B;
      IF DEFUND_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

           CALL CONVERT_GPDEFUND_TO_DEFUND;
         END;
     
      DO WHILE (DEFUND_FOUND &amp DEFUND_RECORD.PCN  = DECATG_RECORD.PCN &amp
                DEFUND_RECORD.UNITNO = DECATG_RECORD.UNITNO &amp
                DEFUND_RECORD.CN     = DECATG_RECORD.CN);
     
         IF DEFUND_RECORD.FPARTICIPATING = 'Y'
            THEN GOTO NEXT_FUND;
     
         DECATG_RECORD.CNPAR_CONST_TOTAL =
                  DECATG_RECORD.CNPAR_CONST_TOTAL +
                                       DEFUND_RECORD.FCOST;

         DECATG_RECORD.CNPAR_EC_TOTAL = DECATG_RECORD.CNPAR_EC_TOTAL +
                                        DEFUND_RECORD.FEC;

   /*+++*/
         DECATG_RECORD.CADJNPAR = DECATG_RECORD.CADJNPAR +
                                        DEFUND_RECORD.FADJTOT;
   /*+++*/
  
         DECATG_RECORD.CNPAR_TOTAL_AMOUNT =
                   DECATG_RECORD.CNPAR_TOTAL_AMOUNT +
                                        DEFUND_RECORD.FTOTAL_AMOUNT;
     
         NEXT_FUND:
     
         ITRC = ITREAD ('GPDEFUND', '', '', '');
         IF ITRC = 8
            THEN DEFUND_FOUND = '0'B;
         IF DEFUND_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
     
       END;  /* WHILE DEFUND */
     
      DECATG_KEY = DECATG_RECORD.PCN ||
                   DECATG_RECORD.UNITNO || DECATG_RECORD.CN;
     
      CALL CONVERT_DECATG_TO_GPDECATG;
      ITRC = ITWRITE ('GPDECATG', '');
     
      NEXT_CATEGORY:
     
      ITRC = ITREAD ('GPDECATG', '', '', '');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;
   END;  /* WHILE DECATG */
     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
 END COMPUTE_CATG_NONPART_TOTALS;
     
 /*------------------------------------------------------------------*/
 /*                    COMPUTE_CATG_PART_TOTALS                      */
 /*                                                                  */
 /* COMPUTE THE CATEGORY PARTICIPATING CONSTRUCTION COSTS, E&ampC COSTS,*/
 /* TOTAL AMOUNTS AND THE CATEGORY COMBINED PART. AND NON-PART.      */
 /* TOTALS. UPDATES GPDECATG.                                        */
 /*------------------------------------------------------------------*/
 COMPUTE_CATG_PART_TOTALS:        PROC;
     
   DCL SAVE_SEGMENT            CHAR (31),
       UNIT_CONVERSION_FACTOR  FIXED DEC (15,5),
       TOTAL_SQUARE_FOOTAGE    FIXED DEC (9,3),
       TEMP_DIV_RESULT         FIXED DEC (5,4),
       TEMP_DIV_RESULT1        FIXED DEC (14,5);
     
   SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
   SHELL$MODULE_SEGMENT = 'COMPUTE_CATG_PART_TOTALS';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
     
   /*----------------------------------------------------------------*/
   /*-- COMPUTE THE CATEGORY PARTICIPATING CONST. COSTS BY SUMMING --*/
   /*-- THE EXTENDED AMOUNTS OF THE ITEMS IN THE CATEGORY WHICH HAVE-*/
   /*-- BLANK NON-PAR FUND CODES.                                 ---*/
     
   /*--- COMPUTE THE CATEGORY PARTICIPATING E&ampC COSTS AND TOTAL   ---*/
   /*--- AMOUNTS BY APPLYING THE CATEGORY LEVEL E&ampC PERCENTAGE TO ---*/
   /*--- THE CATEGORY TOTAL CONST. COST, GIVING THE CATEGORY E&ampC  ---*/
   /*--- COST, AND ADDING THE E&ampC COST TO THE CONSTRUCTION COST TO --*/
   /*--- GIVE THE TOTAL CATEGORY AMOUNT.                           --*/
     
   /*--- FIXED COST CATEGORIES DO NOT HAVE E&ampC APPLIED             --*/
     
   /*--- COMPUTE THE CATEGORY COMBINED NON-PAR AND PARTICIPATING   --*/
   /*--- TOTALS.  SET THE UNFUNDED AMOUNT INITIALLY TO THE TOTAL   --*/
   /*--- PARTICIPATING AMOUNT OF THE CATEGORY.                     --*/
   /*----------------------------------------------------------------*/
     
   DECATG_FOUND = '1'B;
     
   DECATG_KEY = ' ';
   ITRC = ITREAD ('GPDECATG', DECATG_KEY, '0', 'GE');
   IF ITRC = 8
      THEN DECATG_FOUND = '0'B;
     
   DO WHILE (DECATG_FOUND);

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

      CALL CONVERT_GPDECATG_TO_DECATG;
     
      IF DECATG_RECORD.CN = ' ' | DECATG_RECORD.CN = ZERO_CATEGORY
         THEN GOTO NEXT_CATEGORY;

      DECATG_RECORD.CPAR_CONST_TOTAL = 0;
     
      DEITEM_FOUND = '1'B;
      DEITEM_KEY   = DECATG_RECORD.PCN || DECATG_RECORD.CN;
     
      ITRC = ITREAD ('GPDEITEM', DEITEM_KEY, '', 'GE');
      IF ITRC = 8
         THEN DEITEM_FOUND = '0'B;
      IF DEITEM_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEITEM_TO_DEITEM');
           %END;

           CALL CONVERT_GPDEITEM_TO_DEITEM;
         END;
     
      DO WHILE (DEITEM_FOUND &amp DEITEM_RECORD.PCN = DECATG_RECORD.PCN &amp
                DEITEM_RECORD.CN  = DECATG_RECORD.CN);
     
         IF DEITEM_RECORD.ILOWCOST = 'Y' &amp DEITEM_RECORD.INONPAR = ' '
            THEN DECATG_RECORD.CPAR_CONST_TOTAL=
                      DECATG_RECORD.CPAR_CONST_TOTAL +
                                        DEITEM_RECORD.IEXTAMT;
         ITRC = ITREAD ('GPDEITEM', '', '', '');
         IF ITRC = 8
            THEN DEITEM_FOUND = '0'B;
         IF DEITEM_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEITEM_TO_DEITEM');
           %END;

              CALL CONVERT_GPDEITEM_TO_DEITEM;
            END;
     
      END;  /* WHILE DEITEM */
     
      IF DECATG_RECORD.CFIXED_COST = 'Y'
         THEN DECATG_RECORD.CPAR_EC_TOTAL = 0;
         ELSE DO;
              /*---------------------------------------------------*/
              /*--- DECATG_RECORD.CEC_PERCENT CONTAINS THE E&ampC   --*/
              /*--- PERCENT WHICH IS APPLICABLE:  THE OVERRIDING --*/
              /*--- CATEGORY E&ampC PERCENT IF SPECIFIED, OTHERWISE --*/
              /*--- THE PROJECT E&ampC PERCENT.                     --*/
              /*---------------------------------------------------*/
              IF DECATG_RECORD.CEC_PERCENT ^= 0
                THEN DO;
                  TEMP_DIV_RESULT =
                          DIVIDE(DECATG_RECORD.CEC_PERCENT,100,5,4);
                  DECATG_RECORD.CPAR_EC_TOTAL =
                      MULTIPLY(DECATG_RECORD.CPAR_CONST_TOTAL,
                               TEMP_DIV_RESULT,11,2);
                END; /* THEN */
                ELSE DECATG_RECORD.CPAR_EC_TOTAL = 0;
  /*+++*/
              IF DECATG_RECORD.ADJPCT ^= 0
                THEN DO;
                  TEMP_DIV_RESULT =
                          DIVIDE(DECATG_RECORD.ADJPCT,100,5,4);
                  DECATG_RECORD.CADJPAR =
                      MULTIPLY(DECATG_RECORD.CPAR_CONST_TOTAL,
                               TEMP_DIV_RESULT,11,2);
                END; /* THEN */
                ELSE DECATG_RECORD.CADJPAR = 0;
  /*+++*/

        END; /* OUTER ELSE */
     
      DECATG_RECORD.CPAR_TOTAL_AMOUNT =
                    DECATG_RECORD.CPAR_CONST_TOTAL +
                                        DECATG_RECORD.CPAR_EC_TOTAL +
                             /*+++*/    DECATG_RECORD.CADJPAR; /*+++*/
     
      DECATG_RECORD.CCONST_TOTAL  = DECATG_RECORD.CNPAR_CONST_TOTAL +
                                    DECATG_RECORD.CPAR_CONST_TOTAL;
     
      DECATG_RECORD.CEC_TOTAL     = DECATG_RECORD.CNPAR_EC_TOTAL +
                                    DECATG_RECORD.CPAR_EC_TOTAL;

  /*+++*/
      DECATG_RECORD.CADJTOT       = DECATG_RECORD.CADJNPAR +
                                    DECATG_RECORD.CADJPAR;
  /*+++*/     

      DECATG_RECORD.CTOTAL_AMOUNT = DECATG_RECORD.CNPAR_TOTAL_AMOUNT +
                                    DECATG_RECORD.CPAR_TOTAL_AMOUNT;
     
      DECATG_RECORD.CUNFUNDED_AMOUNT = DECATG_RECORD.CPAR_TOTAL_AMOUNT;
     
      DECATG_KEY = DECATG_RECORD.PCN || DECATG_RECORD.UNITNO ||
                   DECATG_RECORD.CN;
     
      IF DECATG_RECORD.CLENGTH ^= 0
         THEN DO;
              /*--- RTD 11/28/94 - GET GPDEPROJ RECORD FOR THE ---*/
              /*--- CATEGORY AND USE UNIT-SYSTEM-DEPENDENT     ---*/
              /*--- CONVERSION FACTOR                          ---*/
              IF DEPROJ_RECORD.PCN ^= DECATG_RECORD.PCN
                 THEN DO;
                   DEPROJ_FOUND = '1'B;
                   DEPROJ_KEY = DECATG_RECORD.PCN;
                   ITRC = ITREAD ('GPDEPROJ', DEPROJ_KEY, '0', '');
                   IF ITRC = 8
                      THEN DEPROJ_FOUND = '0'B;

                   IF DEPROJ_FOUND
                      THEN DO;
                        %IF DEBUGGER = 'ON'
                            %THEN %DO;
                          PUT SKIP LIST 
                          ('CALL CONVERT_GPDEPROJ_TO_DEPROJ');
                            %END;
                        CALL CONVERT_GPDEPROJ_TO_DEPROJ;
                      END;
                 END;
              SELECT;
                WHEN (DEPROJ_RECORD.ASPHSTAT = 'E')
                  DO;
                    UNIT_CONVERSION_FACTOR = 5280.0;
                    DECATG_RECORD.CCOST_PER_FLAG = 'M';
                  END;
                WHEN (DEPROJ_RECORD.ASPHSTAT = 'M')
                  DO;
                    UNIT_CONVERSION_FACTOR = 1000.0;
                    DECATG_RECORD.CCOST_PER_FLAG = 'K';
                  END;
                WHEN (DEPROJ_RECORD.ASPHSTAT = 'N')
                  DO;
                    UNIT_CONVERSION_FACTOR = 1.0;
                    DECATG_RECORD.CCOST_PER_FLAG = 'N';
                  END;
              END;

              DECATG_RECORD.CCOST_PER =
                  DIVIDE(DECATG_RECORD.CTOTAL_AMOUNT,
                         DECATG_RECORD.CLENGTH,15,6)
                         * UNIT_CONVERSION_FACTOR;
         END;
         ELSE IF DECATG_RECORD.CBRLEN ^= 0
            THEN DO;
              IF DECATG_RECORD.CBRWID ^= 0
                 THEN DO;
     
                   TOTAL_SQUARE_FOOTAGE =
                     MULTIPLY(DECATG_RECORD.CBRLEN,
                              DECATG_RECORD.CBRWID, 9,3);
     
                   TEMP_DIV_RESULT1 =
                      DIVIDE(DECATG_RECORD.CTOTAL_AMOUNT,
                            TOTAL_SQUARE_FOOTAGE,14,5);
                   DECATG_RECORD.CCOST_PER =
                         MULTIPLY(TEMP_DIV_RESULT1,9, 9,0);
                 END;  /* INNER THEN */
                 ELSE DECATG_RECORD.CCOST_PER = 0;
              SELECT;
                WHEN (DEPROJ_RECORD.ASPHSTAT = 'E')
                    DECATG_RECORD.CCOST_PER_FLAG = 'Y';
                WHEN (DEPROJ_RECORD.ASPHSTAT = 'M')
                    DECATG_RECORD.CCOST_PER_FLAG = 'R';
                WHEN (DEPROJ_RECORD.ASPHSTAT = 'N')
                    DECATG_RECORD.CCOST_PER_FLAG = 'N';
              END;
            END;  /* OUTER THEN */
     
      CALL CONVERT_DECATG_TO_GPDECATG;
      ITRC = ITWRITE ('GPDECATG', '');
     
      NEXT_CATEGORY:
     
      ITRC = ITREAD ('GPDECATG', '', '','');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;
   END;  /* WHILE DECATG */
     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

 END COMPUTE_CATG_PART_TOTALS;
     
     
 /*------------------------------------------------------------------*/
 /*                         COMPUTE_0_CATG_AMOUNTS                   */
 /*                                                                  */
 /*    COMPUTE THE AMOUNT SUBJECT TO PROJECT-LEVEL FUNDING FOR EACH  */
 /*    OF THE PROJECTS.  THE AMOUNT IS THE SUM OF THE PARTICIPATING  */
 /*    TOTALS OF CATEGORIES WHICH DO NOT HAVE FUNDING SPECIFIED AT   */
 /*    THE PRIORITY LEVELS WHICH ARE SPECIFIED AT THE PROJECT-LEVEL. */
 /*    UPDATES GPDECATG.                                             */
 /*------------------------------------------------------------------*/
 COMPUTE_0_CATG_AMOUNTS:     PROC;
     
   DCL SAVE_SEGMENT          CHAR (31),
       (TOTAL_0_AMOUNT,
        TOTAL_0_EC,
        TOTAL_0_ADJ, /*+++*/
        TOTAL_0_COST)        FIXED DEC (11,2);
     
   SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
   SHELL$MODULE_SEGMENT = 'COMPUTE_0_CATG_AMOUNTS';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
     
   DEPROJ_FOUND = '1'B;
     
   DEPROJ_KEY = ' ';
   ITRC = ITREAD ('GPDEPROJ', DEPROJ_KEY, '0', 'GE');
   IF ITRC = 8
      THEN DEPROJ_FOUND = '0'B;
     
   DO WHILE (DEPROJ_FOUND);
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEPROJ_TO_DEPROJ');
           %END;

      CALL CONVERT_GPDEPROJ_TO_DEPROJ;
     
      /*--- CHECK FOR PROJECT-LEVEL FUNDING FOR PROJECT ---*/
      DEFUND_FOUND = '1'B;
      DEFUND_KEY_2 = DEPROJ_RECORD.PCN ||
                     ZERO_CATEGORY || '1' || '      ';
     
      ITRC = ITREAD ('GPDEFUND', DEFUND_KEY_2, '2', 'GE');
      IF ITRC = 8
         THEN DEFUND_FOUND = '0'B;
      IF DEFUND_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

           CALL CONVERT_GPDEFUND_TO_DEFUND;
         END;
     
      IF ^DEFUND_FOUND | DEFUND_RECORD.PCN    ^= DEPROJ_RECORD.PCN |
                         DEFUND_RECORD.CN     ^= ZERO_CATEGORY     |
                         DEFUND_RECORD.FPRIOR ^= '1'
          THEN GOTO NEXT_PROJECT;
     
      /*--- COMPUTE 0 CATEGORY TOTALS BY SUMMING UNFUNDED AMOUNTS --*/
      /*--- OF OTHER CATEGORIES WHICH DO NOT HAVE PRIORITY 1 FUNDS--*/
      TOTAL_0_AMOUNT = 0;
      TOTAL_0_EC     = 0;
      TOTAL_0_ADJ    = 0;
      TOTAL_0_COST   = 0;
     
      DECATG_FOUND = '1'B;
      DECATG_KEY   = DEPROJ_RECORD.PCN;
     
      ITRC = ITREAD ('GPDECATG', DECATG_KEY, '0', 'GE');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;
      IF DECATG_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

           CALL CONVERT_GPDECATG_TO_DECATG;
         END;
     
      DO WHILE (DECATG_FOUND &amp DECATG_RECORD.PCN = DEPROJ_RECORD.PCN);
     
         IF DECATG_RECORD.CN = ' ' |
            DECATG_RECORD.CN = ZERO_CATEGORY |
            DECATG_RECORD.CUNFUNDED_AMOUNT = 0 |
            DECATG_RECORD.CLOWCOST = 'N'
            THEN GOTO NEXT_CATEGORY;
     
     
         DEFUND_FOUND = '1'B;
         DEFUND_KEY_2   = DECATG_RECORD.PCN ||
                          DECATG_RECORD.CN || '1' || '      ';
     
         ITRC = ITREAD ('GPDEFUND', DEFUND_KEY_2, '2', 'GE');
         IF ITRC = 8
            THEN DEFUND_FOUND = '0'B;
         IF DEFUND_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
     
         IF DEFUND_FOUND &amp DEFUND_RECORD.PCN = DECATG_RECORD.PCN &amp
                           DEFUND_RECORD.CN  = DECATG_RECORD.CN  &amp
                           DEFUND_RECORD.FPRIOR = '1'
            THEN GOTO NEXT_CATEGORY;
     
         TOTAL_0_AMOUNT = TOTAL_0_AMOUNT +
                            DECATG_RECORD.CPAR_TOTAL_AMOUNT;
         TOTAL_0_EC    = TOTAL_0_EC   + DECATG_RECORD.CPAR_EC_TOTAL;
 /*+++*/ TOTAL_0_ADJ   = TOTAL_0_ADJ  + DECATG_RECORD.CADJPAR;
         TOTAL_0_COST  = TOTAL_0_COST + DECATG_RECORD.CPAR_CONST_TOTAL;
     
         NEXT_CATEGORY:
     
         ITRC = ITREAD ('GPDECATG', '', '', '');
         IF ITRC = 8
            THEN DECATG_FOUND = '0'B;
         IF DECATG_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

              CALL CONVERT_GPDECATG_TO_DECATG;
            END;

      END;  /* WHILE DECATG */
     
      DECATG_FOUND = '1'B;
      DECATG_KEY_1   = DEPROJ_RECORD.PCN || ZERO_CATEGORY;
     
      ITRC = ITREAD ('GPDECATG', DECATG_KEY_1, '1', '');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

      CALL CONVERT_GPDECATG_TO_DECATG;
     
      DECATG_RECORD.CUNFUNDED_AMOUNT  = TOTAL_0_AMOUNT;
      DECATG_RECORD.CPAR_TOTAL_AMOUNT = TOTAL_0_AMOUNT;
      DECATG_RECORD.CTOTAL_AMOUNT     = TOTAL_0_AMOUNT;
      DECATG_RECORD.CPAR_EC_TOTAL     = TOTAL_0_EC;
      DECATG_RECORD.CADJPAR           = TOTAL_0_ADJ;   /*+++*/
      DECATG_RECORD.CPAR_CONST_TOTAL  = TOTAL_0_COST;
     
      CALL CONVERT_DECATG_TO_GPDECATG;
      ITRC = ITWRITE ('GPDECATG', '');
     
      NEXT_PROJECT:
     
      ITRC = ITREAD ('GPDEPROJ', '', '', '');
      IF ITRC = 8
         THEN DEPROJ_FOUND = '0'B;
   END;  /* WHILE DEPROJ */
     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
 END COMPUTE_0_CATG_AMOUNTS;
     
     
 /*------------------------------------------------------------------*/
 /*                 DISTRIBUTE_0_UNFUNDED_AMOUNTS                    */
 /*                                                                  */
 /*    DISTRIBUTE THE REMAINING UNFUNDED AMOUNTS OF THE ZERO         */
 /*    CATEGORIES (PROJECT LEVEL FUNDING) TO THE CATEGORIES WHICH    */
 /*    WERE SUBJECT TO THE PROJECT-LEVEL FUNDING. UPDATES GPDECATG.  */
 /*------------------------------------------------------------------*/
 DISTRIBUTE_0_UNFUNDED_AMOUNTS:        PROC;
     
   DCL SAVE_SEGMENT          CHAR (31),
       (UNFUNDED_0_AMOUNT,
        TOTAL_0_AMOUNT)      FIXED DEC (11,2),
        UNFUNDED_AMOUNT      FIXED DEC (12,3),
        TEMP_RESULT          FIXED DEC (15,12);
     
   SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
   SHELL$MODULE_SEGMENT = 'DISTRIBUTE_0_UNFUNDED_AMOUNTS';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
     
   DEPROJ_FOUND = '1'B;
   DEPROJ_KEY = ' ';
     
   ITRC = ITREAD ('GPDEPROJ', DEPROJ_KEY, '0', 'GE');
   IF ITRC = 8
      THEN DEPROJ_FOUND = '0'B;
     
   DO WHILE (DEPROJ_FOUND);
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEPROJ_TO_DEPROJ');
           %END;

      CALL CONVERT_GPDEPROJ_TO_DEPROJ;
     
      DECATG_FOUND = '1'B;
      DECATG_KEY_1   = DEPROJ_RECORD.PCN || ZERO_CATEGORY;
     
      ITRC = ITREAD ('GPDECATG', DECATG_KEY_1, '1', '');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;
     
      IF ^DECATG_FOUND
         THEN GOTO NEXT_PROJECT;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

      CALL CONVERT_GPDECATG_TO_DECATG;
     
      UNFUNDED_0_AMOUNT = DECATG_RECORD.CUNFUNDED_AMOUNT;
     
      TOTAL_0_AMOUNT    = DECATG_RECORD.CTOTAL_AMOUNT;
     
      DECATG_RECORD.CUNFUNDED_AMOUNT = 0;
     
      CALL CONVERT_DECATG_TO_GPDECATG;
      ITRC = ITWRITE ('GPDECATG', '');
     
      DECATG_FOUND = '1'B;
      DECATG_KEY_1   = DEPROJ_RECORD.PCN;
     
      ITRC = ITREAD ('GPDECATG', DECATG_KEY_1, '1', 'GE');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;
      IF DECATG_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

           CALL CONVERT_GPDECATG_TO_DECATG;
         END;
     
      DO WHILE (DECATG_FOUND &amp DECATG_RECORD.PCN = DEPROJ_RECORD.PCN);
     
         IF DECATG_RECORD.CN = ' '           |
            DECATG_RECORD.CN = ZERO_CATEGORY |
            DECATG_RECORD.CUNFUNDED_AMOUNT = 0 |
            DECATG_RECORD.CLOWCOST = 'N'
           THEN GOTO NEXT_CATEGORY;
     
         /*--- CHECK FOR CATEGORY LEVEL PRIORITY 1 FUNDING ---*/
         DEFUND_FOUND = '1'B;
         DEFUND_KEY_2 = DEPROJ_RECORD.PCN ||
                        DECATG_RECORD.CN || '1';
     
         ITRC = ITREAD ('GPDEFUND', DEFUND_KEY_2, '2', 'GE');
         IF ITRC = 8
            THEN DEFUND_FOUND = '0'B;
         IF DEFUND_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
     
         IF  DEFUND_FOUND &amp DEFUND_RECORD.PCN = DEPROJ_RECORD.PCN &amp
             DEFUND_RECORD.CN = DECATG_RECORD.CN &amp
             DEFUND_RECORD.FPRIOR = '1'
            THEN GOTO NEXT_CATEGORY;
     
         /*--- DISTRIBUTE PERCENTAGE OF TOTAL UNFUNDED AMOUNT ---*/
         /*--- TO THE CATEGORY BASED ON RATIO OF THE CATEGORY ---*/
         /*--- PARTICIPATING TOTAL AMOUNT TO THE TOTAL 000    ---*/
         /*--- AMOUNT.                                        ---*/
     
         /*-- CHECK BEFORE DIVISION, 8/16/88, gnc --*/
         IF TOTAL_0_AMOUNT = 0
            THEN TEMP_RESULT = 0;
            ELSE TEMP_RESULT =
               DIVIDE(DECATG_RECORD.CPAR_TOTAL_AMOUNT,
                      TOTAL_0_AMOUNT,15,12);
     
         UNFUNDED_AMOUNT =
                 MULTIPLY(UNFUNDED_0_AMOUNT,TEMP_RESULT,12,3);
     
         DECATG_RECORD.CUNFUNDED_AMOUNT = ROUND (UNFUNDED_AMOUNT,2);
     
         /* UNFUNDED_0_AMOUNT = UNFUNDED_0_AMOUNT -   ----*/
         /* DECATG_RECORD.CUNFUNDED_ ---*/
     
         CALL CONVERT_DECATG_TO_GPDECATG;
         ITRC = ITWRITE ('GPDECATG', '');
     
         NEXT_CATEGORY:
     
         ITRC = ITREAD ('GPDECATG', '', '', '');
         IF ITRC = 8
            THEN DECATG_FOUND = '0'B;
         IF DECATG_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

              CALL CONVERT_GPDECATG_TO_DECATG;
            END;
       END;  /* WHILE DECATG */
     
      NEXT_PROJECT:
     
      ITRC = ITREAD ('GPDEPROJ', '', '','');
      IF ITRC = 8
         THEN DEPROJ_FOUND = '0'B;
   END;  /* WHILE DEPROJ */
     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
 END DISTRIBUTE_0_UNFUNDED_AMOUNTS;
     
     
 /*------------------------------------------------------------------*/
 /*                     ALLOCATE_CATEGORY_FUNDING                    */
 /*                                                                  */
 /*    ALLOCATE THE CUNFUNDED_AMOUNT IN THE CURRENT CATEGORY RECORD  */
 /*    TO THE CATEGORY'S FUNDING BASED ON FUNDING PRIORITIES, FUNDING*/
 /*    LIMITS, AND PRIORITY PARTICIPATION PERCENTAGES.               */
 /*    UPDATES GPDECATG, GPDEFUND.                                   */
 /*------------------------------------------------------------------*/
 ALLOCATE_CATEGORY_FUNDING:        PROC;
     
   DCL SAVE_SEGMENT                 CHAR (31),
       I                            FIXED BIN(15),
       PRIORITY                     CHAR (1),
       SAVE_DEFUND_KEY_2            CHAR (24),
       TOTAL_LIMIT                  FIXED DEC (13,3) INIT (0),
       TOTAL_PRIORITY_FUND_AMOUNT   FIXED DEC (13,3) INIT (0),
       TOTAL_LIMITED_FUND_PERCENT   FIXED DEC (13,3) INIT (0),
       TOTAL_UNLIMITED_FUND_PERCENT FIXED DEC (13,3) INIT (0),
       AMOUNT_FOR_UNLIMITED_FUNDS   FIXED DEC (13,3) INIT (0),
       FUND_TOTAL                   FIXED DEC (13,3) INIT (0),
       FUND_PCT                     FIXED DEC (15,12) INIT (0),
       TOTAL_LIMIT_WILL_BE_EXCEEDED BIT(1);
     
     
   SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
   SHELL$MODULE_SEGMENT = 'ALLOCATE_CATEGORY_FUNDING';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
     
   DO I = 1 TO 9;
     
      PRIORITY = TRIM(CHAR(I));
     
      SAVE_DEFUND_KEY_2 = DECATG_RECORD.PCN || DECATG_RECORD.CN ||
                          PRIORITY || '      ';
     
      DEFUND_FOUND = '1'B;
     
       ITRC = ITREAD ('GPDEFUND', SAVE_DEFUND_KEY_2, '2', 'GE');
       IF ITRC = 8
          THEN DEFUND_FOUND = '0'B;
       IF DEFUND_FOUND
          THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

            CALL CONVERT_GPDEFUND_TO_DEFUND;
          END;
     
        IF ^DEFUND_FOUND | DEFUND_RECORD.PCN ^= DECATG_RECORD.PCN |
           DEFUND_RECORD.CN ^= DECATG_RECORD.CN |
           DEFUND_RECORD.FPRIOR ^= PRIORITY
         THEN GOTO NEXT_PRIORITY;
     
      /*-------------------------------------------------------------*/
      /* FOR THE CURRENT PRIORITY WITHIN THE CATEGORY, COMPUTE THE   */
      /* PRIORITY PARTICIPATION PERCENTAGE TOTALS. THE TOTAL         */
      /* UNLIMITED FUND PERCENT IS THE SUM OF THE PARTICIPATION      */
      /* PERCENTS OF ALL UNLIMITED FUNDS.  THE TOTAL LIMITED FUND    */
      /* PERCENT IS THE SUM OF THE PARTICIPATION PERCENTS OF ALL     */
      /* FUNDS WITH APPLIED LIMITS.                                  */
      /*-------------------------------------------------------------*/
     
      TOTAL_LIMITED_FUND_PERCENT   = 0;
      TOTAL_UNLIMITED_FUND_PERCENT = 0;
     
      DO WHILE (DEFUND_FOUND &amp DEFUND_RECORD.PCN = DECATG_RECORD.PCN &amp
                DEFUND_RECORD.CN = DECATG_RECORD.CN &amp
                DEFUND_RECORD.FPRIOR = PRIORITY);
     
         IF DEFUND_RECORD.FLIMIT = 0
            THEN TOTAL_UNLIMITED_FUND_PERCENT =
                  TOTAL_UNLIMITED_FUND_PERCENT + DEFUND_RECORD.FUNDPCT;
            ELSE TOTAL_LIMITED_FUND_PERCENT =
                  TOTAL_LIMITED_FUND_PERCENT + DEFUND_RECORD.FUNDPCT;
     
         ITRC = ITREAD ('GPDEFUND', '', '', '');
         IF ITRC = 8
            THEN DEFUND_FOUND = '0'B;
         IF DEFUND_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
     
      END;  /* WHILE DEFUND */
     
      /*-------------------------------------------------------------*/
      /* FOR THE CURRENT PRIORITY WITHIN THE CATEGORY, COMPUTE THE   */
      /* TOTAL AMOUNT OF LIMITED FUNDS BY SUMMING THE FUNDING LIMITS */
      /* FOR ALL THE  FUNDS.                                         */
      /*-------------------------------------------------------------*/
     
      DEFUND_FOUND = '1'B;
      ITRC = ITREAD ('GPDEFUND', SAVE_DEFUND_KEY_2, '2', 'GE');
      IF ITRC = 8
         THEN DEFUND_FOUND = '0'B;
      IF DEFUND_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
     
     
      TOTAL_LIMIT = 0;
      DO WHILE (DEFUND_FOUND &amp DEFUND_RECORD.PCN = DECATG_RECORD.PCN &amp
                DEFUND_RECORD.CN = DECATG_RECORD.CN &amp
                DEFUND_RECORD.FPRIOR = PRIORITY );
     
         IF DEFUND_RECORD.FLIMIT &gt 0  &amp  DECATG_RECORD.CLOWCOST = 'Y'
            THEN TOTAL_LIMIT = TOTAL_LIMIT + DEFUND_RECORD.FLIMIT;
     
         ITRC = ITREAD ('GPDEFUND', '', '', '');
         IF ITRC = 8
            THEN DEFUND_FOUND = '0'B;
         IF DEFUND_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
     
      END;  /* WHILE DEFUND */
     
      /*-------------------------------------------------------------*/
      /* IF A LIMIT HAS BEEN APPLIED TO A FUND WITHIN THE CURRENT    */
      /* FUNDING PRIORITY, CALCULATE THE MAXIMUM AMOUNT THAT CAN BE  */
      /* FUNDED BY THE PRIORITY.                                     */
      /*                                                             */
      /* THE LIMIT APPLIED TO THE FUND IS THE MAXIMUM AMOUNT THAT    */
      /* MAY BE FUNDED BY THAT FUND, REGARDLESS OF ITS FUNDING PCT.  */
      /* FUNDING PERCENT IS USED TO CALCULATE THE TOTAL AMOUNT TO    */
      /* BE FUNDED BY THE PRIORITY.  FUNDING PERCENTAGES FOR A       */
      /* PRIORITY MUST TOTAL TO 100.                                 */
      /*                                                             */
      /* IF ALL FUNDS ARE LIMITED, THE PRIORITY TOTAL IS THE SUM OF  */
      /* THE LIMITED AMOUNTS.  IF SOME FUNDS ARE UNLIMITED, HOWEVER, */
      /* THE PRIORITY TOTAL IS CALCULATED BY APPLYING FUNDING        */
      /* PERCENTS.                                                   */
      /*                                                             */
      /* EXAMPLE:   FUND  PERCENT  PRIORITY  LIMIT                   */
      /*              1      80       1       400                    */
      /*              2      20       1                              */
      /*                                                             */
      /*            80%(PRIORITY_TOTAL) = $400.                      */
      /*            PRIORITY_TOTAL = $400/80%                        */
      /*            PRIORITY_TOTAL = $500                            */
      /*-------------------------------------------------------------*/
     
      IF TOTAL_LIMIT &gt 0
         THEN DO;
     
           IF TOTAL_UNLIMITED_FUND_PERCENT &gt 0
              THEN DO;
                TOTAL_PRIORITY_FUND_AMOUNT =
                      DIVIDE(TOTAL_LIMIT,
                        TOTAL_LIMITED_FUND_PERCENT,13,3);
     
                TOTAL_PRIORITY_FUND_AMOUNT =
                  DIVIDE(TOTAL_PRIORITY_FUND_AMOUNT,0.01,13,3);
     
              END; /* INNER THEN */
              ELSE TOTAL_PRIORITY_FUND_AMOUNT = TOTAL_LIMIT;
         END; /* THEN */
     
     
     IF TOTAL_PRIORITY_FUND_AMOUNT &lt=
                   DECATG_RECORD.CUNFUNDED_AMOUNT &amp TOTAL_LIMIT &gt 0
        THEN TOTAL_LIMIT_WILL_BE_EXCEEDED = '1'B;
        ELSE  DO;
         /*--- IF TOTAL LIMIT WILL NOT BE EXCEEDED, THE FUNDING   ---*/
         /*--- LIMITS ARE NOT TAKEN INTO ACCOUNT                  ---*/
             TOTAL_LIMIT_WILL_BE_EXCEEDED = '0'B;
             TOTAL_UNLIMITED_FUND_PERCENT = 100;
        END;
     
      DEFUND_FOUND = '1'B;
     
      ITRC = ITREAD ('GPDEFUND', SAVE_DEFUND_KEY_2, '2', 'GE');
      IF ITRC = 8
         THEN DEFUND_FOUND = '0'B;
      IF DEFUND_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
     
      DO WHILE (DEFUND_FOUND &amp DEFUND_RECORD.PCN = DECATG_RECORD.PCN &amp
                DEFUND_RECORD.CN = DECATG_RECORD.CN &amp
                DEFUND_RECORD.FPRIOR = PRIORITY);
     
         /*--- IF THE TOTALS OF THE LIMITS IS LESS THAN OR EQUAL TO--*/
         /*--- THE TOTAL AMOUNT TO BE FUNDED, ALLOCATE THE LIMIT   --*/
         /*--- AMOUNT.                                             --*/
     
            IF TOTAL_LIMIT_WILL_BE_EXCEEDED  &amp
               DEFUND_RECORD.FLIMIT &gt 0
              THEN DO;
                 DEFUND_RECORD.FFUND_TOTAL = DEFUND_RECORD.FLIMIT;
                 DECATG_RECORD.CUNFUNDED_AMOUNT =
                                 DECATG_RECORD.CUNFUNDED_AMOUNT -
                                            DEFUND_RECORD.FFUND_TOTAL;
                 CALL CONVERT_DEFUND_TO_GPDEFUND;
                 ITRC = ITWRITE ('GPDEFUND', '');
     
              END;
     
         ITRC = ITREAD ('GPDEFUND', '', '', '');
         IF ITRC = 8
            THEN DEFUND_FOUND = '0'B;
         IF DEFUND_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
     
      END;   /* WHILE DEFUND */
     
     
      /*-------------------------------------------------------------*/
      /* NOW THAT THE LIMITED FUNDS HAVE BEEN ALLOCATED, COMPUTE THE */
      /* REMAINING AMOUNT TO BE ALLOCATED TO THE UNLIMITED FUNDS     */
      /* WITHIN THE PRIORITY.                                        */
      /* IF THERE ARE LIMITED FUNDS IN THE CATEGORY, THE UNLIMITED   */
      /* AMOUNT IS THE TOTAL PRIORITY AMOUNT MULTIPLIED BY THE TOTAL */
      /* PARTICIPATION PERCENTAGE OF THE UNLIMITED FUNDS.  OTHERWISE,*/
      /* THE UNLIMITED AMOUNT IS THE UNFUNDED AMOUNT OF THE CATEGORY.*/
      /*-------------------------------------------------------------*/
     
      IF TOTAL_LIMIT_WILL_BE_EXCEEDED
         THEN DO;
           AMOUNT_FOR_UNLIMITED_FUNDS =
                       MULTIPLY(TOTAL_UNLIMITED_FUND_PERCENT,
                                    TOTAL_PRIORITY_FUND_AMOUNT,13,3);
     
           AMOUNT_FOR_UNLIMITED_FUNDS =
                 MULTIPLY(AMOUNT_FOR_UNLIMITED_FUNDS, 0.01, 13,3);
     
         END;
         ELSE DO;
           AMOUNT_FOR_UNLIMITED_FUNDS =
                          DECATG_RECORD.CUNFUNDED_AMOUNT;
     
     
         END;
     
      AMOUNT_FOR_UNLIMITED_FUNDS = ROUND(AMOUNT_FOR_UNLIMITED_FUNDS,2);
     
      /*-------------------------------------------------------------*/
      /*--- THE COMPUTED UNLIMITED FUNDING AMOUNT IS ALLOCATED     --*/
      /*--- TO UNLIMITED FUNDS BASED ON THE RATIO OF THE UNLIMITED --*/
      /*--- FUND'S PARTICIPATION PERCENTAGE TO THE TOTAL UNLIMITED --*/
      /*--- FUND PERCENTAGE.                                       --*/
      /*-------------------------------------------------------------*/
     
      DEFUND_FOUND = '1'B;
     
      ITRC = ITREAD ('GPDEFUND', SAVE_DEFUND_KEY_2, '2', 'GE');
      IF ITRC = 8
         THEN DEFUND_FOUND = '0'B;
      IF DEFUND_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
     
      DO WHILE ( DEFUND_FOUND &amp DEFUND_RECORD.PCN = DECATG_RECORD.PCN &amp
                 DEFUND_RECORD.CN = DECATG_RECORD.CN &amp
                 DEFUND_RECORD.FPRIOR = PRIORITY &amp
                 DECATG_RECORD.CUNFUNDED_AMOUNT &gt 0 );
     
         IF DEFUND_RECORD.FLIMIT &gt 0 &amp TOTAL_LIMIT_WILL_BE_EXCEEDED
            THEN GOTO NEXT_FUND;
     
         /*-- CHECK BEFORE DIVIDE, 8/16/88, GNC --*/
         IF TOTAL_UNLIMITED_FUND_PERCENT = 0
            THEN FUND_PCT = 0;
            ELSE FUND_PCT   = DIVIDE(DEFUND_RECORD.FUNDPCT,
                             TOTAL_UNLIMITED_FUND_PERCENT,15,12);
     
         FUND_TOTAL = MULTIPLY(AMOUNT_FOR_UNLIMITED_FUNDS,
                               FUND_PCT,13,3);
     
     
         DEFUND_RECORD.FFUND_TOTAL = ROUND(FUND_TOTAL,2);
     
         DECATG_RECORD.CUNFUNDED_AMOUNT =
            DECATG_RECORD.CUNFUNDED_AMOUNT - DEFUND_RECORD.FFUND_TOTAL;
     
     /* MEA ADDED CODE TO TAKE CARE OF CENTS LEFT AFTER ROUNDING */
     
         IF DECATG_RECORD.CUNFUNDED_AMOUNT &lt 0 &amp
            DECATG_RECORD.CUNFUNDED_AMOUNT &gt= -0.10
            THEN
               DEFUND_RECORD.FFUND_TOTAL = DEFUND_RECORD.FFUND_TOTAL -
                    ABS(DECATG_RECORD.CUNFUNDED_AMOUNT);
     
         IF DECATG_RECORD.CUNFUNDED_AMOUNT &gt 0 &amp
            DECATG_RECORD.CUNFUNDED_AMOUNT &lt= 0.10
            THEN
                DEFUND_RECORD.FFUND_TOTAL = DEFUND_RECORD.FFUND_TOTAL +
                DECATG_RECORD.CUNFUNDED_AMOUNT ;
     
         CALL CONVERT_DEFUND_TO_GPDEFUND;
         ITRC = ITWRITE ('GPDEFUND','');
     
        NEXT_FUND:
         ITRC = ITREAD ('GPDEFUND', '', '', '');
         IF ITRC = 8
            THEN DEFUND_FOUND = '0'B;
         IF DEFUND_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
     
      END;  /* WHILE DEFUND */
     
      NEXT_PRIORITY:
     
     END; /*-- LOOP FOR PRIORIRY --*/
     
     /*--- UPDATE DECATG RECORD ---*/
     
    CALL CONVERT_DECATG_TO_GPDECATG;
    ITRC = ITWRITE ('GPDECATG','');
     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
 END ALLOCATE_CATEGORY_FUNDING;
     
     
 /*------------------------------------------------------------------*/
 /*                    CREATE_NONSPEC_FUND_RECORDS                   */
 /*                                                                  */
 /*  CREATE A NONSPECIFIED FUND DEFUND RECORD FOR EACH CATEGORY THAT */
 /*  HAS AN UNFUNDED AMOUNT GREATER THAN 0.10 (UNFUNDED AMOUNT WHICH */
 /*  REMAINS AFTER CATEGORY-LEVEL AND PROJECT-LEVEL FUNDS HAVE BEEN  */
 /*  ALLOCATED).                                                     */
 /*                                                                  */
 /*  CREATE UNIT AND PROJECT LEVEL NONSPECIFIED FUND DEFUND RECORDS  */
 /*  FROM THEIR RESPECTIVE CATEGORIES.                               */
 /*                                                                  */
 /*  USE &quot******&quot AS THE FUND CODE AND &quotNONSPECIFIED FUNDS&quot AS THE   */
 /*  DESCRIPTION FOR THE NONSPECIFIED FUND RECORDS.                  */
 /*  UPDATES GPDEFUND.                                               */
 /*------------------------------------------------------------------*/
 CREATE_NONSPEC_FUND_RECORDS:        PROC;
     
   DCL SAVE_SEGMENT          CHAR (31);
     
   SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
   SHELL$MODULE_SEGMENT = 'CREATE_NONSPEC_FUND_RECORDS';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
     
   DECATG_FOUND = '1'B;
   DECATG_KEY = ' ';
   ITRC = ITREAD ('GPDECATG', DECATG_KEY, '0', 'GE');
   IF ITRC = 8
      THEN DECATG_FOUND = '0'B;
     
   DO WHILE (DECATG_FOUND);
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

      CALL CONVERT_GPDECATG_TO_DECATG;
     
      IF DECATG_RECORD.CN = ' ' | DECATG_RECORD.CLOWCOST = 'N' |
         (DECATG_RECORD.CUNFUNDED_AMOUNT &lt= 0.10)
         THEN GOTO NEXT_CATG;
     
      DEFUND_RECORD.PCN            = DECATG_RECORD.PCN;
      DEFUND_RECORD.UNITNO         = DECATG_RECORD.UNITNO;
      DEFUND_RECORD.CN             = DECATG_RECORD.CN;
      DEFUND_RECORD.FUND           = '******';
      DEFUND_RECORD.FDESCR         = 'UNSPECIFIED';
      DEFUND_RECORD.FUNDPCT        = 0;
      DEFUND_RECORD.FLIMIT         = 0;
      DEFUND_RECORD.FPRIOR         = '0';
      DEFUND_RECORD.FCOST          = 0;
      DEFUND_RECORD.FEC            = 0;
      DEFUND_RECORD.FTOTAL_AMOUNT  = 0;
      DEFUND_RECORD.FFUND_TOTAL    = DECATG_RECORD.CUNFUNDED_AMOUNT;
      DEFUND_RECORD.FACTUAL_PCT    = 0;
      DEFUND_RECORD.FADJTOT        = 0;   /* ADDED, PCG 5/1/91 */
      DEFUND_RECORD.FPARTICIPATING = 'Y';
      DEFUND_RECORD.FFEDERAL       = 'N';
      DEFUND_RECORD.EFUNDGRP       = ' '; /* ADDED, PCG 5/1/91 */
      DEFUND_RECORD.EFACSFND       = ' '; /* ADDED, PCG 5/1/91 */
     
     
      DEFUND_KEY = DEFUND_RECORD.PCN || DEFUND_RECORD.UNITNO ||
                   DEFUND_RECORD.CN  || DEFUND_RECORD.FUND;
     
      CALL CONVERT_DEFUND_TO_GPDEFUND;
      ITRC = ITWRITE ('GPDEFUND', '');
     
      NEXT_CATG:
      ITRC = ITREAD ('GPDECATG', '', '', '');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;
   END;  /* WHILE DECATG */
     
     
   /*--- CREATE PROJECT AND UNIT LEVEL NONSPECIFIED FUND RECORDS  ---*/
     
   DECATG_FOUND = '1'B;
   DECATG_KEY = ' ';
   ITRC = ITREAD ('GPDECATG', DECATG_KEY, '0', 'GE');
   IF ITRC = 8
      THEN DECATG_FOUND = '0'B;
     
   DO WHILE (DECATG_FOUND);

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;
     
      CALL CONVERT_GPDECATG_TO_DECATG;
     
      IF DECATG_RECORD.CN = ' ' | DECATG_RECORD.CLOWCOST = 'N' |
         DECATG_RECORD.CUNFUNDED_AMOUNT &lt= 0.10
        THEN GOTO NEXT_CATEGORY;
     
      /*--- UNIT LEVEL ---*/
      DEFUND_KEY = DECATG_RECORD.PCN || DECATG_RECORD.UNITNO
                                     || '    ' || '******';
      DEFUND_FOUND = '1'B;
      ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '', '');
      IF ITRC = 8
         THEN DEFUND_FOUND = '0'B;
     
      IF DEFUND_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

           CALL CONVERT_GPDEFUND_TO_DEFUND;
           DEFUND_RECORD.FFUND_TOTAL = DEFUND_RECORD.FFUND_TOTAL +
                                       DECATG_RECORD.CUNFUNDED_AMOUNT;
           CALL CONVERT_DEFUND_TO_GPDEFUND;
           ITRC = ITWRITE ('GPDEFUND  ', '');
     
           GOTO NEXT_CATEGORY;
         END;
         ELSE DO;
           DEFUND_RECORD.PCN            = DECATG_RECORD.PCN;
           DEFUND_RECORD.UNITNO         = DECATG_RECORD.UNITNO;
           DEFUND_RECORD.CN             = '    ';
           DEFUND_RECORD.FUND           = '******';
           DEFUND_RECORD.FDESCR         = 'UNSPECIFIED';
           DEFUND_RECORD.FUNDPCT        = 0;
           DEFUND_RECORD.FLIMIT         = 0;
           DEFUND_RECORD.FPRIOR         = '0';
           DEFUND_RECORD.FFEDERAL       = 'N';
           DEFUND_RECORD.EFUNDGRP       = ' ';
           DEFUND_RECORD.EFACSFND       = ' ';
           DEFUND_RECORD.FPARTICIPATING = 'Y';
           DEFUND_RECORD.FCOST          = 0;
           DEFUND_RECORD.FEC            = 0;
           DEFUND_RECORD.FTOTAL_AMOUNT  = 0;
           DEFUND_RECORD.FACTUAL_PCT    = 0;
           DEFUND_RECORD.FADJTOT        = 0; /* ADDED, PCG 5/1/91 */
           DEFUND_RECORD.FFUND_TOTAL = DECATG_RECORD.CUNFUNDED_AMOUNT;
     
           DEFUND_KEY = DEFUND_RECORD.PCN || DEFUND_RECORD.UNITNO ||
                        DEFUND_RECORD.CN  || DEFUND_RECORD.FUND;
     
           CALL CONVERT_DEFUND_TO_GPDEFUND;
           ITRC = ITWRITE ('GPDEFUND', '');
     
         END; /* ELSE */
     
     /*--- PROJECT LEVEL ---*/
      DEFUND_KEY = DECATG_RECORD.PCN || '   '
                    || '    ' || '******';
      DEFUND_FOUND = '1'B;
     
      ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '', '');
      IF ITRC = 8
         THEN DEFUND_FOUND = '0'B;
     
      IF DEFUND_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

           CALL CONVERT_GPDEFUND_TO_DEFUND;
           DEFUND_RECORD.FFUND_TOTAL = DEFUND_RECORD.FFUND_TOTAL +
                                       DECATG_RECORD.CUNFUNDED_AMOUNT;
           CALL CONVERT_DEFUND_TO_GPDEFUND;
           ITRC = ITWRITE ('GPDEFUND', '');
           GOTO NEXT_CATEGORY;
         END;
         ELSE DO;
           DEFUND_RECORD.PCN            = DECATG_RECORD.PCN;
           DEFUND_RECORD.UNITNO         = ' ';
           DEFUND_RECORD.CN             = '    ';
           DEFUND_RECORD.FUND           = '******';
           DEFUND_RECORD.FDESCR         = 'UNSPECIFIED';
           DEFUND_RECORD.FUNDPCT        = 0;
           DEFUND_RECORD.FLIMIT         = 0;
           DEFUND_RECORD.FPRIOR         = '0';
           DEFUND_RECORD.FCOST          = 0;
           DEFUND_RECORD.FEC            = 0;
           DEFUND_RECORD.FTOTAL_AMOUNT  = 0;
           DEFUND_RECORD.FACTUAL_PCT    = 0;
           DEFUND_RECORD.FADJTOT        = 0; /* ADDED, PCG 5/1/91 */
           DEFUND_RECORD.FFUND_TOTAL = DECATG_RECORD.CUNFUNDED_AMOUNT;
           DEFUND_RECORD.FPARTICIPATING = 'Y';
           DEFUND_RECORD.FFEDERAL       = 'N';
     
           DEFUND_KEY = DEFUND_RECORD.PCN || DEFUND_RECORD.UNITNO ||
                        DEFUND_RECORD.CN  || DEFUND_RECORD.FUND;
     
           CALL CONVERT_DEFUND_TO_GPDEFUND;
           ITRC = ITWRITE ('GPDEFUND','');
         END;  /* ELSE */
     
        NEXT_CATEGORY:
         ITRC = ITREAD ('GPDECATG', '', '', '');
         IF ITRC = 8
            THEN DECATG_FOUND = '0'B;
      END;    /* WHILE DECATG */
     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
 END CREATE_NONSPEC_FUND_RECORDS;
     
 /*------------------------------------------------------------------*/
 /*                    DISTRIBUTE_PROJ_LEVEL_FUNDS                   */
 /*                                                                  */
 /*    DISTRIBUTE THE AMOUNT FUNDED AT THE PROJECT-LEVEL (STORED IN  */
 /*    ZERO CATEGORY RECORDS) TO CATEGORIES THAT DO NOT HAVE         */
 /*    PRIORITY 1 FUNDS SPECIFIED.  UPDATES GPDEFUND.                */
 /*------------------------------------------------------------------*/
 DISTRIBUTE_PROJ_LEVEL_FUNDS: PROC;
     
   DCL SAVE_SEGMENT             CHAR (31),
       CATG_0_TOTAL_AMOUNT      FIXED DEC (11,2),
       CATG_0_HOLD_AMOUNT       FIXED DEC (11,2),
       REST_PROJ_LEVEL_AMT      FIXED DEC (11,2),
       CATG_ROUNDOFF_ERROR      FIXED DEC (11,2),
       FUND_AMOUNT              FIXED DEC (12,3),
       TEMP_DIV_RESULT          FIXED DEC (15,12),
       (TOP_PTR, LAST_PTR,
        FUND_PTR)               PTR;
     
   DCL 1 PROJ_LEVEL_FUND BASED,
         2 PCN                  CHAR (13),
         2 UNITNO               CHAR (3),
         2 CN                   CHAR (4),
         2 FUND                 CHAR (6),
         2 FDESCR               CHAR (40),
         2 FFUND_TOTAL          FIXED DEC (11,2),
         2 FUNDPCT              FIXED DEC (7,4),
         2 FLIMIT               FIXED DEC (11,2),
         2 FPRIOR               CHAR (1),
         2 FFEDERAL             CHAR (1),
         2 FPARTICIPATING       CHAR (1),
         2 LAST_CN              CHAR (4),
         2 LAST_UNIT            CHAR (3),
         2 TOT_LIMIT            FIXED DEC (11,2),
         2 TOT_UNIT_LIMIT       FIXED DEC (11,2),
         2 TOT_FUND_TOTAL       FIXED DEC (13,2),
         2 NEXT_PTR             PTR;
     
   SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
   SHELL$MODULE_SEGMENT = 'DISTRIBUTE_PROJ_LEVEL_FUNDS';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
     
   /*----------------------------------------------------------------*/
   /* IF A CATEGORY DOES NOT HAVE PRIORITY 1 FUNDS, IT IS SUBJECT TO */
   /* PROJECT-LEVEL FUNDING.  THE CATEGORY SUBJECT TO PROJECT-LEVEL  */
   /* FUNDING CAN HAVE FUNDS SPECIFIED AT PRIORITIES WHICH ARE LOWER */
   /* THAN THOSE SPECIFIED AT THE PROJECT-LEVEL, OR MAY NOT HAVE     */
   /* CATEGORY-LEVEL FUNDING AT ALL.                                 */
   /*                                                                */
   /* EXAMPLE:   CATG   PRIORITY  FUND  PERCENT  LIMIT               */
   /*            ----   --------  ----  -------  -------             */
   /*            0000      1        A    100.00  100,000             */
   /*                      2        B     90.00                      */
   /*                      3        C     10.00                      */
   /*                                                                */
   /*            0001      4        D    100.00   40,000             */
   /*                      5        A    100.00                      */
   /*                                                                */
   /*            0002      1        E    100.00   10,000             */
   /*                      2        F    100.00                      */
   /*                                                                */
   /*            0003      4        G    100.00   10,000             */
   /*                      5        H    100.00                      */
   /*                                                                */
   /*  IN THIS EXAMPLE, CATEGORIES 0001 AND 0003 WILL BE SUBJECT TO  */
   /*  PROJECT-LEVEL FUNDING, BUT CATEGORY 0002 WILL NOT GET         */
   /*  PROJECT-LEVEL FUNDS.   NOTE THAT FOR CATEGORY 0001, FUND a    */
   /*  IS SPECIFIED AT PRIORITY 5 AND THAT PROJECT-LEVEL FUND a      */
   /*  IS SPECIFIED A PRIORITY 1.  THIS IS LEGAL.                    */
   /*                                                                */
   /*----------------------------------------------------------------*/
     
   DEPROJ_FOUND = '1'B;
     
   DEPROJ_KEY = ' ';
   ITRC = ITREAD ('GPDEPROJ', DEPROJ_KEY, '0', 'GE');
   IF ITRC = 8
      THEN DEPROJ_FOUND = '0'B;
     
   DO WHILE (DEPROJ_FOUND);
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEPROJ_TO_DEPROJ');
           %END;

      CALL CONVERT_GPDEPROJ_TO_DEPROJ;
     
      /*----- CHECK FOR ZERO-CATEGORY FOR PROJECT ---*/
      DECATG_FOUND = '1'B;
      DECATG_KEY_1 = DEPROJ_RECORD.PCN || ZERO_CATEGORY;
     
      ITRC = ITREAD ('GPDECATG', DECATG_KEY_1, '1', '');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;
     
      IF ^DECATG_FOUND
         THEN GOTO NEXT_PROJECT;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;
     
      CALL CONVERT_GPDECATG_TO_DECATG;
     
     /* MEA ADDED EXTRA HOLDER FOR TOTAL AMOUNT FOR THE GIVEN PROJECT*/
     /*     THAT NEEDS TO DISTRIBUTED AMONG CATEGORIES               */
     /*--------------------------------------------------------------*/
     /*--- TOTAL AMOUNT THAT IS SUBJECTED TO FUNDING BY THE PROJECT--*/
     /*--- LEVEL FUNDS (FROM THE ZERO-CATEGORY RECORD)             --*/
     /*--------------------------------------------------------------*/
      CATG_0_TOTAL_AMOUNT = DECATG_RECORD.CTOTAL_AMOUNT;
      CATG_0_HOLD_AMOUNT = CATG_0_TOTAL_AMOUNT;
      CALL BUILD_PROJ_FUND_LIST;
     
     /*--------------------------------------------------------------*/
     /*--- DISTRIBUTE THE AMOUNT FUNDED AT THE PROJECT LEVEL TO    --*/
     /*--- CATEGORIES THAT DO NOT HAVE PRIORITY 1 FUNDS SPECIFIED  --*/
     /*--------------------------------------------------------------*/
      DECATG_FOUND = '1'B;
      DECATG_KEY = DEPROJ_RECORD.PCN;
     
      ITRC = ITREAD ('GPDECATG', DECATG_KEY, '0', 'GE');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;
      IF DECATG_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

           CALL CONVERT_GPDECATG_TO_DECATG;
         END;
     
      DO WHILE (DECATG_FOUND &amp DECATG_RECORD.PCN = DEPROJ_RECORD.PCN);

         IF DECATG_RECORD.CN = ' ' |
            DECATG_RECORD.CN = ZERO_CATEGORY |
            DECATG_RECORD.CLOWCOST = 'N'
           THEN GOTO NEXT_CATEGORY;
     
         /*--- CHECK FOR CATEGORY LEVEL PRIORITY 1 FUNDING ---*/
         /* MEA  FIND AMT TO BE LEFT TO DISTRIBUTE IN THIS CATEGORY */
         /*      AFTER ASSIGINIG EACH FUND AMOUNT   */
     
         REST_PROJ_LEVEL_AMT = CATG_0_HOLD_AMOUNT -
                               DECATG_RECORD.CPAR_TOTAL_AMOUNT;
         DEFUND_FOUND = '1'B;
         DEFUND_KEY_2 = DECATG_RECORD.PCN || DECATG_RECORD.CN || '1';
     
         ITRC = ITREAD ('GPDEFUND', DEFUND_KEY_2, '2', 'GE');
         IF ITRC = 8
            THEN DEFUND_FOUND = '0'B;
         IF DEFUND_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
     
         IF DEFUND_FOUND &amp DEFUND_RECORD.PCN = DECATG_RECORD.PCN &amp
                           DEFUND_RECORD.CN  = DECATG_RECORD.CN  &amp
                           DEFUND_RECORD.FPRIOR = '1'
            THEN GOTO NEXT_CATEGORY;
     
         /*----------------------------------------------------------*/
         /*--- DISTRIBUTE THE PROJECT-LEVEL FUNDING AMOUNT FOR EACH -*/
         /*--- PROJECT-LEVEL FUND IN THE LIST BY CREATING/UPDATING  -*/
         /*--- FUNDING RECORDS FOR THE PROJECT CATEGORIES, I.E.     -*/
         /*--- ASSIGN EACH PROJECT CATEGORY A FUNDING PORTION FROM  -*/
         /*--- EACH PROJ-LEVEL FUND (TRAVERSE LIST FOR EA. CATG.)   -*/
         /*----------------------------------------------------------*/
     
         FUND_PTR = TOP_PTR;
         DO WHILE (FUND_PTR ^= NULL());
     
          /*---------------------------------------------------------*/
          /*--- COMPUTE THE AMOUNT DISTRIBUTED FROM THE PROJECT-LEVEL*/
          /*--- FUND.  THE CATEGORY IS GIVEN A PROPORTION OF FUNDS  -*/
          /*--- BASED ON ITS PERCENT OF THE FUND TOTAL.             -*/
          /*---------------------------------------------------------*/
            /* ASSIGN THE LAST CN AND LAST UNIT FROM THE CATG.     */
            /* THIS WILL BE THE CATG AND UNIT TO SOLVE FOR ROUND   */
            /* OFF PROBLEM. PCGW - 11/14/91.                       */
            /*-----------------------------------------------------*/
            FUND_PTR-&gtPROJ_LEVEL_FUND.LAST_CN = DECATG_RECORD.CN;
            FUND_PTR-&gtPROJ_LEVEL_FUND.LAST_UNIT = DECATG_RECORD.UNITNO;

            IF CATG_0_TOTAL_AMOUNT = 0
              THEN TEMP_DIV_RESULT = 0;
              ELSE TEMP_DIV_RESULT =
                 DIVIDE(DECATG_RECORD.CPAR_TOTAL_AMOUNT,
                        CATG_0_TOTAL_AMOUNT,15,12);
     
            FUND_AMOUNT =  MULTIPLY(TEMP_DIV_RESULT,
                           FUND_PTR-&gtPROJ_LEVEL_FUND.FFUND_TOTAL,12,3);
     
            DEFUND_KEY = DECATG_RECORD.PCN || DECATG_RECORD.UNITNO ||
                         DECATG_RECORD.CN ||
                         FUND_PTR-&gtPROJ_LEVEL_FUND.FUND;
     
     
            DEFUND_FOUND = '1'B;
            ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '0', '');
            IF ITRC = 8
               THEN DEFUND_FOUND = '0'B;
     
           /*--------------------------------------------------------*/
           /*--- IF DEFUND RECORD EXISTS FOR THE CATGORY, ADD THE ---*/
           /*--- PROJ-LEVEL FUND AMOUNT.                          ---*/
           /*--------------------------------------------------------*/
            IF DEFUND_FOUND
               THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

                 CALL CONVERT_GPDEFUND_TO_DEFUND;
                 DEFUND_RECORD.FFUND_TOTAL =
                            DEFUND_RECORD.FFUND_TOTAL + FUND_AMOUNT;
                 CALL CONVERT_DEFUND_TO_GPDEFUND;
                 ITRC = ITWRITE ('GPDEFUND', '');
               END;
               ELSE DO;
     
                    /*----------------------------------------------*/
                    /*--- CREATE A DEFUND RECORD WITH PROJ-LEVEL ---*/
                    /*--- AMOUNT FOR THE CATGORY.                ---*/
                    /*--- NOTE THAT FLIMIT FOR THE CATEGORY IS   ---*/
                    /*--- ASSIGNED BASED ON THE RATIO OF THE     ---*/
                    /*--- CATEGORY TOTAL TO THE PROJECT-FUND     ---*/
                    /*--- TOTAL.                                 ---*/
                    /*----------------------------------------------*/
                    DEFUND_RECORD.PCN          = DECATG_RECORD.PCN;
                    DEFUND_RECORD.UNITNO       = DECATG_RECORD.UNITNO;
                    DEFUND_RECORD.CN           = DECATG_RECORD.CN;
     
                    DEFUND_RECORD.FUND =
                                     FUND_PTR-&gtPROJ_LEVEL_FUND.FUND;
                    DEFUND_RECORD.FDESCR =
                                     FUND_PTR-&gtPROJ_LEVEL_FUND.FDESCR;
                    DEFUND_RECORD.FUNDPCT =
                                     FUND_PTR-&gtPROJ_LEVEL_FUND.FUNDPCT;
     
                    DEFUND_RECORD.FLIMIT =
                          ROUND(MULTIPLY(TEMP_DIV_RESULT,
                          FUND_PTR-&gtPROJ_LEVEL_FUND.FLIMIT,13,4),2);

               /*                  PCGW 11/14/91
                  ACCUMULATE TOTAL LIMIT TO CHECK ROUNDING AT END. */
                    FUND_PTR-&gtPROJ_LEVEL_FUND.TOT_LIMIT = 
                         FUND_PTR-&gtPROJ_LEVEL_FUND.TOT_LIMIT + 
                         DEFUND_RECORD.FLIMIT;

                    DEFUND_RECORD.FPRIOR =
                               FUND_PTR-&gtPROJ_LEVEL_FUND.FPRIOR;
                    DEFUND_RECORD.FFEDERAL =
                               FUND_PTR-&gtPROJ_LEVEL_FUND.FFEDERAL;
     
                    DEFUND_RECORD.EFUNDGRP      = ' ';
                    DEFUND_RECORD.EFACSFND      = ' ';
     
                    DEFUND_RECORD.FPARTICIPATING =
                              FUND_PTR-&gtPROJ_LEVEL_FUND.FPARTICIPATING;
     
                    DEFUND_RECORD.FCOST         = 0;
                    DEFUND_RECORD.FEC           = 0;
                    DEFUND_RECORD.FTOTAL_AMOUNT = 0;
                    DEFUND_RECORD.FACTUAL_PCT   = 0;
                    DEFUND_RECORD.FADJTOT       = 0;
                                /*FADJTOT - ADDED,PCG 5/1/91*/
                    DEFUND_RECORD.FFUND_TOTAL   = ROUND(FUND_AMOUNT,2);

               /*                  PCGW 11/15/91
                  ACCUMULATE FUND TOTAL TO CHECK ROUNDING AT END. */
                    FUND_PTR-&gtPROJ_LEVEL_FUND.TOT_FUND_TOTAL = 
                         FUND_PTR-&gtPROJ_LEVEL_FUND.TOT_FUND_TOTAL + 
                         DEFUND_RECORD.FFUND_TOTAL;


          /* MEA SET UP FOR ROUND OFF ERROR CHECK 
          XXXXXXXXXXXXXXX comment out XXXXXXXXXXXXXXXX
     
                    CATG_0_HOLD_AMOUNT = CATG_0_HOLD_AMOUNT -
                                       DEFUND_RECORD.FFUND_TOTAL;
                    CATG_ROUNDOFF_ERROR = CATG_0_HOLD_AMOUNT -
                                          REST_PROJ_LEVEL_AMT;
     
                */     
     /* MEA ADDED CODE TO TAKE CARE OF CENTS LEFT AFTER ROUNDING 
           XXXXXXXXXXXXXXX comment out XXXXXXXXXXXXXXXX
      
         IF CATG_ROUNDOFF_ERROR &lt 0 &amp
            CATG_ROUNDOFF_ERROR &gt= -0.05
            THEN DO;
               DEFUND_RECORD.FFUND_TOTAL = DEFUND_RECORD.FFUND_TOTAL -
                    ABS(CATG_ROUNDOFF_ERROR);
               CATG_0_HOLD_AMOUNT = CATG_0_HOLD_AMOUNT +
                                    CATG_ROUNDOFF_ERROR;
            END;
     
         IF CATG_ROUNDOFF_ERROR &gt 0 &amp
            CATG_ROUNDOFF_ERROR &lt= 0.05
            THEN DO;
                DEFUND_RECORD.FFUND_TOTAL = DEFUND_RECORD.FFUND_TOTAL +
                CATG_ROUNDOFF_ERROR;
                CATG_0_HOLD_AMOUNT = CATG_0_HOLD_AMOUNT -
                                     CATG_ROUNDOFF_ERROR;
             END;
          */
                    CALL CONVERT_DEFUND_TO_GPDEFUND;
                    ITRC = ITWRITE ('GPDEFUND', '');
     
                   /*------------------------------------------------*/
                   /*--- CHECK IF UNIT DEFUND RECORD ALREADY EXISTS, */
                   /*--- IF NOT CREATE A UNIT DEFUND RECORD FOR THIS */
                   /*--- FUND                                        */
                   /*------------------------------------------------*/
                   DEFUND_KEY = DECATG_RECORD.PCN ||
                                DECATG_RECORD.UNITNO ||
                                '    ' ||
                                FUND_PTR-&gtPROJ_LEVEL_FUND.FUND;
     
                   DEFUND_FOUND = '1'B;
                   ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '0', '');
                   IF ITRC = 8
                      THEN DEFUND_FOUND = '0'B;
                   IF DEFUND_FOUND
                      THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

                         CALL CONVERT_GPDEFUND_TO_DEFUND;
                       END;
     
                   IF ^DEFUND_FOUND
                      THEN DO;
     
                        DEFUND_RECORD.PCN     = DECATG_RECORD.PCN;
                        DEFUND_RECORD.UNITNO  = DECATG_RECORD.UNITNO;
                        DEFUND_RECORD.CN      = '    ';
     
                        DEFUND_RECORD.FUND    =
                                FUND_PTR-&gtPROJ_LEVEL_FUND.FUND;
                        DEFUND_RECORD.FDESCR  =
                                FUND_PTR-&gtPROJ_LEVEL_FUND.FDESCR;
                        DEFUND_RECORD.FUNDPCT =
                                    FUND_PTR-&gtPROJ_LEVEL_FUND.FUNDPCT;

                        DEFUND_RECORD.FLIMIT =
                          ROUND (MULTIPLY(TEMP_DIV_RESULT,
                          FUND_PTR-&gtPROJ_LEVEL_FUND.FLIMIT,12,3),2);
     
              /*                  PCGW 11/14/91
                ACCUMULATE TOTAL UNIT LIMIT TO CHECK ROUNDING AT END. */
                        FUND_PTR-&gtPROJ_LEVEL_FUND.TOT_UNIT_LIMIT = 
                            FUND_PTR-&gtPROJ_LEVEL_FUND.TOT_UNIT_LIMIT +
                            DEFUND_RECORD.FLIMIT;

                        DEFUND_RECORD.FPRIOR =
                              FUND_PTR-&gtPROJ_LEVEL_FUND.FPRIOR;
                        DEFUND_RECORD.FFEDERAL =
                              FUND_PTR-&gtPROJ_LEVEL_FUND.FFEDERAL;
     
                        DEFUND_RECORD.EFUNDGRP = ' ';
                        DEFUND_RECORD.EFACSFND = ' ';
     
                        DEFUND_RECORD.FPARTICIPATING =
                              FUND_PTR-&gtPROJ_LEVEL_FUND.FPARTICIPATING;
     
                        DEFUND_RECORD.FCOST          = 0;
                        DEFUND_RECORD.FEC            = 0;
                        DEFUND_RECORD.FTOTAL_AMOUNT  = 0;
                        DEFUND_RECORD.FACTUAL_PCT    = 0;
                        DEFUND_RECORD.FFUND_TOTAL    = 0;
                        DEFUND_RECORD.FADJTOT        = 0;
                                   /* FADJTOT - ADDED,PCG 5/1/91 */
                        CALL CONVERT_DEFUND_TO_GPDEFUND;
                        ITRC = ITWRITE ('GPDEFUND', '');
                       END;  /* THEN */
                 END;  /* ELSE */
     
              FUND_PTR = FUND_PTR-&gtPROJ_LEVEL_FUND.NEXT_PTR;
          END;  /* WHILE FUND_PTR */
     
          NEXT_CATEGORY:
            ITRC = ITREAD ('GPDECATG', '', '', '');
            IF ITRC = 8
               THEN DECATG_FOUND = '0'B;
            IF DECATG_FOUND
               THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;
        
                 CALL CONVERT_GPDECATG_TO_DECATG;
               END;

        END;  /* WHILE DECATG */

       /* CHECKS ROUNDING DIFFERENCE AND ADDS DIFFERENCE TO
          THE LAST CATEGORY WITH THIS FUND. PCGW 11/14/91  */
        CALL ROUNDING_CHECK(TOP_PTR);

        NEXT_PROJECT:
           ITRC = ITREAD ('GPDEPROJ', '', '', '');
           IF ITRC = 8
              THEN DEPROJ_FOUND = '0'B;
     END;  /* WHILE DEPROJ */
     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
  /*-----------------------------------------------------------------*/
  /*                        BUILD_PROJ_FUND_LIST                     */
  /*                                                                 */
  /*    BUILD A LINKED-LIST OF ALLOCATED PROJECT-LEVEL FUNDS, I.E.   */
  /*    DEFUND RECORDS FOR A PROJECT'S ZERO-CATEGORY.                */
  /*-----------------------------------------------------------------*/
     
  BUILD_PROJ_FUND_LIST: PROC;

      DCL SAVE_SEGMENT           CHAR (31);
      SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
      SHELL$MODULE_SEGMENT = 'BUILD_PROJ_FUND_LIST';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;


      TOP_PTR = NULL();
      LAST_PTR = NULL();
     
      DEFUND_FOUND = '1'B;
      DEFUND_KEY   = DECATG_RECORD.PCN || DECATG_RECORD.UNITNO ||
                                          ZERO_CATEGORY;
     
      ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '0', 'GE');
      IF ITRC = 8
         THEN DEFUND_FOUND = '0'B;
      IF DEFUND_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
     
      DO WHILE (DEFUND_FOUND &amp DEFUND_RECORD.PCN = DECATG_RECORD.PCN &amp
                DEFUND_RECORD.CN = ZERO_CATEGORY);
     
         ALLOCATE PROJ_LEVEL_FUND SET (FUND_PTR);
         IF TOP_PTR = NULL()
            THEN DO;
              TOP_PTR = FUND_PTR;
              LAST_PTR = TOP_PTR;
              TOP_PTR-&gtPROJ_LEVEL_FUND.NEXT_PTR = NULL();
             END;
             ELSE DO;
               LAST_PTR-&gtPROJ_LEVEL_FUND.NEXT_PTR = FUND_PTR;
               LAST_PTR = FUND_PTR;
               FUND_PTR-&gtPROJ_LEVEL_FUND.NEXT_PTR = NULL();
             END;
     
          FUND_PTR-&gtPROJ_LEVEL_FUND.PCN    = DEFUND_RECORD.PCN;
          FUND_PTR-&gtPROJ_LEVEL_FUND.CN     = DEFUND_RECORD.CN;
          FUND_PTR-&gtPROJ_LEVEL_FUND.UNITNO = DEFUND_RECORD.UNITNO;
          FUND_PTR-&gtPROJ_LEVEL_FUND.FUND   = DEFUND_RECORD.FUND;
          FUND_PTR-&gtPROJ_LEVEL_FUND.FDESCR = DEFUND_RECORD.FDESCR;
     
          FUND_PTR-&gtPROJ_LEVEL_FUND.FFUND_TOTAL =
                                       DEFUND_RECORD.FFUND_TOTAL;
     
          FUND_PTR-&gtPROJ_LEVEL_FUND.FUNDPCT = DEFUND_RECORD.FUNDPCT;
          FUND_PTR-&gtPROJ_LEVEL_FUND.FLIMIT  = DEFUND_RECORD.FLIMIT;
          FUND_PTR-&gtPROJ_LEVEL_FUND.FPRIOR  = DEFUND_RECORD.FPRIOR;
          FUND_PTR-&gtPROJ_LEVEL_FUND.FFEDERAL = DEFUND_RECORD.FFEDERAL;
     
          FUND_PTR-&gtPROJ_LEVEL_FUND.FPARTICIPATING =
                                       DEFUND_RECORD.FPARTICIPATING;
        /* INITIALIZE NEW FIELDS.  PGCW 11/14/91 */
          FUND_PTR-&gtPROJ_LEVEL_FUND.LAST_CN = DEFUND_RECORD.CN;
          FUND_PTR-&gtPROJ_LEVEL_FUND.LAST_CN = DEFUND_RECORD.CN;
          FUND_PTR-&gtPROJ_LEVEL_FUND.TOT_LIMIT = 0;
          FUND_PTR-&gtPROJ_LEVEL_FUND.TOT_UNIT_LIMIT = 0;
          FUND_PTR-&gtPROJ_LEVEL_FUND.TOT_FUND_TOTAL = 0;
     
          ITRC = ITREAD ('GPDEFUND', '', '', '');
          IF ITRC = 8
             THEN DEFUND_FOUND = '0'B;
          IF DEFUND_FOUND
             THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
       END;  /* WHILE DEFUND */
     
     SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
     END BUILD_PROJ_FUND_LIST;
  /*------------------------------------------------------------------*/
  /*                    ROUNDING CHECK                                */
  /*------------------------------------------------------------------*/
     ROUNDING_CHECK: PROC (TOP_PTR);

       DCL DIFFERENCE1            FIXED DEC (12,3),
           DIFFERENCE2            FIXED DEC (12,3),
           TOP_PTR                POINTER,
           FUND_PTR               POINTER,
           FUND_KEY               CHAR (27);
       DCL SAVE_SEGMENT           CHAR (31);
       SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
       SHELL$MODULE_SEGMENT = 'ROUNDING_CHECK';

        %IF DEBUGGER = 'ON'
            %THEN %DO;
               PUT SKIP LIST ('INSIDE PROCEDURE ',
                               TRIM(SHELL$MODULE_SEGMENT));
            %END;

       FUND_PTR = TOP_PTR;
       DO WHILE (FUND_PTR ^= NULL());
          DIFFERENCE1 = FUND_PTR-&gtPROJ_LEVEL_FUND.FLIMIT - 
                       FUND_PTR-&gtPROJ_LEVEL_FUND.TOT_LIMIT;
          DIFFERENCE2 = FUND_PTR-&gtPROJ_LEVEL_FUND.FFUND_TOTAL -
                       FUND_PTR-&gtPROJ_LEVEL_FUND.TOT_FUND_TOTAL;
          IF DIFFERENCE2 ^= 0 THEN
             DO;
                FUND_KEY = FUND_PTR-&gtPROJ_LEVEL_FUND.PCN ||
                           FUND_PTR-&gtPROJ_LEVEL_FUND.UNITNO ||
                           FUND_PTR-&gtPROJ_LEVEL_FUND.LAST_CN ||
                           FUND_PTR-&gtPROJ_LEVEL_FUND.FUND;
                ITRC = ITREAD ('GPDEFUND',FUND_KEY,'0','');
                IF ITRC = 8
                   THEN DEFUND_FOUND = '0'B;
                IF DEFUND_FOUND THEN 
                   DO;
                %IF DEBUGGER = 'ON'
                    %THEN %DO;
                     PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
                    %END;

                /* ADD DIFFERENCE TO THE LAST CATG PCGW 11/15/91 */
                      CALL CONVERT_GPDEFUND_TO_DEFUND;
                      DEFUND_RECORD.FFUND_TOTAL = 
                             DEFUND_RECORD.FFUND_TOTAL + DIFFERENCE2;
                      CALL CONVERT_DEFUND_TO_GPDEFUND;
                      ITRC = ITWRITE ('GPDEFUND','');
                   END;   /* IF DEFUND_FOUND DO */
             END;   /* IF DIFFERENCE2 ^= 0 DO */

          IF DIFFERENCE1 ^= 0 THEN
             DO;
               /* ADD DIFFERENCE TO THE LAST CATG PCGW 11/14/91 */
                CALL CONVERT_GPDEFUND_TO_DEFUND;
                DEFUND_RECORD.FLIMIT = DEFUND_RECORD.FLIMIT +
                                       DIFFERENCE1;
                CALL CONVERT_DEFUND_TO_GPDEFUND;
                ITRC = ITWRITE ('GPDEFUND','');

                FUND_KEY = FUND_PTR-&gtPROJ_LEVEL_FUND.PCN ||
                           FUND_PTR-&gtPROJ_LEVEL_FUND.LAST_UNIT ||
                           '    ' || FUND_PTR-&gtPROJ_LEVEL_FUND.FUND;
                ITRC = ITREAD ('GPDEFUND',FUND_KEY,'0','');
                IF ITRC = 8
                   THEN DEFUND_FOUND = '0'B;
                IF DEFUND_FOUND THEN 
                   DO;
                %IF DEBUGGER = 'ON'
                    %THEN %DO;
                     PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
                    %END;

             /* ADD DIFFERENCE TO THE LAST UNIT CATG PCGW 11/14/91 */
                      CALL CONVERT_GPDEFUND_TO_DEFUND;
                      DEFUND_RECORD.FLIMIT = DEFUND_RECORD.FLIMIT +
                                             DIFFERENCE1;
                      CALL CONVERT_DEFUND_TO_GPDEFUND;
                      ITRC = ITWRITE ('GPDEFUND','');
                   END;   /* IF DEFUND_FOUND DO */
                
             END;   /* IF DIFFERENCE1 ^= 0 DO */
          FUND_PTR = FUND_PTR-&gtPROJ_LEVEL_FUND.NEXT_PTR;
       END;   /* DO WHILE */
     END ROUNDING_CHECK;

 END DISTRIBUTE_PROJ_LEVEL_FUNDS;

 /*------------------------------------------------------------------*/
 /*                    COMPUTE_CATG_FEDERAL_SHARE                    */
 /*                                                                  */
 /*    COMPUTE THE FEDERAL SHARE AND FEDERAL PERCENT OF EACH         */
 /*    CATEGORY BY SUMMING THE TOTAL AMOUNT SUBJECT TO FEDERAL       */
 /*    FUNDING IN CATEGORIES WHICH HAVE THE FEDERAL FUND FLAG SET    */
 /*    TO 'Y'.  UPDATES GPDECATG.                                    */
 /*------------------------------------------------------------------*/
 COMPUTE_CATG_FEDERAL_SHARE: PROC;
     
   DCL SAVE_SEGMENT          CHAR (31),
       FEDERAL_SHARE         FIXED DEC (12,3),
       FEDERAL_PCT           FIXED DEC (6,3),
       TEMP_DIV_RESULT       FIXED DEC (6,5);
     
   SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
   SHELL$MODULE_SEGMENT = 'COMPUTE_CATG_FEDERAL_SHARE';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
                                 
   DEPROJ_FOUND = '1'B;
     
   DEPROJ_KEY = ' ';
   ITRC = ITREAD ('GPDEPROJ', DEPROJ_KEY, '0', 'GE');
   IF ITRC = 8
      THEN DEPROJ_FOUND = '0'B;
     
   DO WHILE (DEPROJ_FOUND);
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEPROJ_TO_DEPROJ;');
           %END;

      CALL CONVERT_GPDEPROJ_TO_DEPROJ;
     
      DECATG_FOUND = '1'B;
      DECATG_KEY   = DEPROJ_RECORD.PCN;
     
      ITRC = ITREAD ('GPDECATG', DECATG_KEY, '0', 'GE');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;
      IF DECATG_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;
 
           CALL CONVERT_GPDECATG_TO_DECATG;
         END;
     
      DO WHILE (DECATG_FOUND &amp DECATG_RECORD.PCN = DEPROJ_RECORD.PCN);
     
         IF DECATG_RECORD.CN = ' ' |
            DECATG_RECORD.CN = ZERO_CATEGORY
           THEN GOTO NEXT_CATEGORY;
     
         DEFUND_FOUND = '1'B;
         DEFUND_KEY = DECATG_RECORD.PCN || DECATG_RECORD.UNITNO ||
                      DECATG_RECORD.CN;
     
         ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '0', 'GE');
         IF ITRC = 8
            THEN DEFUND_FOUND = '0'B;
         IF DEFUND_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
     
         FEDERAL_SHARE = 0;
         DO WHILE (DEFUND_FOUND &amp
                   DEFUND_RECORD.PCN = DECATG_RECORD.PCN &amp
                   DEFUND_RECORD.UNITNO = DECATG_RECORD.UNITNO &amp
                   DEFUND_RECORD.CN = DECATG_RECORD.CN);
     
            IF DEFUND_RECORD.FFEDERAL = 'Y'
               THEN FEDERAL_SHARE = FEDERAL_SHARE +
                                    DEFUND_RECORD.FFUND_TOTAL;
            ITRC = ITREAD ('GPDEFUND', '', '', '');
            IF ITRC = 8
               THEN DEFUND_FOUND = '0'B;
            IF DEFUND_FOUND
               THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

                 CALL CONVERT_GPDEFUND_TO_DEFUND;
               END;
     
         END;  /* WHILE DEFUND */
     
         DECATG_RECORD.CFEDERAL_SHARE = ROUND(FEDERAL_SHARE,2);
     
      /* FEDERAL_PCT   = 100 *  DIVIDE(FEDERAL_SHARE,
                               DECATG_RECORD.CTOTAL_AMOUNT,6,5); */
     
        /*-- CHECK BEFORE DIVIDE, 8/16/88,GNC --*/
         IF DECATG_RECORD.CTOTAL_AMOUNT = 0
            THEN TEMP_DIV_RESULT = 0.00000;
            ELSE TEMP_DIV_RESULT = DIVIDE (FEDERAL_SHARE,
                             DECATG_RECORD.CTOTAL_AMOUNT,6,5);
         FEDERAL_PCT = MULTIPLY (TEMP_DIV_RESULT, 100, 6,3);
     
         DECATG_RECORD.CFEDERAL_PCT = ROUND(FEDERAL_PCT,2);
     
         CALL CONVERT_DECATG_TO_GPDECATG;
         ITRC = ITWRITE ('GPDECATG', '');
     
         NEXT_CATEGORY:
     
          ITRC = ITREAD ('GPDECATG', '', '', '');
          IF ITRC = 8
             THEN DECATG_FOUND = '0'B;
          IF DECATG_FOUND
             THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

               CALL CONVERT_GPDECATG_TO_DECATG;
             END;

       END;  /* WHILE DECATG */
     
       ITRC = ITREAD ('GPDEPROJ', '', '', '');
       IF ITRC = 8
          THEN DEPROJ_FOUND = '0'B;
    END;   /* WHILE DEPROJ */
     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
  END COMPUTE_CATG_FEDERAL_SHARE;
     
 /*------------------------------------------------------------------*/
 /*                  UPDATE DEFUND RECORDS                           */
 /*                                                                  */
 /*   UPDATES THE FCOST, FEC, AND FTOTAMT FIELDS OF THE GPDEFUND     */
 /*   FILE FROM THE GPDECATG FILE.  ONLY UPDATES THE NON-ZERO, AND   */
 /*   NON-UNIT, LOWCOST CATEGORY FUND RECORDS.      UPDATES GPDEFUND */
 /*------------------------------------------------------------------*/
  UPDATE_DEFUND_RECORDS : PROC;

    DECATG_FOUND = '1'B;
    DECATG_KEY = ' ';
    ITRC = ITREAD ('GPDECATG', DECATG_KEY, '0', 'GE');
    IF ITRC = 8
       THEN DECATG_FOUND = '0'B;
    DO WHILE (DECATG_FOUND);

       IF (GPDECATG_RECORD.CN ^= ' ' &amp
           GPDECATG_RECORD.CN ^= '0000') THEN
          DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

            CALL CONVERT_GPDECATG_TO_DECATG;
     
            DEFUND_FOUND = '1'B;
            DEFUND_KEY = GPDECATG_RECORD.PCN     || 
                         GPDECATG_RECORD.CUNITNO ||
                         GPDECATG_RECORD.CN      || '      ';
            ITRC = ITREAD ('GPDEFUND',DEFUND_KEY,'','GE');
            IF ITRC = 8 THEN
               DEFUND_FOUND = '0'B;
            IF DEFUND_FOUND THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

                 CALL CONVERT_GPDEFUND_TO_DEFUND;
               END;

            DO WHILE(DEFUND_FOUND &amp
                    GPDEFUND_RECORD.PCN   = GPDECATG_RECORD.PCN &amp
                    GPDEFUND_RECORD.CN    = GPDECATG_RECORD.CN  &amp
                    GPDEFUND_RECORD.UNITNO = GPDECATG_RECORD.CUNITNO);

               /* ONLY FILL IN THE GPDEFUND VALUES FOR THESE FIELDS */
               /* FROM THE CATG FILE IF THE DEFUND RECORD IS A      */
               /* PARTICIPATING FUND RECORD.                        */

               IF DEFUND_RECORD.FPARTICIPATING = 'Y' THEN
                  DO;
                    DEFUND_RECORD.FCOST   = 
                                  DECATG_RECORD.CPAR_CONST_TOTAL;
                    DEFUND_RECORD.FEC     = 
                                  DECATG_RECORD.CPAR_EC_TOTAL;
  /*+++*/
                    DEFUND_RECORD.FADJTOT = 
                                  DECATG_RECORD.CADJPAR;
  /*+++*/
                /* PCGW-940161  CHANGED DECATG_RECORD.CTOTAL_AMOUNT*/ 
                /*        TO DECATG_RECORD.CPAR_TOATAL_AMOUNT.     */
                    DEFUND_RECORD.FTOTAL_AMOUNT = 
                                  DECATG_RECORD.CPAR_TOTAL_AMOUNT;

                    CALL CONVERT_DEFUND_TO_GPDEFUND;
                    ITRC = ITWRITE('GPDEFUND','');
                  END;   /* IF DEFUND.PARTPCT = Y DO */

               ITRC = ITREAD ('GPDEFUND','','','');
               IF ITRC = 8 THEN
                  DEFUND_FOUND = '0'B;
               IF DEFUND_FOUND THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

                    CALL CONVERT_GPDEFUND_TO_DEFUND;
                  END;
            END;   /* DO WHILE */
          END;   /* IF ... DO */
       ITRC = ITREAD ('GPDECATG','', '', '');
       IF ITRC = 8
          THEN DECATG_FOUND = '0'B;

    END;   /* DO WHILE */

  END UPDATE_DEFUND_RECORDS;

 /*------------------------------------------------------------------*/
 /*                      COMPUTE_FUNDING_TOTALS                      */
 /*                                                                  */
 /*   COMPUTE THE PROJECT-LEVEL AND UNIT-LEVEL FUND TOTALS. USE TWO  */
 /*   LINKED-LISTS TO STORE THE TOTALS AS THEY ARE BEING COMPUTED.   */
 /*   UPDATE GPDEFUND FROM LISTS.                                    */
 /*------------------------------------------------------------------*/
 COMPUTE_FUNDING_TOTALS:        PROC;
     
   DCL SAVE_SEGMENT             CHAR (31),
        FOUND                   BIT (1),
       (TOP_PROJ_PTR,
        LAST_PROJ_PTR,
        PROJ_FUND_PTR,
        TOP_UNIT_PTR,
        LAST_UNIT_PTR,
        UNIT_FUND_PTR,
        CURRENT_PTR)            POINTER;
     
   DCL 1 PROJ_FUND BASED,
         2 PCN                  CHAR (13),
         2 UNITNO               CHAR ( 3),
         2 CN                   CHAR ( 4),
         2 FUND                 CHAR ( 6),
         2 FFUND_TOTAL          FIXED DEC (11,2),
         2 NEXT_PTR             POINTER;
     
   DCL 1 UNIT_FUND BASED,
         2 PCN                  CHAR (13),
         2 UNITNO               CHAR ( 3),
         2 CN                   CHAR ( 4),
         2 FUND                 CHAR ( 6),
         2 FFUND_TOTAL          FIXED DEC (11,2),
         2 NEXT_PTR             POINTER;
     
   SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
   SHELL$MODULE_SEGMENT = 'COMPUTE_FUNDING_TOTALS';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
     
   /*--- INITIALIZE TOP AND LAST PTRS TO NULL ---*/
   TOP_PROJ_PTR  = NULL();
   LAST_PROJ_PTR = NULL();
   TOP_UNIT_PTR  = NULL();
   LAST_UNIT_PTR = NULL();
     
   DEPROJ_FOUND = '1'B;
   DEPROJ_KEY = ' ';
   ITRC = ITREAD ('GPDEPROJ', DEPROJ_KEY, '0', 'GE');
   IF ITRC = 8
      THEN DEPROJ_FOUND = '0'B;
     
   DO WHILE (DEPROJ_FOUND);
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEPROJ_TO_DEPROJ');
           %END;

      CALL CONVERT_GPDEPROJ_TO_DEPROJ;
     
      DECATG_FOUND = '1'B;
      DECATG_KEY   = DEPROJ_RECORD.PCN || '       ';
     
      ITRC = ITREAD ('GPDECATG', DECATG_KEY, '0', 'GE');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;
      IF DECATG_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

           CALL CONVERT_GPDECATG_TO_DECATG;
         END;
     
      DO WHILE ( DECATG_FOUND &amp DEPROJ_RECORD.PCN = DECATG_RECORD.PCN);
     
         IF DECATG_RECORD.CN = ' ' |
            DECATG_RECORD.CLOWCOST = 'N' |
            DECATG_RECORD.CN = ZERO_CATEGORY
           THEN GOTO NEXT_CATEGORY;
     
         DEFUND_FOUND = '1'B;
         DEFUND_KEY   = DECATG_RECORD.PCN ||
                        DECATG_RECORD.UNITNO ||
                        DECATG_RECORD.CN;
     
         ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '0', 'GE');
         IF ITRC = 8
            THEN DEFUND_FOUND = '0'B;
         IF DEFUND_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
     
     
         DO WHILE ( DEFUND_FOUND &amp
                    DEFUND_RECORD.PCN = DECATG_RECORD.PCN &amp
                    DEFUND_RECORD.UNITNO = DECATG_RECORD.UNITNO &amp
                    DEFUND_RECORD.CN = DECATG_RECORD.CN);
     
            CALL PROCESS_UNIT_FUND;
            CALL PROCESS_PROJ_FUND;
     
            ITRC = ITREAD ('GPDEFUND', '', '', '');
            IF ITRC = 8
               THEN DEFUND_FOUND = '0'B;
            IF DEFUND_FOUND
               THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

                 CALL CONVERT_GPDEFUND_TO_DEFUND;
               END;
         END;  /* WHILE DEFUND */
     
        NEXT_CATEGORY:
        ITRC = ITREAD ('GPDECATG', '', '', '');
        IF ITRC = 8
           THEN DECATG_FOUND = '0'B;
        IF DECATG_FOUND
           THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

             CALL CONVERT_GPDECATG_TO_DECATG;
           END;
     
      END; /* WHILE DECATG */
     
      ITRC = ITREAD ('GPDEPROJ', '', '', '');
      IF ITRC = 8
         THEN DEPROJ_FOUND = '0'B;
   END;  /* WHILE DEPROJ */
     
   CALL UPDATE_UNIT_FUND;
   CALL UPDATE_PROJ_FUND;
     
   CALL FREE_UNIT_FUND_LIST;
   CALL FREE_PROJ_FUND_LIST;
     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
 /*------------------------------------------------------------------*/
 /*                     PROCESS_UNIT_FUND                            */
 /*                                                                  */
 /*  ACCUMULATE THE UNIT-LEVEL TOTALS IN A LINKED LIST OF UNIT-LEVEL */
 /*  FUND NODES.                                                     */
 /*------------------------------------------------------------------*/
   PROCESS_UNIT_FUND : PROC;
     
     DCL SAVE_SEGMENT     CHAR(31);
     
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'pROCESS_uNIT_fUND';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
     
     /*--- SEARCH THE UNIT-LIST ---*/
     CURRENT_PTR = TOP_UNIT_PTR;
     FOUND = '0'B;
     
     DO WHILE ( CURRENT_PTR ^= NULL() &amp ^FOUND );
     
        IF CURRENT_PTR-&gtUNIT_FUND.FUND = DEFUND_RECORD.FUND &amp
           CURRENT_PTR-&gtUNIT_FUND.UNITNO = DEFUND_RECORD.UNITNO &amp
           CURRENT_PTR-&gtUNIT_FUND.PCN = DEFUND_RECORD.PCN
          THEN FOUND = '1'B;
          ELSE CURRENT_PTR = CURRENT_PTR-&gtUNIT_FUND.NEXT_PTR;
     END;
     
    /*--- ACCUMULATE FUND TOTAL IN UNIT-LIST ---*/
     IF FOUND
        THEN CURRENT_PTR-&gtUNIT_FUND.FFUND_TOTAL =
             CURRENT_PTR-&gtUNIT_FUND.FFUND_TOTAL +
                          DEFUND_RECORD.FFUND_TOTAL;
       /*--- CREATE UNIT FUND NODE FOR NEW FUND ---*/
        ELSE DO;
             ALLOCATE UNIT_FUND SET (UNIT_FUND_PTR);
             /*--- FIRST NODE ON THE LIST ---*/
             IF TOP_UNIT_PTR = NULL()
                THEN DO;
                     TOP_UNIT_PTR = UNIT_FUND_PTR;
                     LAST_UNIT_PTR = UNIT_FUND_PTR;
                     LAST_UNIT_PTR-&gtUNIT_FUND.NEXT_PTR = NULL();
                END;
                /*--- ADD THE NEW NODE TO THE END OF THE LIST ---*/
                ELSE DO;
                     LAST_UNIT_PTR-&gtUNIT_FUND.NEXT_PTR = UNIT_FUND_PTR;
                     LAST_UNIT_PTR = UNIT_FUND_PTR;
                     UNIT_FUND_PTR-&gtUNIT_FUND.NEXT_PTR = NULL();
                 END;
     
              UNIT_FUND_PTR-&gtUNIT_FUND.PCN    = DEFUND_RECORD.PCN;
              UNIT_FUND_PTR-&gtUNIT_FUND.UNITNO = DEFUND_RECORD.UNITNO;
              UNIT_FUND_PTR-&gtUNIT_FUND.CN     = ' ';
              UNIT_FUND_PTR-&gtUNIT_FUND.FUND   = DEFUND_RECORD.FUND;
              UNIT_FUND_PTR-&gtUNIT_FUND.FFUND_TOTAL =
                                       DEFUND_RECORD.FFUND_TOTAL;
     
        END;
     
     SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
  END PROCESS_UNIT_FUND;
     
     
 /*------------------------------------------------------------------*/
 /*                      PROCESS_PROJ_FUND                           */
 /*                                                                  */
 /*  ACCUMULATE THE PROJECT-LEVEL TOTALS IN A LINKED LIST OF PROJECT */
 /*  FUND NODES.                                                     */
 /*------------------------------------------------------------------*/
   PROCESS_PROJ_FUND : PROC;
     
     DCL SAVE_SEGMENT     CHAR(31);
     
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'PROCESS_PROJ_FUND';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
     
    /*--- SEARCH THE PROJECT-LIST ---*/
    CURRENT_PTR = TOP_PROJ_PTR;
    FOUND = '0'B;
     
    DO WHILE ( CURRENT_PTR ^= NULL() &amp ^FOUND );
     
       IF CURRENT_PTR-&gtPROJ_FUND.FUND = DEFUND_RECORD.FUND &amp
          CURRENT_PTR-&gtPROJ_FUND.PCN = DEFUND_RECORD.PCN
          THEN FOUND = '1'B;
          ELSE CURRENT_PTR = CURRENT_PTR-&gtPROJ_FUND.NEXT_PTR;
    END;
     
    /*--- ACCUMULATE FUND TOTAL IN PROJECT-LIST ---*/
    IF FOUND
       THEN CURRENT_PTR-&gtPROJ_FUND.FFUND_TOTAL =
            CURRENT_PTR-&gtPROJ_FUND.FFUND_TOTAL +
                         DEFUND_RECORD.FFUND_TOTAL;
    /*--- CREATE PROJECT FUND NODE FOR NEW FUND ---*/
       ELSE DO;
            ALLOCATE PROJ_FUND SET (PROJ_FUND_PTR);
            /*--- FIRST NODE ON THE LIST ---*/
            IF TOP_PROJ_PTR = NULL()
               THEN DO;
                    TOP_PROJ_PTR = PROJ_FUND_PTR;
                    LAST_PROJ_PTR = PROJ_FUND_PTR;
                    LAST_PROJ_PTR-&gtPROJ_FUND.NEXT_PTR = NULL();
               END;
             /*--- ADD THE NEW NODE TO THE END OF THE LIST ---*/
               ELSE DO;
                    LAST_PROJ_PTR-&gtPROJ_FUND.NEXT_PTR = PROJ_FUND_PTR;
                    LAST_PROJ_PTR = PROJ_FUND_PTR;
                    PROJ_FUND_PTR-&gtPROJ_FUND.NEXT_PTR = NULL();
               END;
     
             PROJ_FUND_PTR-&gtPROJ_FUND.PCN = DEFUND_RECORD.PCN;
             PROJ_FUND_PTR-&gtPROJ_FUND.UNITNO = ' ';
             PROJ_FUND_PTR-&gtPROJ_FUND.CN     = ' ';
             PROJ_FUND_PTR-&gtPROJ_FUND.FUND   = DEFUND_RECORD.FUND;
             PROJ_FUND_PTR-&gtPROJ_FUND.FFUND_TOTAL =
                            DEFUND_RECORD.FFUND_TOTAL;
     
       END;
     
    SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
   END PROCESS_PROJ_FUND;
     
     
 /*------------------------------------------------------------------*/
 /*                        UPDATE_UNIT_FUND                          */
 /*                                                                  */
 /* UPDATE UNIT-LEVEL DEFUND RECORD WITH UNIT FFUND_TOTAL.           */
 /* A UNIT-LEVEL DEFUND RECORD HAS A BLANK CN.                       */
 /*------------------------------------------------------------------*/
   UPDATE_UNIT_FUND: PROC;
     
     DCL SAVE_SEGMENT     CHAR(31);
     
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'UPDATE_UNIT_FUND';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
     
     /*--- UPDATE UNIT RECORDS FROM UNIT LIST ---*/
     CURRENT_PTR = TOP_UNIT_PTR;
     DO WHILE ( CURRENT_PTR ^= NULL() );
        DEFUND_KEY = CURRENT_PTR-&gtUNIT_FUND.PCN    ||
                     CURRENT_PTR-&gtUNIT_FUND.UNITNO || '    ' ||
                     CURRENT_PTR-&gtUNIT_FUND.FUND;
     
        DEFUND_FOUND = '1'B;
     
        ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '0', '');
        IF ITRC = 8
           THEN DEFUND_FOUND = '0'B;
     
        IF DEFUND_FOUND
           THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

                CALL CONVERT_GPDEFUND_TO_DEFUND;
                DEFUND_RECORD.FFUND_TOTAL =
                        CURRENT_PTR-&gtUNIT_FUND.FFUND_TOTAL;
                CALL CONVERT_DEFUND_TO_GPDEFUND;
                ITRC = ITWRITE ('GPDEFUND', '');
            END;
     
        CURRENT_PTR = CURRENT_PTR-&gtUNIT_FUND.NEXT_PTR;
    END;  /* WHILE CURRENT_PTR */
     
    SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
  END UPDATE_UNIT_FUND;
     
     
 /*------------------------------------------------------------------*/
 /*                     UPDATE_PROJ_FUND                             */
 /*                                                                  */
 /* UPDATE PROJECT-LEVEL DEFUND RECORD WITH PROJECT FFUND_TOTAL.     */
 /* THE PROJECT-LEVEL DEFUND RECORD HAS A BLANK UNIT AND BLANK CN.   */
 /*------------------------------------------------------------------*/
   UPDATE_PROJ_FUND: PROC;
     DCL SAVE_SEGMENT     CHAR(31);
     
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'UPDATE_PROJ_FUND';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
     
     
    /*--- UPDATE UNIT RECORDS FROM UNIT LIST ---*/
     CURRENT_PTR = TOP_PROJ_PTR;
     DO WHILE ( CURRENT_PTR ^= NULL() );
        DEFUND_KEY = CURRENT_PTR-&gtPROJ_FUND.PCN    ||
                     '   ' || '    ' ||
                     CURRENT_PTR-&gtPROJ_FUND.FUND;
     
        ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '', '');
        IF ITRC = 8
           THEN DEFUND_FOUND = '0'B;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

        CALL CONVERT_GPDEFUND_TO_DEFUND;
     
        DEFUND_RECORD.FFUND_TOTAL = CURRENT_PTR-&gtPROJ_FUND.FFUND_TOTAL;
     
        CALL CONVERT_DEFUND_TO_GPDEFUND;
        ITRC = ITWRITE ('GPDEFUND', '');
     
        CURRENT_PTR = CURRENT_PTR-&gtPROJ_FUND.NEXT_PTR;
     END;  /* WHILE CURRENT_PTR */
     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
   END UPDATE_PROJ_FUND;
     
     
 /*------------------------------------------------------------------*/
 /*                      FREE_UNIT_FUND_LIST                         */
 /*------------------------------------------------------------------*/
   FREE_UNIT_FUND_LIST: PROC;
     DCL SAVE_SEGMENT     CHAR(31);
     
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'FREE_UNIT_FUND_LIST';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
     
     /*--- FREE THE UNIT FUND LINKED LIST ---*/
     CURRENT_PTR = TOP_UNIT_PTR;
     DO WHILE ( CURRENT_PTR ^= NULL() );
        LAST_UNIT_PTR = CURRENT_PTR-&gtUNIT_FUND.NEXT_PTR;
        FREE CURRENT_PTR-&gtUNIT_FUND;
        CURRENT_PTR = LAST_UNIT_PTR;
     END;
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
   END FREE_UNIT_FUND_LIST;
     
     
 /*------------------------------------------------------------------*/
 /*                      FREE_PROJ_FUND_LIST                         */
 /*------------------------------------------------------------------*/
   FREE_PROJ_FUND_LIST: PROC;
     DCL SAVE_SEGMENT     CHAR(31);
     
     SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
     SHELL$MODULE_SEGMENT = 'FREE_PROJ_FUND_LIST';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
     
     /*--- FREE THE PROJECT FUND LINKED LIST ---*/
     CURRENT_PTR = TOP_PROJ_PTR;
     DO WHILE ( CURRENT_PTR ^= NULL() );
        LAST_PROJ_PTR = CURRENT_PTR-&gtPROJ_FUND.NEXT_PTR;
        FREE CURRENT_PTR-&gtPROJ_FUND;
        CURRENT_PTR = LAST_PROJ_PTR;
     END;
     SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
   END FREE_PROJ_FUND_LIST;
     
 END COMPUTE_FUNDING_TOTALS;
     
 /********************************************************************/
 /*************** END COMPUTE_FUNDING_TOTALS *************************/
 /********************************************************************/
     
 /*------------------------------------------------------------------*/
 /*                      COMPUTE_UNIT_AND_PROJ_TOTALS                */
 /*                                                                  */
 /*    COMPUTE UNIT AND PROJECT LEVEL TOTALS FOR PARTICIPATING AND   */
 /*    NON-PART CONSTRUCTION COSTS, E&ampC COSTS, AND AMOUNTS.  COMPUTE */
 /*    TOTALS FOR THE COMBINED PARTICIPATING AND NON-PART CONSTRUCT. */
 /*    COSTS, E&ampC COSTS, AND AMOUNTS. a LIST OF UNITS IS             */
 /*    CREATED FROM DECATG TO ACCUMULATE THE UNIT LEVEL TOTALS.      */
 /*    UPDATES GPDECATG, GPDEPROJ.                                   */
 /*------------------------------------------------------------------*/
 COMPUTE_UNIT_AND_PROJ_TOTALS:        PROC;
     
   DCL SAVE_SEGMENT           CHAR (31);
   DCL FOUND_UNIT             BIT (1);
   DCL (TOP_PTR,DECATG_PTR,
        LAST_PTR,CURRENT_PTR) POINTER;
     
   DCL 1 DECATG_REC BASED,
         2 PCN                  CHAR (13),
         2 UNITNO               CHAR ( 3),
         2 CN                   CHAR ( 4),
         2 CLOWCOST             CHAR ( 1),
         2 CPAR_CONST_TOTAL     FIXED DEC (11,2),
         2 CCONST_TOTAL         FIXED DEC (11,2),
         2 CNPAR_CONST_TOTAL    FIXED DEC (11,2),
         2 CPAR_TOTAL_AMOUNT    FIXED DEC (11,2),
         2 CTOTAL_AMOUNT        FIXED DEC (11,2),
         2 CNPAR_TOTAL_AMOUNT   FIXED DEC (11,2),
         2 CEC_PERCENT          FIXED DEC ( 5,2),
         2 CPAR_EC_TOTAL        FIXED DEC (11,2),
         2 CEC_TOTAL            FIXED DEC (11,2),
         2 CNPAR_EC_TOTAL       FIXED DEC (11,2),
 /*+++*/ 2 CADJPCT              FIXED DEC ( 5,2),
         2 CADJPAR              FIXED DEC (11,2),
         2 CADJTOT              FIXED DEC (11,2),
 /*+++*/ 2 CADJNPAR             FIXED DEC (11,2),
         2 CFEDERAL_SHARE       FIXED DEC (11,2),
         2 NEXT_PTR             POINTER;
     
   SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
   SHELL$MODULE_SEGMENT = 'COMPUTE_UNIT_AND_PROJ_TOTALS';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
   /*--- INITIALIZE THE TOP,LAST PTR TO BE NULL ---*/
   TOP_PTR  = NULL();
   LAST_PTR = NULL();
     
   DEPROJ_FOUND = '1'B;
   DEPROJ_KEY = ' ';
   ITRC = ITREAD ('GPDEPROJ', DEPROJ_KEY, '0', 'GE');
   IF ITRC = 8
      THEN DEPROJ_FOUND = '0'B;
     
   DO WHILE (DEPROJ_FOUND);
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEPROJ_TO_DEPROJ');
           %END;

      CALL CONVERT_GPDEPROJ_TO_DEPROJ;
     
      DECATG_FOUND = '1'B;
      DECATG_KEY   = DEPROJ_RECORD.PCN;
     
      ITRC = ITREAD ('GPDECATG', DECATG_KEY, '0', 'GE');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;
      IF DECATG_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

           CALL CONVERT_GPDECATG_TO_DECATG;
         END;
     
      DO WHILE (DECATG_FOUND &amp DECATG_RECORD.PCN = DEPROJ_RECORD.PCN);
     
         IF DECATG_RECORD.UNITNO = ' '  |
            DECATG_RECORD.CN     = ' '  |
            DECATG_RECORD.CN     = ZERO_CATEGORY |
            DECATG_RECORD.CLOWCOST = 'N'
           THEN GOTO NEXT_CATEGORY;
     
         /*--- SEARCH THE UNIT-LIST ---*/
         CURRENT_PTR = TOP_PTR;
         FOUND_UNIT = '0'B;
     
         DO WHILE ( CURRENT_PTR ^= NULL() &amp ^FOUND_UNIT );
     
             IF CURRENT_PTR-&gtDECATG_REC.PCN=DECATG_RECORD.PCN &amp
                CURRENT_PTR-&gtDECATG_REC.UNITNO=DECATG_RECORD.UNITNO
               THEN FOUND_UNIT = '1'B;
               ELSE CURRENT_PTR = CURRENT_PTR-&gtDECATG_REC.NEXT_PTR;
         END;  /* WHILE CURRENT_PTR */
     
         IF FOUND_UNIT
            THEN DO;
              CURRENT_PTR-&gtDECATG_REC.CEC_PERCENT   =
                CURRENT_PTR-&gtDECATG_REC.CEC_PERCENT +
                             DECATG_RECORD.CEC_PERCENT;
     
              CURRENT_PTR-&gtDECATG_REC.CNPAR_EC_TOTAL =
                CURRENT_PTR-&gtDECATG_REC.CNPAR_EC_TOTAL +
                  DECATG_RECORD.CNPAR_EC_TOTAL;
     
              CURRENT_PTR-&gtDECATG_REC.CPAR_EC_TOTAL  =
                CURRENT_PTR-&gtDECATG_REC.CPAR_EC_TOTAL +
                  DECATG_RECORD.CPAR_EC_TOTAL;
     
                CURRENT_PTR-&gtDECATG_REC.CEC_TOTAL =
                  CURRENT_PTR-&gtDECATG_REC.CEC_TOTAL +
                    DECATG_RECORD.CEC_TOTAL;
     
  /*+++*/
              CURRENT_PTR-&gtDECATG_REC.CADJPCT =
                CURRENT_PTR-&gtDECATG_REC.CADJPCT +
                             DECATG_RECORD.ADJPCT;
     
              CURRENT_PTR-&gtDECATG_REC.CADJNPAR =
                CURRENT_PTR-&gtDECATG_REC.CADJNPAR +
                  DECATG_RECORD.CADJNPAR;
     
              CURRENT_PTR-&gtDECATG_REC.CADJPAR =
                CURRENT_PTR-&gtDECATG_REC.CADJPAR +
                  DECATG_RECORD.CADJPAR;
     
                CURRENT_PTR-&gtDECATG_REC.CADJTOT =
                  CURRENT_PTR-&gtDECATG_REC.CADJTOT +
                    DECATG_RECORD.CADJTOT;

  /*+++*/
               CURRENT_PTR-&gtDECATG_REC.CNPAR_CONST_TOTAL  =
                   CURRENT_PTR-&gtDECATG_REC.CNPAR_CONST_TOTAL +
                     DECATG_RECORD.CNPAR_CONST_TOTAL;
     
               CURRENT_PTR-&gtDECATG_REC.CPAR_CONST_TOTAL   =
                   CURRENT_PTR-&gtDECATG_REC.CPAR_CONST_TOTAL +
                     DECATG_RECORD.CPAR_CONST_TOTAL;
     
               CURRENT_PTR-&gtDECATG_REC.CCONST_TOTAL       =
                   CURRENT_PTR-&gtDECATG_REC.CCONST_TOTAL +
                     DECATG_RECORD.CCONST_TOTAL;
     
               CURRENT_PTR-&gtDECATG_REC.CNPAR_TOTAL_AMOUNT =
                   CURRENT_PTR-&gtDECATG_REC.CNPAR_TOTAL_AMOUNT +
                     DECATG_RECORD.CNPAR_TOTAL_AMOUNT;
     
               CURRENT_PTR-&gtDECATG_REC.CPAR_TOTAL_AMOUNT  =
                     CURRENT_PTR-&gtDECATG_REC.CPAR_TOTAL_AMOUNT +
                       DECATG_RECORD.CPAR_TOTAL_AMOUNT;
     
               CURRENT_PTR-&gtDECATG_REC.CTOTAL_AMOUNT      =
                     CURRENT_PTR-&gtDECATG_REC.CTOTAL_AMOUNT +
                       DECATG_RECORD.CTOTAL_AMOUNT;
     
               CURRENT_PTR-&gtDECATG_REC.CFEDERAL_SHARE     =
                     CURRENT_PTR-&gtDECATG_REC.CFEDERAL_SHARE +
                       DECATG_RECORD.CFEDERAL_SHARE;
             END;  /* THEN */
             ELSE DO;
                ALLOCATE DECATG_REC SET (DECATG_PTR);
                /*--- FIRST NODE ON THE LIST ---*/
                IF TOP_PTR = NULL()
                   THEN DO;
                     TOP_PTR = DECATG_PTR;
                     LAST_PTR = DECATG_PTR;
                     DECATG_PTR-&gtDECATG_REC.NEXT_PTR = NULL();
                   END;
                /*--- ADD THE NEW NODE TO THE END OF THE LIST ---*/
                   ELSE DO;
                     LAST_PTR-&gtDECATG_REC.NEXT_PTR = DECATG_PTR;
                     LAST_PTR = DECATG_PTR;
                     DECATG_PTR-&gtDECATG_REC.NEXT_PTR = NULL();
                    END;
     
                  DECATG_PTR-&gtDECATG_REC.PCN  = DECATG_RECORD.PCN;
                  DECATG_PTR-&gtDECATG_REC.UNITNO             =
                    DECATG_RECORD.UNITNO;
                  DECATG_PTR-&gtDECATG_REC.CN                 = ' ';
                  DECATG_PTR-&gtDECATG_REC.CEC_PERCENT        =
                    DECATG_RECORD.CEC_PERCENT;
     
                  DECATG_PTR-&gtDECATG_REC.CNPAR_EC_TOTAL     =
                    DECATG_RECORD.CNPAR_EC_TOTAL;
     
                  DECATG_PTR-&gtDECATG_REC.CPAR_EC_TOTAL      =
                    DECATG_RECORD.CPAR_EC_TOTAL;
     
                  DECATG_PTR-&gtDECATG_REC.CEC_TOTAL          =
                    DECATG_RECORD.CEC_TOTAL;
     
  /*+++*/
                  DECATG_PTR-&gtDECATG_REC.CADJPCT            =
                    DECATG_RECORD.ADJPCT;
     
                  DECATG_PTR-&gtDECATG_REC.CADJNPAR           =
                    DECATG_RECORD.CADJNPAR;
     
                  DECATG_PTR-&gtDECATG_REC.CADJPAR            =
                    DECATG_RECORD.CADJPAR;
     
                  DECATG_PTR-&gtDECATG_REC.CADJTOT            =
                    DECATG_RECORD.CADJTOT;

  /*+++*/
                  DECATG_PTR-&gtDECATG_REC.CNPAR_CONST_TOTAL  =
                    DECATG_RECORD.CNPAR_CONST_TOTAL;
     
                  DECATG_PTR-&gtDECATG_REC.CPAR_CONST_TOTAL   =
                    DECATG_RECORD.CPAR_CONST_TOTAL;
     
                  DECATG_PTR-&gtDECATG_REC.CCONST_TOTAL       =
                    DECATG_RECORD.CCONST_TOTAL;
     
                  DECATG_PTR-&gtDECATG_REC.CNPAR_TOTAL_AMOUNT =
                    DECATG_RECORD.CNPAR_TOTAL_AMOUNT;
     
                  DECATG_PTR-&gtDECATG_REC.CPAR_TOTAL_AMOUNT  =
                    DECATG_RECORD.CPAR_TOTAL_AMOUNT;
     
                  DECATG_PTR-&gtDECATG_REC.CTOTAL_AMOUNT      =
                    DECATG_RECORD.CTOTAL_AMOUNT;
     
                  DECATG_PTR-&gtDECATG_REC.CFEDERAL_SHARE     =
                    DECATG_RECORD.CFEDERAL_SHARE;
     
              END;   /* ELSE */
     
         DEPROJ_RECORD.PROJ_CONST_COST =
            DEPROJ_RECORD.PROJ_CONST_COST + DECATG_RECORD.CCONST_TOTAL;
     
         DEPROJ_RECORD.PROJ_EC_TOTAL   = DEPROJ_RECORD.PROJ_EC_TOTAL +
                                         DECATG_RECORD.CEC_TOTAL;
     
  /*+++*/
         DEPROJ_RECORD.PJADJTOT        = DEPROJ_RECORD.PJADJTOT +
                                         DECATG_RECORD.CADJTOT;

  /*+++*/

         DEPROJ_RECORD.PROJ_TOTAL      = DEPROJ_RECORD.PROJ_TOTAL +
                                         DECATG_RECORD.CTOTAL_AMOUNT;
     
         DEPROJ_RECORD.PPAR_TOTAL_AMOUNT =
                                  DEPROJ_RECORD.PPAR_TOTAL_AMOUNT +
                                  DECATG_RECORD.CPAR_TOTAL_AMOUNT;
     
         DEPROJ_RECORD.PNPAR_TOTAL_AMOUNT =
                                  DEPROJ_RECORD.PNPAR_TOTAL_AMOUNT +
                                  DECATG_RECORD.CNPAR_TOTAL_AMOUNT;
     
         DEPROJ_RECORD.PFEDERAL_SHARE = DEPROJ_RECORD.PFEDERAL_SHARE +
                                        DECATG_RECORD.CFEDERAL_SHARE;
     
         NEXT_CATEGORY:
     
         ITRC = ITREAD ('GPDECATG', '', '', '');
         IF ITRC = 8
            THEN DECATG_FOUND = '0'B;
         IF DECATG_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

              CALL CONVERT_GPDECATG_TO_DECATG;
            END;

      END; /* WHILE DECATG */
     
      /*-- CHECK BEFORE DIVIDE, 8/16/88, GNC --*/
      IF DEPROJ_RECORD.PROJ_TOTAL = 0
         THEN DEPROJ_RECORD.PFEDERAL_PCT = 0;
         ELSE DEPROJ_RECORD.PFEDERAL_PCT = ROUND(100 *
                             DIVIDE(DEPROJ_RECORD.PFEDERAL_SHARE,
                                    DEPROJ_RECORD.PROJ_TOTAL,6,5),2);
     
      DEPROJ_KEY = DEPROJ_RECORD.PCN;
     
      CALL CONVERT_DEPROJ_TO_GPDEPROJ;
      ITRC = ITWRITE ('GPDEPROJ', '');
     
      ITRC = ITREAD ('GPDEPROJ', '', '', '');
      IF ITRC = 8
         THEN DEPROJ_FOUND = '0'B;
   END;  /* WHILE DEPROJ */
     
   /*--- UPDATE UNIT RECORDS FROM UNIT LIST ---*/
   CURRENT_PTR = TOP_PTR;
   DO WHILE ( CURRENT_PTR ^= NULL() );
      DECATG_KEY = CURRENT_PTR-&gtDECATG_REC.PCN    ||
                   CURRENT_PTR-&gtDECATG_REC.UNITNO ||
                   CURRENT_PTR-&gtDECATG_REC.CN;
     
      ITRC = ITREAD ('GPDECATG', DECATG_KEY, '', '');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

      CALL CONVERT_GPDECATG_TO_DECATG;
     
      DECATG_RECORD.PCN              = CURRENT_PTR-&gtDECATG_REC.PCN;
      DECATG_RECORD.UNITNO           = CURRENT_PTR-&gtDECATG_REC.UNITNO;
      DECATG_RECORD.CN                 = ' ';
      DECATG_RECORD.CEC_PERCENT        =
                    CURRENT_PTR-&gtDECATG_REC.CEC_PERCENT;
      DECATG_RECORD.CNPAR_EC_TOTAL     =
                    CURRENT_PTR-&gtDECATG_REC.CNPAR_EC_TOTAL;
      DECATG_RECORD.CPAR_EC_TOTAL      =
                    CURRENT_PTR-&gtDECATG_REC.CPAR_EC_TOTAL;
      DECATG_RECORD.CEC_TOTAL          =
                    CURRENT_PTR-&gtDECATG_REC.CEC_TOTAL;
  /*+++*/
      DECATG_RECORD.ADJPCT             =
                    CURRENT_PTR-&gtDECATG_REC.CADJPCT;
      DECATG_RECORD.CADJNPAR           =
                    CURRENT_PTR-&gtDECATG_REC.CADJNPAR;
      DECATG_RECORD.CADJPAR            =
                    CURRENT_PTR-&gtDECATG_REC.CADJPAR;
      DECATG_RECORD.CADJTOT            =
                    CURRENT_PTR-&gtDECATG_REC.CADJTOT;

  /*+++*/

      DECATG_RECORD.CNPAR_CONST_TOTAL  =
                    CURRENT_PTR-&gtDECATG_REC.CNPAR_CONST_TOTAL;
      DECATG_RECORD.CPAR_CONST_TOTAL   =
                    CURRENT_PTR-&gtDECATG_REC.CPAR_CONST_TOTAL;
      DECATG_RECORD.CCONST_TOTAL       =
                    CURRENT_PTR-&gtDECATG_REC.CCONST_TOTAL;
      DECATG_RECORD.CNPAR_TOTAL_AMOUNT =
                    CURRENT_PTR-&gtDECATG_REC.CNPAR_TOTAL_AMOUNT;
      DECATG_RECORD.CPAR_TOTAL_AMOUNT  =
                    CURRENT_PTR-&gtDECATG_REC.CPAR_TOTAL_AMOUNT;
      DECATG_RECORD.CTOTAL_AMOUNT      =
                    CURRENT_PTR-&gtDECATG_REC.CTOTAL_AMOUNT;
      DECATG_RECORD.CFEDERAL_SHARE     =
                    CURRENT_PTR-&gtDECATG_REC.CFEDERAL_SHARE;
     
     /*-- CHECK BEFORE DIVIDE, 8/16/88, GNC --*/
      IF DECATG_RECORD.CTOTAL_AMOUNT = 0
         THEN DECATG_RECORD.CFEDERAL_PCT = 0;
         ELSE DECATG_RECORD.CFEDERAL_PCT = ROUND(100 *
                    DIVIDE(DECATG_RECORD.CFEDERAL_SHARE,
                           DECATG_RECORD.CTOTAL_AMOUNT,6,5) ,2);
     
      CALL CONVERT_DECATG_TO_GPDECATG;
      ITRC = ITWRITE ('GPDECATG', '');
      CURRENT_PTR = CURRENT_PTR-&gtDECATG_REC.NEXT_PTR;
   END; /* WHILE CURRENT_PTR */
     
   /*--- FREE THE UNIT LINK LIST ---*/
   CURRENT_PTR = TOP_PTR;
   DO WHILE ( CURRENT_PTR ^= NULL() );
      LAST_PTR = CURRENT_PTR-&gtDECATG_REC.NEXT_PTR;
      FREE CURRENT_PTR-&gtDECATG_REC;
      CURRENT_PTR = LAST_PTR;
   END;
     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
 END COMPUTE_UNIT_AND_PROJ_TOTALS;
     
     
 /*------------------------------------------------------------------*/
 /*                    COMPUTE_ACTUAL_FUND_PERCENTAGES               */
 /*                                                                  */
 /*       COMPUTE THE ACTUAL FUND PERCENTAGES AT THE PROJECT, UNIT,  */
 /*       AND CATEGORY LEVELS. THE ACTUAL PERCENTAGE IS THE TOTAL    */
 /*       AMOUNT OF THE ENTITY (PROJECT, UNIT, CATEGORY) TO WHICH THE*/
 /*       FUND IS BEING APPLIED.  UPDATES GPDEFUND.                  */
 /*------------------------------------------------------------------*/
 COMPUTE_ACTUAL_FUND_PERCENTAGES: PROC;
     
   DCL SAVE_SEGMENT              CHAR (31),
       ACTUAL_PCT                FIXED DEC (6,3);
     
   SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
   SHELL$MODULE_SEGMENT = 'COMPUTE_ACTUAL_FUND_PERCENTAGES';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
   /*--- COPY THE TOTAL AMOUNTS INTO THE RESPECTIVE DEFUND RECORDS --*/
     
   DEPROJ_RECORD.PCN    = ' ';
   DECATG_RECORD.PCN    = ' ';
   DECATG_RECORD.UNITNO = ' ';
   DECATG_RECORD.CN     = ' ';
     
   DEFUND_FOUND = '1'B;
   DEFUND_KEY = ' ';
   ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '0', 'GE');
   IF ITRC = 8
      THEN DEFUND_FOUND = '0'B;
     
     
   DO WHILE (DEFUND_FOUND);
     

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

      CALL CONVERT_GPDEFUND_TO_DEFUND;
     
      IF DEFUND_RECORD.UNITNO = ' ' &amp DEFUND_RECORD.CN = ' '
         THEN DO;
           IF DEPROJ_RECORD.PCN ^= DEFUND_RECORD.PCN
              THEN DO;
                DEPROJ_FOUND = '1'B;
                DEPROJ_KEY = DEFUND_RECORD.PCN;
                ITRC = ITREAD ('GPDEPROJ', DEPROJ_KEY, '', '');
                IF ITRC = 8
                   THEN DEPROJ_FOUND = '0'B;
                IF DEPROJ_FOUND
                   THEN DO;

                     %IF DEBUGGER = 'ON'
                         %THEN %DO;
                 PUT SKIP LIST ('CALL CONVERT_GPDEPROJ_TO_DEPROJ');
                        %END;
 
                     CALL CONVERT_GPDEPROJ_TO_DEPROJ;
                   END;
              END;
     
            /*-- CHECK BEFORE DEVIDE, 8/16/88, GNC --*/
     
            IF DEPROJ_RECORD.PROJ_TOTAL = 0
              THEN ACTUAL_PCT = 0;
              ELSE ACTUAL_PCT = 100 * DIVIDE(DEFUND_RECORD.FFUND_TOTAL,
                                      DEPROJ_RECORD.PROJ_TOTAL,6,5);
         END;
         ELSE DO;
     
              IF DECATG_RECORD.PCN ^= DEFUND_RECORD.PCN |
                 DECATG_RECORD.UNITNO ^= DEFUND_RECORD.UNITNO |
                 DECATG_RECORD.CN ^= DEFUND_RECORD.CN
                THEN DO;
                   DECATG_FOUND = '1'B;
                   DECATG_KEY = DEFUND_RECORD.PCN    ||
                                DEFUND_RECORD.UNITNO ||
                                DEFUND_RECORD.CN;
     
                   ITRC = ITREAD ('GPDECATG', DECATG_KEY, '0', '');
                   IF ITRC = 8
                      THEN DECATG_FOUND = '0'B;
                   IF DECATG_FOUND
                      THEN DO;

                      %IF DEBUGGER = 'ON'
                          %THEN %DO;
                 PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
                          %END;
                        CALL CONVERT_GPDECATG_TO_DECATG;
                      END; 
     
                END;
     
                 IF DECATG_RECORD.CTOTAL_AMOUNT = 0
                    THEN ACTUAL_PCT = 0;
                    ELSE ACTUAL_PCT = DIVIDE(DEFUND_RECORD.FFUND_TOTAL,
                                DECATG_RECORD.CTOTAL_AMOUNT,6,5) * 100;
     
             END;   /* ELSE */
     
       DEFUND_RECORD.FACTUAL_PCT = ROUND (ACTUAL_PCT,2);
     
       CALL CONVERT_DEFUND_TO_GPDEFUND;
       ITRC = ITWRITE ('GPDEFUND', '');
     
       ITRC = ITREAD ('GPDEFUND', '', '', '');
       IF ITRC = 8
          THEN DEFUND_FOUND = '0'B;
     END;  /* WHILE DEFUND */
     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
 END COMPUTE_ACTUAL_FUND_PERCENTAGES;
     
 /*------------------------------------------------------------------*/
 /*               COMPUTE_UNIT_AND_PROJECT_TOTALS                    */
 /*                                                                  */
 /*  COMPUTES THE PACTUAL_PCT FIELD ONLY.  UPDATES GPDEPROJ.         */
 /*------------------------------------------------------------------*/
 COMPUTE_UNIT_AND_PROJECT_TOTALS:        PROC;
     
   DCL SAVE_SEGMENT             CHAR (31);
     
   SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
   SHELL$MODULE_SEGMENT = 'COMPUTE_UNIT_AND_PROJECT_TOTALS';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
     
 /*--- COMPUTE OVERALL PROJECT ACTUAL FUND PERCENTAGE TOTAL ---*/
   DEPROJ_FOUND = '1'B;
   DEPROJ_KEY = ' ';
   ITRC = ITREAD ('GPDEPROJ', DEPROJ_KEY, '0', 'GE');
   IF ITRC = 8
      THEN DEPROJ_FOUND = '0'B;
     
   DO WHILE ( DEPROJ_FOUND );
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEPROJ_TO_DEPROJ');
           %END;

      CALL CONVERT_GPDEPROJ_TO_DEPROJ;
     
      DEFUND_KEY = DEPROJ_RECORD.PCN;
     
      DEFUND_FOUND = '1'B;
      ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '0', 'GE');
      IF ITRC = 8
         THEN DEFUND_FOUND = '0'B;
      IF DEFUND_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
     
      DO WHILE (DEFUND_FOUND &amp DEFUND_RECORD.PCN = DEPROJ_RECORD.PCN);
     
         IF DEFUND_RECORD.CN = ZERO_CATEGORY |
            DEFUND_RECORD.CN ^= ' ' |
            DEFUND_RECORD.UNITNO ^= ' '
           THEN GOTO NEXT_FUND;
     
         DEPROJ_RECORD.PACTUAL_PCT = DEPROJ_RECORD.PACTUAL_PCT +
                                      DEFUND_RECORD.FACTUAL_PCT;
     
         NEXT_FUND:
          ITRC = ITREAD ('GPDEFUND', '', '', '');
          IF ITRC = 8
             THEN DEFUND_FOUND = '0'B;
          IF DEFUND_FOUND
             THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
     
       END;  /* WHILE DEFUND */
     
       CALL CONVERT_DEPROJ_TO_GPDEPROJ;
       ITRC = ITWRITE ('GPDEPROJ', '');
     
       ITRC = ITREAD ('GPDEPROJ', '', '', '');
       IF ITRC = 8
          THEN DEPROJ_FOUND = '0'B;
   END; /* WHILE DEPROJ */
     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
 END COMPUTE_UNIT_AND_PROJECT_TOTALS;
     
 /*------------------------------------------------------------------*/
 /*                COMPUTE_DECATG_FUNDED_AMOUNT                      */
 /*                                                                  */
 /*  COMPUTE THE AMOUNT FUNDED FOR EACH CATEGORY.  UPDATES GPDECATG. */
 /*------------------------------------------------------------------*/
     
 COMPUTE_DECATG_FUNDED_AMOUNT : PROC;
   DCL SAVE_SEGMENT                   CHAR (31);
     
   SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
   SHELL$MODULE_SEGMENT = 'COMPUTE_DECATG_FUNDED_AMOUNT';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
     
   DEPROJ_FOUND = '1'B;
   DEPROJ_KEY = ' ';
   ITRC = ITREAD ('GPDEPROJ', DEPROJ_KEY, '0', 'GE');
   IF ITRC = 8
      THEN DEPROJ_FOUND = '0'B;
     
   DO WHILE (DEPROJ_FOUND);
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEPROJ_TO_DEPROJ');
           %END;

      CALL CONVERT_GPDEPROJ_TO_DEPROJ;
     
      DECATG_FOUND = '1'B;
      DECATG_KEY   = DEPROJ_RECORD.PCN;
      ITRC = ITREAD ('GPDECATG', DECATG_KEY, '', 'GE');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;
      IF DECATG_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

           CALL CONVERT_GPDECATG_TO_DECATG;
         END;
     
      DO WHILE (DECATG_FOUND &amp DECATG_RECORD.PCN = DEPROJ_RECORD.PCN);
     
         IF DECATG_RECORD.CN = ' ' | DECATG_RECORD.CN = ZERO_CATEGORY
            THEN GOTO NEXT_CATEGORY;
     
         DEFUND_FOUND = '1'B;
         DEFUND_KEY = DECATG_RECORD.PCN || DECATG_RECORD.UNITNO ||
                      DECATG_RECORD.CN;
     
         DECATG_RECORD.CFUNDED_AMOUNT = 0;
         ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '0', 'GE');
         IF ITRC = 8
            THEN DEFUND_FOUND = '0'B;
         IF DEFUND_FOUND
           THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
     
         DO WHILE (DEFUND_FOUND &amp DEFUND_RECORD.PCN =
                   DECATG_RECORD.PCN
                   &amp DEFUND_RECORD.UNITNO = DECATG_RECORD.UNITNO
                   &amp DEFUND_RECORD.CN = DECATG_RECORD.CN);
     
            DECATG_RECORD.CFUNDED_AMOUNT =
              DECATG_RECORD.CFUNDED_AMOUNT + DEFUND_RECORD.FFUND_TOTAL;
     
            ITRC = ITREAD ('GPDEFUND', '', '', '');
            IF ITRC = 8
               THEN DEFUND_FOUND = '0'B;
            IF DEFUND_FOUND
               THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
            END;
     
         END;  /* WHILE DEFUND */
     
         CALL CONVERT_DECATG_TO_GPDECATG;
         ITRC = ITWRITE ('GPDECATG', '');
     
         NEXT_CATEGORY:
     
         ITRC = ITREAD ('GPDECATG', '', '', '');
         IF ITRC = 8
            THEN DECATG_FOUND = '0'B;
         IF DECATG_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

              CALL CONVERT_GPDECATG_TO_DECATG;
            END;
     
       END;  /* WHILE DECATG */
     
       ITRC = ITREAD ('GPDEPROJ', '', '', '');
       IF ITRC = 8
          THEN DEPROJ_FOUND = '0'B;
   END;  /* WHILE DEPROJ */
     
   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;
     
 END COMPUTE_DECATG_FUNDED_AMOUNT;
 
 /*------------------------------------------------------------------*/
 /*                   GENERATE_FUNDING_BY_UNIT                       */
 /*                                                                  */
 /*      THESE PROCEDURES PERFORMS THE FUNDING SUMMARY BY UNIT       */
 /*      CALCULATIONS FOR SELECTED PROJECTS.     UPDATES GPDEFUND    */
 /*------------------------------------------------------------------*/
 COMPUTE_UNIT_FUND_TOTALS : PROC;
                           
    DCL SAVE_SEGMENT                           CHAR (31),
        CURRENT_FUND                           CHAR (6),
        HOLD_FUND                              CHAR (6),
        CURRENT_PCN                            CHAR (13),
        HOLD_PCN                               CHAR (13),
        FUND_IN_LIST                           BIT (1) INIT ('1'B),
        END_OF_LIST                            BIT (1) INIT ('0'B);

    DCL (TOP_PTR,DEFUND_PTR,
        LAST_PTR,CURRENT_PTR) POINTER;
     
    DCL 1 UNIT_FUND_REC BASED,
          2 PCN                                CHAR (13),
          2 UNITNO                             CHAR ( 3),
          2 FUND                               CHAR ( 6),
          2 CN                                 CHAR ( 4),
          2 FLIMIT                             FIXED DEC (11,2),
          2 FCOST                              FIXED DEC (11,2),
          2 FADJTOT                            FIXED DEC (11,2),
          2 FEC                                FIXED DEC (11,2),
          2 FTOTAMT                            FIXED DEC (11,2),
          2 FACTPCT                            FIXED DEC (5,2),
          2 FFNDTOT                            FIXED DEC (11,2),
          2 FPARTPCT                           CHAR (1),
          2 NEXT_PTR                           POINTER;

     DCL  FLIMIT                                 FIXED DEC (11,2),
          FCOST                                  FIXED DEC (11,2),
          FADJTOT                                FIXED DEC (11,2),
          FEC                                    FIXED DEC (11,2),
          FTOTAMT                                FIXED DEC (11,2),
          FACTPCT                                FIXED DEC (5,2),
          FFNDTOT                                FIXED DEC (11,2),
          FPARTPCT                               CHAR (1);

    SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
    SHELL$MODULE_SEGMENT = 'GENERATE_FUNDING_BY_UNIT';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       
         
    TOP_PTR  = NULL();
    LAST_PTR = NULL();
                  
    CURRENT_PCN = ' ';
    DEPROJ_KEY  = CURRENT_PCN;
    DEPROJ_FOUND = '1'B;
    ITRC = ITREAD ('GPDEPROJ', DEPROJ_KEY, '0', 'GE');
    IF ITRC = 8
       THEN DEPROJ_FOUND = '0'B;
    IF DEPROJ_FOUND
       THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEPROJ_TO_DEPROJ');
           %END;

         CALL CONVERT_GPDEPROJ_TO_DEPROJ;
       END;

    DO WHILE (DEPROJ_FOUND &amp ^END_OF_LIST);

       CURRENT_PCN = DEPROJ_RECORD.PCN;
       CALL INIT_VARIABLES;
  
       /* GET FUNDING INFO FOR CURRENT PROJECT */

       /*--- BE SURE TO START PROCESS FROM TOP OF FILE.         ---*/
       /*--- FIRST RECORD FOR PCN IS PROJECT-LEVEL RECORD AND   ---*/
       /*--- WILL CONTAIN CUMULATIVE TOTALS FOR A FUND.   THE   ---*/
       /*--- PROJECT-LEVEL RECORD HAS A BLANK UNIT AND CN.      ---*/

       /** GET FIRST FUND RECORD FOR PROJECT **/
       DEFUND_FOUND = '1'B;
       ITRC = ITREAD ('GPDEFUND', CURRENT_PCN, '3', 'GE');
       IF ITRC = 8
          THEN DEFUND_FOUND = '0'B;
       IF DEFUND_FOUND                                
          THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;     
            END;

       HOLD_PCN = DEFUND_RECORD.PCN;

       DO WHILE (DEFUND_FOUND &amp HOLD_PCN = CURRENT_PCN);

          CURRENT_FUND = DEFUND_RECORD.FUND;

          DO WHILE (DEFUND_FOUND &amp 
                    DEFUND_RECORD.PCN  = CURRENT_PCN &amp
                    DEFUND_RECORD.FUND = CURRENT_FUND);
             CURRENT_FUND = DEFUND_RECORD.FUND;

             /*-- ACCUMULATE DATA FROM DEFUND RECORD --*/
             IF (DEFUND_RECORD.UNITNO ^= ' ' &amp
                 DEFUND_RECORD.CN ^= ' '     &amp
                 DEFUND_RECORD.CN ^= '0000')    THEN
                DO;
                  /* RTD - Added check to see if category is low-cost */
                  DECATG_FOUND = '1'B;
                  DECATG_KEY   = DEFUND_RECORD.PCN || 
                                 DEFUND_RECORD.UNITNO ||
                                 DEFUND_RECORD.CN;
             
                  ITRC = ITREAD ('GPDECATG', DECATG_KEY, '0', 'GE');
                  IF ITRC = 8
                     THEN DECATG_FOUND = '0'B;
                  IF DECATG_FOUND
                     THEN CALL CONVERT_GPDECATG_TO_DECATG;

                  IF DECATG_RECORD.CLOWCOST = 'Y' THEN 
                     DO;
                       FLIMIT  = FLIMIT + DEFUND_RECORD.FLIMIT;
                       FCOST   = FCOST + DEFUND_RECORD.FCOST;
                       FADJTOT = FADJTOT + DEFUND_RECORD.FADJTOT;
                       FEC     = FEC + DEFUND_RECORD.FEC;
                       FTOTAMT = FTOTAMT + DEFUND_RECORD.FTOTAL_AMOUNT;
                       FACTPCT = FACTPCT + DEFUND_RECORD.FACTUAL_PCT;
                       FFNDTOT = FFNDTOT + DEFUND_RECORD.FFUND_TOTAL;
                     END;
                END;   /* IF ... DO */
             ITRC = ITREAD ('GPDEFUND', '', '', '');
             IF ITRC = 8
                THEN DEFUND_FOUND = '0'B;
             IF DEFUND_FOUND 
                THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

                 CALL CONVERT_GPDEFUND_TO_DEFUND;
               END;

          END;  /* DO WHILE DEFUND FOUND */   

          HOLD_FUND = DEFUND_RECORD.FUND;
          HOLD_PCN  = DEFUND_RECORD.PCN;

          CALL CALCULATE_TOTALS;
          CALL INIT_VARIABLES;
       END;   /* DO WHILE HOLD PCN = CURRENT_PCN */
 
       /*--- GET NEXT PROJECT ---*/
       ITRC = ITREAD ('GPDEPROJ', '', '', '');
       IF ITRC = 8
          THEN DEPROJ_FOUND = '0'B;
       IF DEPROJ_FOUND 
          THEN DO;

         %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEPROJ_TO_DEPROJ');
           %END;

            CALL CONVERT_GPDEPROJ_TO_DEPROJ;
          END;

    END; /* DO WHILE DEPROJ_FOUND */

    CALL UPDATE_UNIT_FUND_TOTALS;

    /*--- FREE THE UNIT FUND LINK LIST ---*/
    CURRENT_PTR = TOP_PTR;
    DO WHILE ( CURRENT_PTR ^= NULL() );
       LAST_PTR = CURRENT_PTR-&gtUNIT_FUND_REC.NEXT_PTR;
       FREE CURRENT_PTR-&gtUNIT_FUND_REC;
       CURRENT_PTR = LAST_PTR;
    END;

    SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

     /*--- NESTED PROCEDURES WITHIN COMPUTE_UNIT_FUND_TOTALS ---*/
     INIT_VARIABLES : PROC;

        /* INITIALIZE ALL THE PCN/FUND TOTAL VARIABLES TO ZERO */
        FLIMIT    = 0.00;
        FCOST     = 0.00;
        FADJTOT   = 0.00;
        FEC       = 0.00;
        FTOTAMT   = 0.00;
        FACTPCT   = 0.00;
        FFNDTOT   = 0.00;

     END INIT_VARIABLES;
     /*--------------------------------------------------------*/
     CALCULATE_TOTALS : PROC;

       /* WHEN ALL FUNDS ARE TOTALLED, THE UNIT TOTAL FUND */
       /* RECORD IN THE LIST IS UPDATED.                   */

          CALL CHECK_UNIT_LIST_FOR_FUND;

          /* IF THE FUND IS ALREADY IN THE LIST THEN
             SKIP THIS PROCEDURE.                    */

          IF FUND_IN_LIST THEN
             END_OF_LIST = '1'B;

                /* IF FUND NOT IN THE LIST ALREADY, 
                   THEN ADD A NEW NODE TO THE LIST 
                   WITH THE ACCUMULATED VALUES.   */
          ELSE   
             DO;
                ALLOCATE UNIT_FUND_REC SET (DEFUND_PTR);
                /*--- FIRST NODE ON THE LIST ---*/
                IF TOP_PTR = NULL()
                   THEN DO;
                        TOP_PTR  = DEFUND_PTR;
                        LAST_PTR = DEFUND_PTR;
                        DEFUND_PTR-&gtUNIT_FUND_REC.NEXT_PTR =NULL();
                      END;
                   /*--- ADD THE NEW NODE TO THE END OF THE LIST ---*/
                ELSE 
                   DO;
                      LAST_PTR-&gtUNIT_FUND_REC.NEXT_PTR =DEFUND_PTR;
                      LAST_PTR = DEFUND_PTR;
                      DEFUND_PTR-&gtUNIT_FUND_REC.NEXT_PTR = NULL();
                   END;
                DEFUND_PTR-&gtUNIT_FUND_REC.PCN      = CURRENT_PCN;
                DEFUND_PTR-&gtUNIT_FUND_REC.FUND     = CURRENT_FUND;
                DEFUND_PTR-&gtUNIT_FUND_REC.UNITNO   = '   ';
                DEFUND_PTR-&gtUNIT_FUND_REC.CN       = '    ';
                DEFUND_PTR-&gtUNIT_FUND_REC.FLIMIT   = FLIMIT;
                DEFUND_PTR-&gtUNIT_FUND_REC.FCOST    = FCOST;
                DEFUND_PTR-&gtUNIT_FUND_REC.FADJTOT  = FADJTOT;
                DEFUND_PTR-&gtUNIT_FUND_REC.FEC      = FEC;
                DEFUND_PTR-&gtUNIT_FUND_REC.FTOTAMT  = FTOTAMT;
                DEFUND_PTR-&gtUNIT_FUND_REC.FACTPCT  = FACTPCT;
                DEFUND_PTR-&gtUNIT_FUND_REC.FFNDTOT  = FFNDTOT;
                DEFUND_PTR-&gtUNIT_FUND_REC.FPARTPCT = FPARTPCT;

             END;   /* ELSE DO */

     END CALCULATE_TOTALS;
     /*---------------------------------------------------------*/
     CHECK_UNIT_LIST_FOR_FUND : PROC;

         /*--- SEARCH THE UNIT-LIST ---*/
         CURRENT_PTR = TOP_PTR;
         FUND_IN_LIST = '0'B;

         DO WHILE ( CURRENT_PTR ^= NULL() &amp ^FUND_IN_LIST);
     
            IF (CURRENT_PTR-&gtUNIT_FUND_REC.PCN = CURRENT_PCN &amp
                CURRENT_PTR-&gtUNIT_FUND_REC.FUND = CURRENT_FUND) THEN
               FUND_IN_LIST = '1'B;
            ELSE 
               CURRENT_PTR = CURRENT_PTR-&gtUNIT_FUND_REC.NEXT_PTR;
         END;  /* DO WHILE CURRENT_PTR ^= NULL */
        

     END CHECK_UNIT_LIST_FOR_FUND;

     /*--------------------------------------------------------*/
     UPDATE_UNIT_FUND_TOTALS : PROC;

       /* WHEN ALL FUND RECORDS IN THE LIST ARE TOTALLED, */
       /* THE UNIT FUND TOTAL FUND RECORD IS UPDATED.     */

       /*--- UPDATE UNIT RECORDS FROM UNIT LIST ---*/
       CURRENT_PTR = TOP_PTR;
       DO WHILE ( CURRENT_PTR ^= NULL() );
          DEFUND_KEY = CURRENT_PTR-&gtUNIT_FUND_REC.PCN    ||
                       CURRENT_PTR-&gtUNIT_FUND_REC.FUND   ||
                       CURRENT_PTR-&gtUNIT_FUND_REC.UNITNO ||
                       CURRENT_PTR-&gtUNIT_FUND_REC.CN;

     
         ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '3', '');
          IF ITRC = 8
             THEN DEFUND_FOUND = '0'B;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

          CALL CONVERT_GPDEFUND_TO_DEFUND;
     
          DEFUND_RECORD.FLIMIT   = 
                 CURRENT_PTR-&gtUNIT_FUND_REC.FLIMIT;
          DEFUND_RECORD.FCOST    = 
                 CURRENT_PTR-&gtUNIT_FUND_REC.FCOST; 
          DEFUND_RECORD.FADJTOT  = 
                 CURRENT_PTR-&gtUNIT_FUND_REC.FADJTOT;
          DEFUND_RECORD.FEC      = 
                 CURRENT_PTR-&gtUNIT_FUND_REC.FEC;
          DEFUND_RECORD.FTOTAL_AMOUNT  = 
                 CURRENT_PTR-&gtUNIT_FUND_REC.FTOTAMT;
          DEFUND_RECORD.FACTUAL_PCT  = 
                 CURRENT_PTR-&gtUNIT_FUND_REC.FACTPCT;
          DEFUND_RECORD.FFUND_TOTAL  = 
                 CURRENT_PTR-&gtUNIT_FUND_REC.FFNDTOT;
          DEFUND_RECORD.FPARTICIPATING = 
                 CURRENT_PTR-&gtUNIT_FUND_REC.FPARTPCT;

          CALL CONVERT_DEFUND_TO_GPDEFUND;
          ITRC = ITWRITE ('GPDEFUND', '');
          CURRENT_PTR = CURRENT_PTR-&gtUNIT_FUND_REC.NEXT_PTR;
       END; /* WHILE CURRENT_PTR */

     END UPDATE_UNIT_FUND_TOTALS;

     /*--END NESTED PROCEDURES WITHIN COMPUTE_UNIT_FUND_TOTALS--*/

 END COMPUTE_UNIT_FUND_TOTALS;

 /*------------------------------------------------------------------*/
 /*                   COMPUTE_FUNDING_BY_FUND                        */
 /*                                                                  */
 /*      THESE PROCEDURES PERFORMS THE FUNDING SUMMARY BY FUND       */
 /*      CALCULATIONS FOR SELECTED PROJECTS.     UPDATES GPDEFUND    */
 /*------------------------------------------------------------------*/
 COMPUTE_CATEGORY_FUND_TOTALS : PROC;
                           
    DCL SAVE_SEGMENT                           CHAR (31),
        CURRENT_FUND                           CHAR (6),
        HOLD_FUND                              CHAR (6),
        CURRENT_PCN                            CHAR (13),
        HOLD_PCN                               CHAR (13),
        FUND_IN_LIST                           BIT (1) INIT ('1'B);

    DCL (TOP_PTR,DEFUND_PTR,
        LAST_PTR,CURRENT_PTR) POINTER;
     
    DCL 1 CATEGORY_FUND_REC BASED,
          2 PCN                                CHAR (13),
          2 UNITNO                             CHAR ( 3),
          2 FUND                               CHAR ( 6),
          2 CN                                 CHAR ( 4),
          2 FLIMIT                             FIXED DEC (11,2),
          2 FCOST                              FIXED DEC (11,2),
          2 FADJTOT                            FIXED DEC (11,2),
          2 FEC                                FIXED DEC (11,2),
          2 FTOTAMT                            FIXED DEC (11,2),
          2 FACTPCT                            FIXED DEC (5,2),
          2 FFNDTOT                            FIXED DEC (11,2),
          2 FPARTPCT                           CHAR (1),
          2 NEXT_PTR                           POINTER;

    SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
    SHELL$MODULE_SEGMENT = 'COMPUTE_CATEGORY_FUND_TOTALS';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       

    TOP_PTR  = NULL();
    LAST_PTR = NULL();
                           
    CURRENT_PCN = ' ';
    DEFUND_KEY = CURRENT_PCN;
    DEFUND_FOUND = '1'B;
    ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '0', 'GE');
    IF ITRC = 8
       THEN DEFUND_FOUND = '0'B;
    IF DEFUND_FOUND
       THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

              CALL CONVERT_GPDEFUND_TO_DEFUND;
         END;

    DECATG_RECORD.PCN =    ' ';
    DECATG_RECORD.UNITNO = ' ';
    DECATG_RECORD.CN     = ' ';

    DO WHILE (DEFUND_FOUND);

       CURRENT_PCN = DEFUND_RECORD.PCN;
  
       IF DEFUND_RECORD.CN ^= ' ' THEN
          DO;

             /* RTD - Added check to see if category is a low-cost */
             /* category. (Only need to read DECATG when the       */
             /* PCN/UNITNO/CN changes)                             */

             IF DECATG_RECORD.PCN    ^= CURRENT_PCN          |
                DECATG_RECORD.UNITNO ^= DEFUND_RECORD.UNITNO |
                DECATG_RECORD.CN     ^= DEFUND_RECORD.CN       THEN
                DO;              
                   DECATG_FOUND = '1'B;
                   DECATG_KEY   = DEFUND_RECORD.PCN || 
                                  DEFUND_RECORD.UNITNO ||
                                  DEFUND_RECORD.CN;
        
                   ITRC = ITREAD ('GPDECATG', DECATG_KEY, '0', 'GE');
                   IF ITRC = 8
                      THEN DECATG_FOUND = '0'B;
                   IF DECATG_FOUND
                      THEN CALL CONVERT_GPDECATG_TO_DECATG;
                END;

             IF DECATG_RECORD.CLOWCOST = 'Y' THEN 
                DO;
                  CALL CHECK_LIST_FOR_FUND;

                  /* IF THE FUND IS ALREADY IN THE LIST THEN
                     ADD THE CURRENT NODE VALUES TO THE VALUES
                     IN THE LIST.                             */

                  IF FUND_IN_LIST THEN
                     DO;
                       IF DEFUND_RECORD.CN ^= '0000' THEN
                          DO;
     
                            CURRENT_PTR-&gtCATEGORY_FUND_REC.FLIMIT =
                                CURRENT_PTR-&gtCATEGORY_FUND_REC.FLIMIT +
                                DEFUND_RECORD.FLIMIT;
                            CURRENT_PTR-&gtCATEGORY_FUND_REC.FCOST =
                                CURRENT_PTR-&gtCATEGORY_FUND_REC.FCOST +
                                DEFUND_RECORD.FCOST;
                            CURRENT_PTR-&gtCATEGORY_FUND_REC.FADJTOT =
                                CURRENT_PTR-&gtCATEGORY_FUND_REC.FADJTOT +
                                DEFUND_RECORD.FADJTOT;
                            CURRENT_PTR-&gtCATEGORY_FUND_REC.FEC =
                                CURRENT_PTR-&gtCATEGORY_FUND_REC.FEC +
                                DEFUND_RECORD.FEC;
                            CURRENT_PTR-&gtCATEGORY_FUND_REC.FTOTAMT =
                                CURRENT_PTR-&gtCATEGORY_FUND_REC.FTOTAMT +
                                DEFUND_RECORD.FTOTAL_AMOUNT;
                            CURRENT_PTR-&gtCATEGORY_FUND_REC.FACTPCT =
                                CURRENT_PTR-&gtCATEGORY_FUND_REC.FACTPCT +
                                DEFUND_RECORD.FACTUAL_PCT;
                            CURRENT_PTR-&gtCATEGORY_FUND_REC.FFNDTOT =
                                CURRENT_PTR-&gtCATEGORY_FUND_REC.FFNDTOT +
                                DEFUND_RECORD.FFUND_TOTAL;
                          END;   /* IF DEFUND.CN ^= 0000 DO */
     
                     END;   /* IF FUND_IN_LIST DO */
     
                     /* IF FUND NOT IN THE LIST ALREADY AND
                        THE CATEGORY IS NOT A ZERO CATEGORY, 
                        THEN ADD A NEW NODE TO THE LIST.   */
                  ELSE   
                     DO;
                       IF DEFUND_RECORD.CN ^= '0000' THEN
                          DO;
                            ALLOCATE CATEGORY_FUND_REC SET (DEFUND_PTR);
                            /*--- FIRST NODE ON THE LIST ---*/
                            IF TOP_PTR = NULL()
                               THEN DO;
                                 TOP_PTR  = DEFUND_PTR;
                                 LAST_PTR = DEFUND_PTR;
                                 DEFUND_PTR-&gtCATEGORY_FUND_REC.NEXT_PTR=
                                                               NULL();
                               END;
                      /*--- ADD THE NEW NODE TO THE END OF THE LIST --*/
                            ELSE DO;
                               LAST_PTR-&gtCATEGORY_FUND_REC.NEXT_PTR =
                                                           DEFUND_PTR;
                               LAST_PTR = DEFUND_PTR;
                               DEFUND_PTR-&gtCATEGORY_FUND_REC.NEXT_PTR = 
                                                             NULL();
                            END;
          
                            DEFUND_PTR-&gtCATEGORY_FUND_REC.PCN  = 
                                             DEFUND_RECORD.PCN;
                            DEFUND_PTR-&gtCATEGORY_FUND_REC.UNITNO = 
                                             DEFUND_RECORD.UNITNO;
                            DEFUND_PTR-&gtCATEGORY_FUND_REC.FUND = 
                                             DEFUND_RECORD.FUND;
                            DEFUND_PTR-&gtCATEGORY_FUND_REC.CN   = ' ';
     
                            DEFUND_PTR-&gtCATEGORY_FUND_REC.FLIMIT = 
                                             DEFUND_RECORD.FLIMIT;
                            DEFUND_PTR-&gtCATEGORY_FUND_REC.FCOST = 
                                             DEFUND_RECORD.FCOST;
                            DEFUND_PTR-&gtCATEGORY_FUND_REC.FADJTOT = 
                                             DEFUND_RECORD.FADJTOT;
                            DEFUND_PTR-&gtCATEGORY_FUND_REC.FEC = 
                                             DEFUND_RECORD.FEC;
                            DEFUND_PTR-&gtCATEGORY_FUND_REC.FTOTAMT = 
                                            DEFUND_RECORD.FTOTAL_AMOUNT;
                            DEFUND_PTR-&gtCATEGORY_FUND_REC.FACTPCT = 
                                             DEFUND_RECORD.FACTUAL_PCT;
                            DEFUND_PTR-&gtCATEGORY_FUND_REC.FFNDTOT = 
                                             DEFUND_RECORD.FFUND_TOTAL;
                            DEFUND_PTR-&gtCATEGORY_FUND_REC.FPARTPCT = 
                                           DEFUND_RECORD.FPARTICIPATING;
                          END;   /* IF DEFUND.CN ^= 0000 DO */
                     END;   /* ELSE DO */

                END; /* IF DECATG.CLOWCOST = 'Y' */

          END;   /* IF DEFUND.CN ^= ' ' DO */

 
       /*--- GET NEXT FUND ---*/
       ITRC = ITREAD ('GPDEFUND', '', '', '');
       IF ITRC = 8
          THEN DEFUND_FOUND = '0'B;
       IF DEFUND_FOUND THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

             CALL CONVERT_GPDEFUND_TO_DEFUND;
          END;

    END; /* DO WHILE DEFUND_FOUND */

    CALL UPDATE_FUND_TOTALS;

    /*--- FREE THE UNIT LINK LIST ---*/
    CURRENT_PTR = TOP_PTR;
    DO WHILE ( CURRENT_PTR ^= NULL() );
       LAST_PTR = CURRENT_PTR-&gtCATEGORY_FUND_REC.NEXT_PTR;
       FREE CURRENT_PTR-&gtCATEGORY_FUND_REC;
       CURRENT_PTR = LAST_PTR;
    END;

    SHELL$MODULE_SEGMENT = SAVE_SEGMENT;


     /*--- NESTED PROCEDURES WITHIN COMPUTE_CATEGORY_FUND_TOTALS ---*/
     CHECK_LIST_FOR_FUND : PROC;

         /*--- SEARCH THE UNIT-LIST ---*/
         CURRENT_PTR = TOP_PTR;
         FUND_IN_LIST = '0'B;

         DO WHILE ( CURRENT_PTR ^= NULL() &amp ^FUND_IN_LIST );
     
            IF (CURRENT_PTR-&gtCATEGORY_FUND_REC.PCN = 
                                      DEFUND_RECORD.PCN &amp
                CURRENT_PTR-&gtCATEGORY_FUND_REC.UNITNO = 
                                      DEFUND_RECORD.UNITNO &amp
                CURRENT_PTR-&gtCATEGORY_FUND_REC.FUND =
                                      DEFUND_RECORD.FUND    ) THEN
               FUND_IN_LIST = '1'B;
            ELSE 
               CURRENT_PTR = CURRENT_PTR-&gtCATEGORY_FUND_REC.NEXT_PTR;
         END;  /* DO WHILE CURRENT_PTR ^= NULL */
        

     END CHECK_LIST_FOR_FUND;
     /*--------------------------------------------------------*/
     UPDATE_FUND_TOTALS : PROC;

       /* WHEN ALL FUND RECORDS IN THE LIST ARE TOTALLED, */
       /* THE UNIT FUND TOTAL FUND RECORD IS UPDATED.     */

       /*--- UPDATE UNIT RECORDS FROM UNIT LIST ---*/
       CURRENT_PTR = TOP_PTR;
       DO WHILE ( CURRENT_PTR ^= NULL() );
          DEFUND_KEY = CURRENT_PTR-&gtCATEGORY_FUND_REC.PCN    ||
                       CURRENT_PTR-&gtCATEGORY_FUND_REC.UNITNO ||
                       '    ' || CURRENT_PTR-&gtCATEGORY_FUND_REC.FUND;
     
          DEFUND_FOUND = '1'B;
          ITRC = ITREAD ('GPDEFUND', DEFUND_KEY, '', '');
          IF ITRC = 8
             THEN DEFUND_FOUND = '0'B;
          IF DEFUND_FOUND THEN
             DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEFUND_TO_DEFUND');
           %END;

               CALL CONVERT_GPDEFUND_TO_DEFUND;

               DEFUND_RECORD.FUND     = 
                     CURRENT_PTR-&gtCATEGORY_FUND_REC.FUND;
               DEFUND_RECORD.CN       = 
                     CURRENT_PTR-&gtCATEGORY_FUND_REC.CN;
               DEFUND_RECORD.FLIMIT   = 
                     CURRENT_PTR-&gtCATEGORY_FUND_REC.FLIMIT;
               DEFUND_RECORD.FCOST    = 
                      CURRENT_PTR-&gtCATEGORY_FUND_REC.FCOST; 
               DEFUND_RECORD.FADJTOT  = 
                      CURRENT_PTR-&gtCATEGORY_FUND_REC.FADJTOT;
               DEFUND_RECORD.FEC      = 
                      CURRENT_PTR-&gtCATEGORY_FUND_REC.FEC;
               DEFUND_RECORD.FTOTAL_AMOUNT  = 
                      CURRENT_PTR-&gtCATEGORY_FUND_REC.FTOTAMT;
               DEFUND_RECORD.FACTUAL_PCT  = 
                      CURRENT_PTR-&gtCATEGORY_FUND_REC.FACTPCT;
               DEFUND_RECORD.FFUND_TOTAL  = 
                      CURRENT_PTR-&gtCATEGORY_FUND_REC.FFNDTOT;
               DEFUND_RECORD.FPARTICIPATING = 
                      CURRENT_PTR-&gtCATEGORY_FUND_REC.FPARTPCT;

               CALL CONVERT_DEFUND_TO_GPDEFUND;
               ITRC = ITWRITE ('GPDEFUND', '');
            END;   /* IF DEFUND FOUND DO */
          CURRENT_PTR = CURRENT_PTR-&gtCATEGORY_FUND_REC.NEXT_PTR;
       END; /* WHILE CURRENT_PTR */

     END UPDATE_FUND_TOTALS;


     /*--END NESTED PROCEDURES WITHIN COMPUTE_CATEGOTY_FUND_TOTALS--*/

 END COMPUTE_CATEGORY_FUND_TOTALS;

 /*------------------------------------------------------------------*/
 /*                  COMPUTE_EST_TOTALS                              */
 /*                                                                  */
 /*  COMPUTE ESTIMATE TOTALS BY SUMMING AMOUNTS FOR ALL PROJECTS IN  */
 /*  THE CURRENT PRIME PROJECT. UPDATES GPDEEST, UPDATES GPDEPROJ.   */
 /*------------------------------------------------------------------*/
 COMPUTE_EST_TOTALS : PROC;
     
   DCL SAVE_SEGMENT                   CHAR (31),
       MOST_RECENT_UNIT_SYSTEM        CHAR (1) INIT ('N'),
       PROJECT_LENGTH                 FIXED DEC (9,4) INIT (0),
       ROADWAY_LENGTH                 FIXED DEC (9,4) INIT (0),
       BRIDGE_LENGTH                  FIXED DEC (9,4) INIT (0),
       BRIDGE_LENGTH_MILES            FIXED DEC (9,4) INIT (0);
     
   SAVE_SEGMENT = SHELL$MODULE_SEGMENT;
   SHELL$MODULE_SEGMENT = 'COMPUTE_EST_TOTALS';
     
       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('INSIDE PROCEDURE ',
                              TRIM(SHELL$MODULE_SEGMENT));
           %END;
       

   DEPROJ_FOUND = '1'B;
   ITRC = ITREAD ('GPDEPROJ', ' ', '0', 'GE');
   IF ITRC = 8
      THEN DEPROJ_FOUND = '0'B;
   IF DEPROJ_FOUND
      THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEPROJ_TO_DEPROJ');
           %END;

        CALL CONVERT_GPDEPROJ_TO_DEPROJ;
      END;
     
   DEESTTOT_KEY = ' ';

   GPDEEST_FOUND = '1'B;
     
   DO WHILE (DEPROJ_FOUND);

      IF DEPROJ_RECORD.ESTKEY ^= DEESTTOT_RECORD.ESTKEY THEN
         DO;

           /* KEYED READ TO GET THE GPDEEST RECORD 
              OF THE CURRENT GPDEPROJ_RECORD.ESTKEY */

           DEESTTOT_KEY = DEPROJ_RECORD.ESTKEY;
           ITRC = ITREAD ('GPDEEST ',DEESTTOT_KEY,'','');

           IF ITRC = 8 THEN
              GPDEEST_FOUND = '0'B;

           IF GPDEEST_FOUND THEN
              CALL CONVERT_GPDEEST_TO_DEESTTOT;

         END; /* IF DEPROJ.ESTKEY ^= DEESTTOT_KEY DO */

          /* GPDEEST IS ALREADY BUILT; THEREFORE, GPDEEST IS NOT 
             BUILT HERE.  INSTEAD, WE WILL READ THE NEXT GPDEEST 
             RECORD.  ALL OF THIS WAS DONE INSIDE THE 
             &quotIF DEPROJ.ESTKEY ^= DEESTTOT_KEY THEN DO&quot STATEMENT. */

         /*  %IF USEPRIMPROJ = 'Y'                   */
         /*    %THEN %DO;                            */
         /*        -- GET THE DESCRIPTIONS FROM PRIMPROJ --
                 ITRC = ITREAD('PRIMPROJ',DEPROJ_RECORD.ESTKEY,'','');
                 IF ITRC = 8
                    THEN CALL FATAL_ERROR ('PROGRAM',
                              'NO PRIMPROJ RECORD FOR PPCN=' ||
                              DEPROJ_RECORD.ESTKEY);
                 DEESTTOT_RECORD.EPROJNUM = PRIMPROJ_RECORD.PPROJNUM;
                 DEESTTOT_RECORD.EPROADNM = PRIMPROJ_RECORD.PPROADNM;
               %END;
               %ELSE %DO;
                 DEESTTOT_RECORD.EPROJNUM = ' ';
                 DEESTTOT_RECORD.EPROADNM = ' ';
               %END;
     
           DEESTTOT_KEY = DEPROJ_RECORD.ESTKEY;
     
           DEESTTOT_RECORD.PPLOC1   = PRIMPROJ_RECORD.PPLOC1;
           DEESTTOT_RECORD.PPLOC2   = PRIMPROJ_RECORD.PPLOC2;
           DEESTTOT_RECORD.FEDAPC1  = PRIMPROJ_RECORD.FEDAPC1;
           DEESTTOT_RECORD.FEDAPC2  = PRIMPROJ_RECORD.FEDAPC2;
           DEESTTOT_RECORD.FEDAPC3  = PRIMPROJ_RECORD.FEDAPC3;
           DEESTTOT_RECORD.PPSST1   = PRIMPROJ_RECORD.PPSST1 ;
           DEESTTOT_RECORD.PPSST2   = PRIMPROJ_RECORD.PPSST2 ;
           DEESTTOT_RECORD.PPSST3   = PRIMPROJ_RECORD.PPSST3 ;
           DEESTTOT_RECORD.PPSST4   = PRIMPROJ_RECORD.PPSST4 ;
           DEESTTOT_RECORD.PPSST5   = PRIMPROJ_RECORD.PPSST5 ;
           DEESTTOT_RECORD.PPSST6   = PRIMPROJ_RECORD.PPSST6 ;
           DEESTTOT_RECORD.PPSST7   = PRIMPROJ_RECORD.PPSST7 ;
           DEESTTOT_RECORD.PPSST8   = PRIMPROJ_RECORD.PPSST8 ;
           DEESTTOT_RECORD.PPSST9   = PRIMPROJ_RECORD.PPSST9 ;
           DEESTTOT_RECORD.PPSST10  = PRIMPROJ_RECORD.PPSST10;
           DEESTTOT_RECORD.PPLST1   = PRIMPROJ_RECORD.PPLST1 ;
           DEESTTOT_RECORD.PPLST2   = PRIMPROJ_RECORD.PPLST2 ;
           DEESTTOT_RECORD.PPNUM1   = PRIMPROJ_RECORD.PPNUM1 ;
           DEESTTOT_RECORD.PPNUM2   = PRIMPROJ_RECORD.PPNUM2 ;
           DEESTTOT_RECORD.PPNUM3   = PRIMPROJ_RECORD.PPNUM3 ;
           DEESTTOT_RECORD.PPNUM4   = PRIMPROJ_RECORD.PPNUM4 ;
           DEESTTOT_RECORD.PPDT1    = PRIMPROJ_RECORD.PPDT1  ;
           DEESTTOT_RECORD.PPDT2    = PRIMPROJ_RECORD.PPDT2  ;
           DEESTTOT_RECORD.PPDT3    = PRIMPROJ_RECORD.PPDT3  ;
           DEESTTOT_RECORD.PPDT4    = PRIMPROJ_RECORD.PPDT4  ;
           DEESTTOT_RECORD.PPDT5    = PRIMPROJ_RECORD.PPDT5  ;
           DEESTTOT_RECORD.PPCDE1   = PRIMPROJ_RECORD.PPCDE1 ;
           DEESTTOT_RECORD.PPCDE2   = PRIMPROJ_RECORD.PPCDE2 ;
           DEESTTOT_RECORD.PPCDE3   = PRIMPROJ_RECORD.PPCDE3 ;
           DEESTTOT_RECORD.PPFLG1   = PRIMPROJ_RECORD.PPFLG1 ;
           DEESTTOT_RECORD.PPFLG2   = PRIMPROJ_RECORD.PPFLG2 ;
           DEESTTOT_RECORD.PPFLG3   = PRIMPROJ_RECORD.PPFLG3 ;
           DEESTTOT_RECORD.PPFLG4   = PRIMPROJ_RECORD.PPFLG4 ;
           DEESTTOT_RECORD.PPFLG5   = PRIMPROJ_RECORD.PPFLG5 ;
     
           DEESTTOT_RECORD.EST_COST_TOTAL       = 0.0;
           DEESTTOT_RECORD.EST_EC_TOTAL         = 0.0;
           DEESTTOT_RECORD.EST_AMOUNT_TOTAL     = 0.0;
           DEESTTOT_RECORD.EST_FUNDING_TOTAL    = 0.0;
           DEESTTOT_RECORD.PROJECT_LENGTH_MILES = 0.0;
           DEESTTOT_RECORD.BRIDGE_LENGTH_FEET   = 0.0;
           DEESTTOT_RECORD.ROADWAY_LENGTH_MILES = 0.0;
                                                        */     
      PROJECT_LENGTH = 0;
      ROADWAY_LENGTH = 0;
      BRIDGE_LENGTH  = 0;
     
      DECATG_FOUND = '1'B;
      DECATG_KEY   = DEPROJ_RECORD.PCN;
     
      ITRC = ITREAD ('GPDECATG', DECATG_KEY, '', 'GE');
      IF ITRC = 8
         THEN DECATG_FOUND = '0'B;
      IF DECATG_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

           CALL CONVERT_GPDECATG_TO_DECATG;
         END;
     
      DO WHILE (DECATG_FOUND &amp DECATG_RECORD.PCN = DEPROJ_RECORD.PCN);
     
         IF DECATG_RECORD.CN = ' ' | DECATG_RECORD.CN = ZERO_CATEGORY
            THEN GOTO NEXT_CATEGORY;
     
         IF DECATG_RECORD.CLOWCOST = 'Y'
            THEN DO;
     
              DEESTTOT_RECORD.EST_COST_TOTAL =
                   DEESTTOT_RECORD.EST_COST_TOTAL +
                        DECATG_RECORD.CCONST_TOTAL;
    /* pcgw 9/3/91 */ 
              DEESTTOT_RECORD.EPPECTOT       =
                DEESTTOT_RECORD.EPPECTOT + DECATG_RECORD.CADJTOT;

              DEESTTOT_RECORD.EST_EC_TOTAL   =
                DEESTTOT_RECORD.EST_EC_TOTAL + DECATG_RECORD.CEC_TOTAL;

              DEESTTOT_RECORD.EST_AMOUNT_TOTAL =
                   DEESTTOT_RECORD.EST_AMOUNT_TOTAL +
                      DECATG_RECORD.CTOTAL_AMOUNT;
     
              DEESTTOT_RECORD.EST_FUNDING_TOTAL =
                DEESTTOT_RECORD.EST_FUNDING_TOTAL +
                    DECATG_RECORD.CFUNDED_AMOUNT;
     
              PROJECT_LENGTH = PROJECT_LENGTH + DECATG_RECORD.CLENGTH;
              BRIDGE_LENGTH  = BRIDGE_LENGTH  + DECATG_RECORD.CBRLEN;
     
              DEPROJ_RECORD.PESTAMT = DEPROJ_RECORD.PESTAMT +
                 DECATG_RECORD.CFUNDED_AMOUNT;
            END;    /* THEN */
     
     
         NEXT_CATEGORY:
     
         ITRC = ITREAD ('GPDECATG', '', '', '');
         IF ITRC = 8
            THEN DECATG_FOUND = '0'B;
         IF DECATG_FOUND
            THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDECATG_TO_DECATG');
           %END;

              CALL CONVERT_GPDECATG_TO_DECATG;
            END;
      END; /* WHILE DECATG */

      MOST_RECENT_UNIT_SYSTEM = DEPROJ_RECORD.ASPHSTAT;
     
      CALL CONVERT_DEPROJ_TO_GPDEPROJ;
      ITRC = ITWRITE ('GPDEPROJ', '');
     
      DEESTTOT_RECORD.PROJECT_LENGTH_MILES =
         DEESTTOT_RECORD.PROJECT_LENGTH_MILES + PROJECT_LENGTH;
     
      DEESTTOT_RECORD.BRIDGE_LENGTH_FEET =
         DEESTTOT_RECORD.BRIDGE_LENGTH_FEET + BRIDGE_LENGTH;
     
      ITRC = ITREAD ('GPDEPROJ', '', '', '');
      IF ITRC = 8
         THEN DEPROJ_FOUND = '0'B;
      IF DEPROJ_FOUND
         THEN DO;

       %IF DEBUGGER = 'ON'
           %THEN %DO;
              PUT SKIP LIST ('CALL CONVERT_GPDEPROJ_TO_DEPROJ');
           %END;

            CALL CONVERT_GPDEPROJ_TO_DEPROJ;
           END;
 
      IF (DEPROJ_RECORD.ESTKEY ^= DEESTTOT_RECORD.ESTKEY | 
          ^DEPROJ_FOUND) THEN
         DO;

          /*  DEESTTOT_RECORD.ESTKEY = DEESTTOT_KEY; */

            /*--- RTD 11/28/94 - MAKE UNIT-SYSTEM-DEPENDENT CONV ---*/
            SELECT;
              WHEN (MOST_RECENT_UNIT_SYSTEM = 'E')
                BRIDGE_LENGTH_MILES =
                   DIVIDE (DEESTTOT_RECORD.BRIDGE_LENGTH_FEET,5280,9,4);
              WHEN (MOST_RECENT_UNIT_SYSTEM = 'M')
                BRIDGE_LENGTH_MILES =
                   DIVIDE (DEESTTOT_RECORD.BRIDGE_LENGTH_FEET,1000,9,4);
              WHEN (MOST_RECENT_UNIT_SYSTEM = 'N')
                BRIDGE_LENGTH_MILES=DEESTTOT_RECORD.BRIDGE_LENGTH_FEET;
            END;

            ROADWAY_LENGTH =
               DEESTTOT_RECORD.PROJECT_LENGTH_MILES -
                  BRIDGE_LENGTH_MILES;

            DEESTTOT_RECORD.ROADWAY_LENGTH_MILES =
                                ROADWAY_LENGTH;

            CALL CONVERT_DEESTTOT_TO_GPDEEST;
            ITRC = ITWRITE ('GPDEEST ', '');
         END; /* THEN */
   END;   /* DO WHILE DEPROJ FOUND */

   SHELL$MODULE_SEGMENT = SAVE_SEGMENT;

   END COMPUTE_EST_TOTALS;

 END DCEFUND;
     
</PRE>
<ONLINE>
<HR>
<A HREF="ebsindex.htm"><IMG SRC="/clipart/back.gif" ALIGN="MIDDLE" BORDER=0>
EBSIndex</A><P>
<A HREF="/index.htm"><IMG SRC="/clipart/home.gif" ALIGN="MIDDLE" BORDER=0>
Network Home Page</A>
<HR>
<EM>
Please send any comments or problems to
<A HREF="mailto:webmaster@infotechfl.com">webmaster@infotechfl.com</A>
</EM>
</ONLINE>
</BODY>
</HTML>

